# vim:expandtab:shiftwidth=4:softtabstop=4:tabstop=4:

# increment this if you have made a change that should force a new kernel
# to build built
BUILD_GEN=1

source ${0%/*}/lbuild-sles

# this is what lnxrel really should be, once bug 19336 lands
real_lnxrel=${lnxrel##${lnxmin#.}-}

edit_specs() {

    # edit the SPECs with our changes
    local spec
    for spec in $RPMSMPTYPE source; do
        #cp $TOPDIR/SPECS/kernel-$spec.spec{,.orig}
        sed -i -e 's/^\(Name:.*kernel-\)\(.*\)/\1lustre-\2/' \
               -e "s/^\(Release: *\).*$/\1${real_lnxrel}_${buildid}/" \
               -e "/^Provides:  *kernel = /a\
Provides:       kernel-$spec = %{version}-%{release}
" \
               -e "s/^ExclusiveArch:.*/& ppc ppc64/" \
               -e '/^%setup /a\
cp  %_sourcedir/linux-2.6.27-lustre.patch %_builddir/%{name}-%{version}/lustre.patch\
! grep -q lustre.patch %_sourcedir/series.conf && echo -e "\\n\\tlustre.patch" >> %_sourcedir/series.conf' \
               -e "/flavor=\${config/a\
    [ \"\$flavor\" == \"$RPMSMPTYPE\" ] || continue" \
               -e 's/^\([ 	][ 	]*-i %_builddir\/kernel-\)\(source-2.6.27.21\/\$patch; then\)/\1lustre-\2/' \
               -e '/^%build/,/^%changelog/s/\(kernel-\)\(source\.files\)/\1lustre-\2/g' \
               -e '/--no-backup-if-mismatch/,/fi/s/kernel-source-/kernel-lustre-source-/g' \
               -e "s/^\(%package -n kernel-\)\(.*\)/\1lustre-\2/" \
               -e "s/^\(%description -n kernel-\)\(.*\)/\1lustre-\2/" \
               -e "s/^\(%files -n kernel-\)\(.*\)/\1lustre-\2/" \
               -e "s/^\(Provides:.*kernel-\)\(.*\)/\1lustre-\2/" \
               -e "s/^\(Requires:.*kernel-\)\(.*\)/\1lustre-\2/" \
               -e "s/^\(Supplements:.*kernel-\)\(.*\)/\1lustre-\2/" \
               -e "s/^\(BuildRequires:  kernel-dummy\)/# \1/" \
          SPECS/kernel-${spec}.spec

    # XXX - a building-on-Ubuntu hack
        if grep -q "Ubuntu" /etc/issue; then
            sed -i -e '/^%_sourcedir\/install-configs %_sourcedir .*/i\
curl ftp://ftp.kernel.org/pub/linux/kernel/people/akpm/patches/2.6/2.6.17/2.6.17-mm1/broken-out/i386-use-c-code-for-current_thread_info.patch | patch -p1' \
                   -e 's/^\(BuildRequires: .*\)$/#NOU \1/g' \
                   -e 's/%(\(chmod .*\))$/%(bash -c "\1")/' \
                   -e 's/ -a 109//' \
              SPECS/kernel-${spec}.spec
    fi
    done
}

unpack_linux_devel_rpm-sles11() {
    local callers_rpm="$1"

    local rpmdir="${callers_rpm%/*}"

    local kernelrpm
    local wanted_kernel="${lnxmaj}${lnxmin}${TARGET_DELIMITER}${lnxrel}"
    # this is a hack that should go away when the modified lustre kernel
    # Provides kernel-default-base                        vvvvvvvvv
    if ! kernelrpm=$(find_rpm "$rpmdir" provides "^kernel-(lustre-)?default-base = $wanted_kernel"); then
        fatal 1 "Could not find the kernel-default-base in $rpmdir/"
    fi

    if ! rpm2cpio < "$rpmdir/$kernelrpm" | cpio -id > /dev/null 2>&1; then
        fatal 1 "Unpack error for $kernelrpm"
    fi

}

# this is actually valid for sles10 and sles11 but let's test it on sles11 only, first
find_linux_devel_paths() {
    local path="$1"

    LINUX=$path/usr/src/linux-${lnxmaj}${lnxmin}${delimiter}${lnxrel##${lnxmin#.}-}

    local objects=$TARGET_ARCH/$RPMSMPTYPE
    if [ -d $path/usr/src/linux-${lnxmaj}${lnxmin}${delimiter}${lnxrel##${lnxmin#.}-}-obj/powerpc ]; then
        objects="powerpc/$TARGET_ARCH"
    elif [ $TARGET_ARCH == 'i686' ]; then
        objects="i386/$RPMSMPTYPE"
    fi

    LINUXOBJ=$path/usr/src/linux-${lnxmaj}${lnxmin}${delimiter}${lnxrel##${lnxmin#.}-}-obj/$objects

    LINUXRELEASE=$(find_linux_release ${LINUXOBJ:-$LINUX})
    if [ -z "$LINUXRELEASE" ]; then
        echo "Failed to find linux release in ${LINUXOBJ:-$LINUX}"
        RC=255
    fi
}
