diff -pur linux-2.6.9-full.mid/fs/ext3/ialloc.c linux-2.6.9-full/fs/ext3/ialloc.c
--- linux-2.6.9-full.mid/fs/ext3/ialloc.c	2008-04-16 13:49:22.000000000 +0800
+++ linux-2.6.9-full/fs/ext3/ialloc.c	2008-04-16 15:26:40.000000000 +0800
@@ -440,6 +440,9 @@ struct inode *ext3_new_inode(handle_t *h
 	if (!dir || !dir->i_nlink)
 		return ERR_PTR(-EPERM);
 
+	if (ext3_max_dir_size > 0 && i_size_read(dir) >= ext3_max_dir_size)
+		return ERR_PTR(-EFBIG);
+
 	sb = dir->i_sb;
 	inode = new_inode(sb);
 	if (!inode)
diff -pur linux-2.6.9-full.mid/fs/ext3/super.c linux-2.6.9-full/fs/ext3/super.c
--- linux-2.6.9-full.mid/fs/ext3/super.c	2008-05-06 16:07:23.000000000 +0800
+++ linux-2.6.9-full/fs/ext3/super.c	2008-05-12 02:05:36.000000000 +0800
@@ -2610,6 +2610,53 @@ static struct file_system_type ext3_fs_t
 	.fs_flags	= FS_REQUIRES_DEV,
 };
 
+/*
+ * max directory size tunable
+ */
+#define EXT3_DEFAULT_MAX_DIR_SIZE		0
+#define EXT3_MAX_DIR_SIZE_NAME		"max_dir_size"
+
+unsigned long ext3_max_dir_size;
+
+static int ext3_max_dir_size_read(char *page, char **start, off_t off,
+                                  int count, int *eof, void *data)
+{
+	int len;
+
+	*eof = 1;
+	if (off != 0)
+		return 0;
+
+	len = sprintf(page, "%lu\n", ext3_max_dir_size);
+	*start = page;
+	return len;
+}
+
+static int ext3_max_dir_size_write(struct file *file, const char *buffer,
+                                   unsigned long count, void *data)
+{
+	char str[32];
+	unsigned long value;
+	char *end;
+
+	if (count >= sizeof(str)) {
+		printk(KERN_ERR "EXT3-fs: %s string too long, max %u bytes\n",
+		       EXT3_MAX_DIR_SIZE_NAME, (int)sizeof(str));
+		return -EOVERFLOW;
+	}
+
+	if (copy_from_user(str, buffer, count))
+		return -EFAULT;
+
+	value = simple_strtol(str, &end, 0);
+	if (value < 0)
+		return -ERANGE;
+
+	ext3_max_dir_size = value;
+	return count;
+}
+
+
 #define EXT3_ROOT "ext3"
 struct proc_dir_entry *proc_root_ext3;
 
@@ -2628,8 +2675,22 @@ int __init init_ext3_proc(void)
 		goto out_mb_proc;
 	}
 
+	proc = create_proc_entry(EXT3_MAX_DIR_SIZE_NAME,
+		                 S_IFREG | S_IRUGO | S_IWUSR, proc_root_ext3);
+	if (proc == NULL) {
+		printk(KERN_ERR "EXT3-fs: Unable to create %s/%s\n",
+			EXT3_ROOT, EXT3_MAX_DIR_SIZE_NAME);
+		ret = -ENOMEM;
+		goto out_proc_root;
+	}
+
+	proc->data = NULL;
+	proc->read_proc = ext3_max_dir_size_read;
+	proc->write_proc = ext3_max_dir_size_write;
 	return 0;
 
+out_proc_root:
+	remove_proc_entry(EXT3_ROOT, proc_root_fs);
 out_mb_proc:
 	exit_ext3_mb_proc();
 out:
@@ -2639,6 +2700,7 @@ out:
 void exit_ext3_proc(void)
 {
 	exit_ext3_mb_proc();
+	remove_proc_entry(EXT3_MAX_DIR_SIZE_NAME, proc_root_ext3);
 	remove_proc_entry(EXT3_ROOT, proc_root_fs);
 }
 
diff -pur linux-2.6.9-full.mid/include/linux/ext3_fs.h linux-2.6.9-full/include/linux/ext3_fs.h
--- linux-2.6.9-full.mid/include/linux/ext3_fs.h	2008-04-16 14:02:18.000000000 +0800
+++ linux-2.6.9-full/include/linux/ext3_fs.h	2008-04-15 00:59:38.000000000 +0800
@@ -854,6 +854,8 @@ extern struct proc_dir_entry *proc_root_
 extern int __init init_ext3_proc(void);
 extern void exit_ext3_proc(void);
 
+extern unsigned long ext3_max_dir_size;
+
 extern void ext3_error (struct super_block *, const char *, const char *, ...)
 	__attribute__ ((format (printf, 3, 4)));
 extern void __ext3_std_error (struct super_block *, const char *, int);
