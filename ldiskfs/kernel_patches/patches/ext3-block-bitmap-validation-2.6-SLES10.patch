Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>
Signed-off-by: Andreas Dilger <adilger@clusterfs.com>
Index: linux-2.6.16.46-0.14/fs/ext3/balloc.c
===================================================================
--- linux-2.6.16.46-0.14.orig/fs/ext3/balloc.c
+++ linux-2.6.16.46-0.14/fs/ext3/balloc.c
@@ -144,6 +144,14 @@ unsigned ext3_init_block_bitmap(struct s
 	return free_blocks - sbi->s_itb_per_group - 2;
 }
 
+static inline int
+block_in_use(unsigned long block, struct super_block *sb, unsigned char *map)
+{
+	return ext3_test_bit ((block -
+		le32_to_cpu(EXT3_SB(sb)->s_es->s_first_data_block)) %
+			 EXT3_BLOCKS_PER_GROUP(sb), map);
+}
+
 /*
  * Read the bitmap for a given block_group, reading into the specified 
  * slot in the superblock's bitmap cache.
@@ -153,33 +161,52 @@ unsigned ext3_init_block_bitmap(struct s
 struct buffer_head *
 read_block_bitmap(struct super_block *sb, unsigned int block_group)
 {
+	int i;
 	struct ext3_group_desc * desc;
 	struct buffer_head * bh = NULL;
+	unsigned long bitmap_blk;
 
 	desc = ext3_get_group_desc (sb, block_group, NULL);
 	if (!desc)
-		goto error_out;
-	if (desc->bg_flags & cpu_to_le16(EXT3_BG_BLOCK_UNINIT)) {
-		bh = sb_getblk(sb, le32_to_cpu(desc->bg_block_bitmap));
-		if (!buffer_uptodate(bh)) {
-			lock_buffer(bh);
-			if (!buffer_uptodate(bh)) {
-				ext3_init_block_bitmap(sb, bh,block_group,desc);
-				set_buffer_uptodate(bh);
-			}
-			unlock_buffer(bh);
-		}
-	} else {
-		bh = sb_bread(sb, le32_to_cpu(desc->bg_block_bitmap));
-	}
+		return NULL;
+	bitmap_blk = le32_to_cpu(desc->bg_block_bitmap);
+	bh = sb_bread(sb, le32_to_cpu(desc->bg_block_bitmap));
 	if (!bh)
-		ext3_error (sb, "read_block_bitmap",
-			    "Cannot read block bitmap - "
-			    "block_group = %d, block_bitmap = %u",
-			    block_group, le32_to_cpu(desc->bg_block_bitmap));
+		ext3_error (sb, __FUNCTION__,
+				"Cannot read block bitmap - "
+				"block_group = %d, block_bitmap = %lu",
+				block_group, bitmap_blk);
+	/* check whether block bitmap block number is set */
+	   if (!block_in_use(bitmap_blk, sb, bh->b_data)) {
+		   /* bad block bitmap */
+		   goto error_out;
+	   }
+
+	   /* check whether the inode bitmap block number is set */
+	   bitmap_blk = le32_to_cpu(desc->bg_inode_bitmap);
+	   if (!block_in_use(bitmap_blk, sb, bh->b_data)) {
+		   /* bad block bitmap */
+		   goto error_out;
+	   }
+	   /* check whether the inode table block number is set */
+	   bitmap_blk = le32_to_cpu(desc->bg_inode_table);
+	   for (i = 0; i < EXT3_SB(sb)->s_itb_per_group; i++, bitmap_blk++) {
+		   if (!block_in_use(bitmap_blk, sb, bh->b_data)) {
+			   /* bad block bitmap */
+			   goto error_out;
+		   }
+	   }
+	   return bh;
+
 error_out:
-	return bh;
+	   brelse(bh);
+	   ext3_error(sb, __FUNCTION__,
+			   "Invalid block bitmap - "
+			   "block_group = %d, block = %lu",
+			   block_group, bitmap_blk);
+	   return NULL;
 }
+
 /*
  * The reservation window structure operations
  * --------------------------------------------
@@ -1548,14 +1575,6 @@ unsigned long ext3_count_free_blocks(str
 #endif
 }
 
-static inline int
-block_in_use(unsigned long block, struct super_block *sb, unsigned char *map)
-{
-	return ext3_test_bit ((block -
-		le32_to_cpu(EXT3_SB(sb)->s_es->s_first_data_block)) %
-			 EXT3_BLOCKS_PER_GROUP(sb), map);
-}
-
 static inline int test_root(int a, int b)
 {
 	int num = b;
