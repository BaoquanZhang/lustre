#!/bin/bash

# cluster name (expect all node names to be this followed by a number)
cluster=mdev

# client node numbers (individual numbers or inclusive ranges)
clients=(7-8)

# numbers of clients to survey
clients_lo=1
clients_hi=2
clients_iterator="+=1"

# numbers of tasks per client to survey
tasks_per_client_lo=1
tasks_per_client_hi=16
tasks_per_client_iterator="*=4"

# record sizes to survey
rsize_lo=1M
rsize_hi=1M
rsize_iterator="*=2"

## which tests to run (first must be write)
# remount)   not really a test; just remount to uncache everything
# *write*)   write
# *)         read
#tests=(write rewrite read reread rewrite_again)
tests=(write rewrite remount read)

# total # bytes written/read by any client node
min_per_client_size=75M
min_total_size=100M

# should each task do I/O to its own file?
file_per_task=1

# the IOR binary
IOR="/home/ericb/ior/src/C/IOR"

# the pdsh binary
pdsh=pdsh

# the llmount binary
llmount=/home/ericb/lustre/utils/llmount

# where lustre is mounted on the clients
lustre=/mnt/lustre

# basename of the test file(s)
testfile=${lustre}/ior_survey_testfile

# how to unmount and remount the F/S on a client (to clear the cache)
remount="umount $lustre && $llmount -o nettype=elan mdev6:/ll_mds/client $lustre"

# the result file prefix (date/time + hostname makes unique)
#rslt=/home/ericb/ior_survey_`date +%F@%R`_`uname -n`
rslt=/home/ericb/ior_survey

#don't spin for MPI completions
export LIBELAN_WAITTYPE=0

################################################################################
# dont change stuff below here

count_range() {
    echo $1 | awk '{ nvals=split($1, vals, "-");\
	             if (nvals == 1) print 1;\
	             else if (nvals == 2) printf "%d\n", vals[2] - vals[1] + 1;}'
}

base_range() {
    echo $1 | awk '{ split($1, vals, "-"); print vals[1]; }'
}

idx2nodenum() {
    n=$1; shift
    while ((1)); do
	range=$1; shift
	if [ -z "$range" ]; then
	    return
	fi
	chunk=`count_range $range`
	if ((chunk > n)); then
	    base=`base_range $range`
	    echo $((base + n))
	    return
	fi
	n=$((n-chunk))
    done
}

n2noderange() {
    n=$1; shift
    sep=""
    nodes="["
    while ((n > 0)); do
	range=$1; shift
	if [ -z "$range" ]; then
            return
	fi
	base=`base_range $range`
	chunk=`count_range $range`
	if ((chunk > n)); then chunk=n; fi
	nodes="${nodes}${sep}${base}"; sep=","
	if ((chunk > 1)); then nodes="${nodes}-$((base+chunk-1))"; fi
	n=$((n-chunk))
    done
    echo "${nodes}]"
}

countnodes() {
    radix=16384
    n=0
    while ((radix > 0)); do
	nodes=`n2noderange $((n+radix)) $@`
	if [ -n "$nodes" ]; then
	    n=$((n+radix))
        fi
	radix=$((radix/2))
    done
    echo $n
}

parse_number() {
    str=$1
    case $str in
	*G|*g) n=`echo $str | sed 's/[gG]//'`; echo $((n*1024*1024*1024));;
	*M|*m) n=`echo $str | sed 's/[Mm]//'`; echo $((n*1024*1024));;
	*K|*k) n=`echo $str | sed 's/[Kk]//'`; echo $((n*1024));;
	*)     echo $1;;
    esac
}

pp_number() {
    n=$1
    G=$((1024*1024*1024))
    M=$((1024*1024))
    K=$((1024))
    if ((n%G == 0 && n >= G)); then
	echo "$((n/G))G"
    elif ((n%M == 0 && n >= M)); then
	echo "$((n/M))M"
    elif ((n%K == 0 && n >= K)); then
	echo "$((n/K))K"
    else
	echo $n
    fi
}

if [ ${#tests[@]} -eq 0 -o "${tests[0]}" != "write" ]; then
    echo "First test must be 'write'" 1>&2
    exit 1
fi

rsltf="${rslt}.summary"
iorcf="${rslt}.script"
workf="${rslt}.detail"
tmpf="${workf}_tmp"

echo -n > $rsltf
echo -n > $workf

print_summary () {
    if [ "$1" = "-n" ]; then
	minusn=$1; shift
    else
	minusn=""
    fi
    echo $minusn "$*" >> $rsltf
    echo $minusn "$*"
}

min_per_client_size=`parse_number $min_per_client_size`
min_total_size=`parse_number $min_total_size`

rsize_lo=`parse_number $rsize_lo`
rsize_hi=`parse_number $rsize_hi`

nclients=`countnodes ${clients[@]}`

if ((clients_hi > nclients)); then clients_hi=$nclients; fi

for ((rsize=rsize_lo; rsize<=rsize_hi; rsize$rsize_iterator)); do
    pp_rsize=`pp_number $rsize`

    for ((nclnt=clients_lo; nclnt<=clients_hi; nclnt$clients_iterator)); do
	test_clients="${cluster}`n2noderange $nclnt ${clients[@]}`"

	per_client_size=$((min_total_size/nclnt))
	if ((per_client_size < min_per_client_size)); then
	    per_client_size=$min_per_client_size
	fi
	total_size=`pp_number $((per_client_size * nclnt))`

	for ((ntask=tasks_per_client_lo; ntask <= tasks_per_client_hi; ntask$tasks_per_client_iterator)); do
	    per_task_size=$((per_client_size/ntask))
	    
	    hdrstr=`printf "Total: %5sB rsize: %4s clients: %4d tasks: %3d: " $total_size $rsize $nclnt $ntask`
	    print_summary -n "$hdrstr"

	    for ((test_idx=0; test_idx < ${#tests[@]}; test_idx++)); do
	        test=${tests[$test_idx]}
		
		print_summary -n "$test "
		echo "===========> ${hdrstr} on $test_clients doing $test" >> $workf
		echo -n > $tmpf

		if [ "$test" = "remount" ]; then
		    echo "=> $remount" >> $tmpf
		    $pdsh -S -b -w "$test_clients" >> $tmpf 2>&1 \
			"$remount"
		    status=$?
		    echo "Completion Status: $status" >> $tmpf

		    if ((status)); then
			result="ERROR"
		    else
			result="OK"
		    fi
		else
		    cmd="(mount -t lustre; mount -t lustre_lite) | grep $lustre"
		    echo "=> $cmd" >> $tmpf
		    $pdsh -S -b -w "$test_clients" >> $tmpf 2>&1 \
			"$cmd"
		    status=$?
		    echo "Completion Status: $status" >> $tmpf

		    if ((status)); then
			cat $tmpf >> $workf
			rm $tmpf
			print_summary "Lustre NOT mounted on $lustre somewhere"
			exit 1
		    fi

		    cmdline=(
		    $IOR                     # the command
		    -o${testfile}            # test file prefix
		    -b${per_task_size}       # bytes per task
		    -t${rsize}               # record size
		    -e                       # fsync before close
		    -q                       # quit on error
		    )

		    idx=${#cmdline[@]}

                    # keep the test file(s) unless this is the last test
		    ((test_idx < ${#tests[@]}-1)) && cmdline[$((idx++))]="-k"

		    # use the existing test file(s) unless this is the first test
		    ((test_idx > 0)) && cmdline[$((idx++))]="-E"

		    # file-per-task
		    ((file_per_task)) && cmdline[$((idx++))]="-F"

		    case "$test" in
		    *write*) cmdline[$((idx++))]="-w"
			     awkstr="Max Write";;
                    *)       cmdline[$((idx++))]="-r"
		             awkstr="Max Read";;
                    esac

		    echo "=> ${cmdline[@]}" >> $tmpf
	
		    $pdsh -S -b -Rmqsh -w "$test_clients" -n $ntask >> $tmpf 2>&1 \
			"${cmdline[@]}"
		    status=$?

		    echo "Completion Status: $status" >> $tmpf
	       
		    if ((status)); then
			result="ERROR"
		    else
			result=`awk < $tmpf "/$awkstr/ {print $ 3; found=1; exit}\
			                     END       {if (!found) print \"ERROR\"}"`
		    fi
		fi

		cat $tmpf >> $workf
		rm $tmpf

	        str=`printf "%8s" "$result"`
		print_summary -n "$str "
	    done
	    print_summary ""
	done
    done
done

# rm $iorcf
