--- linux-2.4.18-chaos5-pristine/drivers/block/blkpg.c	Sat Jun 29 23:07:36 2002
+++ linux-2.4.18-chaos5/drivers/block/blkpg.c	Sat Jun 29 23:09:04 2002
@@ -295,3 +295,38 @@
 }
 
 EXPORT_SYMBOL(blk_ioctl);
+
+#define NUM_DEV_NO_WRITE 16
+static int dev_no_write[NUM_DEV_NO_WRITE];
+
+/*
+ * Debug code for turning block devices "read-only" (will discard writes
+ * silently).  This is for filesystem crash/recovery testing.
+ */
+void dev_set_rdonly(kdev_t dev, int no_write)
+{
+	if (dev) {
+		printk(KERN_WARNING "Turning device %s read-only\n", 
+		       bdevname(dev));
+		dev_no_write[no_write] = 0xdead0000 + dev;
+	}
+}
+
+int dev_check_rdonly(kdev_t dev) {
+	int i;
+
+	for (i = 0; i < NUM_DEV_NO_WRITE; i++) {
+		if ((dev_no_write[i] & 0xffff0000) == 0xdead0000 &&
+		    dev == (dev_no_write[i] & 0xffff))
+			return 1;
+	}
+	return 0;
+}
+
+void dev_clear_rdonly(int no_write) {
+	dev_no_write[no_write] = 0;
+}
+
+EXPORT_SYMBOL(dev_set_rdonly);
+EXPORT_SYMBOL(dev_check_rdonly);
+EXPORT_SYMBOL(dev_clear_rdonly);
--- linux-2.4.18-chaos5-pristine/drivers/block/loop.c	Sat Jun 29 23:07:36 2002
+++ linux-2.4.18-chaos5/drivers/block/loop.c	Sat Jun 29 23:09:04 2002
@@ -503,6 +503,11 @@
 	spin_unlock_irq(&lo->lo_lock);
 
 	if (rw == WRITE) {
+#ifdef CONFIG_DEV_RDONLY
+		if (dev_check_rdonly(rbh->b_rdev))
+			goto err;
+#endif
+
 		if (lo->lo_flags & LO_FLAGS_READ_ONLY)
 			goto err;
 	} else if (rw == READA) {
--- linux-2.4.18-chaos5-pristine/drivers/ide/ide-disk.c	Sat Jun 29 23:07:36 2002
+++ linux-2.4.18-chaos5/drivers/ide/ide-disk.c	Sat Jun 29 23:09:04 2002
@@ -557,6 +557,12 @@
  */
 static ide_startstop_t do_rw_disk (ide_drive_t *drive, struct request *rq, unsigned long block)
 {
+#ifdef CONFIG_DEV_RDONLY
+	if (rq->cmd == WRITE && dev_check_rdonly(rq->rq_dev)) {
+		ide_end_request(1, HWGROUP(drive));
+		return ide_stopped;
+	}
+#endif
 	if (IDE_CONTROL_REG)
 		OUT_BYTE(drive->ctl,IDE_CONTROL_REG);
 
--- linux-2.4.18-chaos5-pristine/fs/ext3/Makefile	Sat Jun 29 23:07:56 2002
+++ linux-2.4.18-chaos5/fs/ext3/Makefile	Sat Jun 29 23:09:04 2002
@@ -9,6 +9,8 @@
 
 O_TARGET := ext3.o
 
+export-objs :=	super.o
+
 obj-y    := balloc.o bitmap.o dir.o file.o fsync.o ialloc.o inode.o \
 		ioctl.o namei.o super.o symlink.o
 obj-m    := $(O_TARGET)
--- linux-2.4.18-chaos5-pristine/fs/ext3/super.c	Sat Jun 29 23:07:56 2002
+++ linux-2.4.18-chaos5/fs/ext3/super.c	Sat Jun 29 23:09:04 2002
@@ -1746,7 +1746,7 @@
 	unregister_filesystem(&ext3_fs_type);
 }
 
-EXPORT_NO_SYMBOLS;
+EXPORT_SYMBOL(ext3_bread);
 
 MODULE_AUTHOR("Remy Card, Stephen Tweedie, Andrew Morton, Andreas Dilger, Theodore Ts'o and others");
 MODULE_DESCRIPTION("Second Extended Filesystem with journaling extensions");
--- linux-2.4.18-chaos5-pristine/fs/jbd/commit.c	Sat Jun 29 23:07:56 2002
+++ linux-2.4.18-chaos5/fs/jbd/commit.c	Sat Jun 29 23:09:04 2002
@@ -482,7 +482,7 @@
            transaction's t_log_list queue, and metadata buffers are on
            the t_iobuf_list queue.
 
-	   Wait for the transactions in reverse order.  That way we are
+	   Wait for the buffers in reverse order.  That way we are
 	   less likely to be woken up until all IOs have completed, and
 	   so we incur less scheduling load.
 	*/
@@ -575,8 +575,10 @@
 
 	jbd_debug(3, "JBD: commit phase 6\n");
 
-	if (is_journal_aborted(journal))
+	if (is_journal_aborted(journal)) {
+		unlock_journal(journal);
 		goto skip_commit;
+	}
 
 	/* Done it all: now write the commit record.  We should have
 	 * cleaned up our previous buffers by now, so if we are in abort
@@ -586,9 +588,10 @@
 	descriptor = journal_get_descriptor_buffer(journal);
 	if (!descriptor) {
 		__journal_abort_hard(journal);
+		unlock_journal(journal);
 		goto skip_commit;
 	}
-	
+
 	/* AKPM: buglet - add `i' to tmp! */
 	for (i = 0; i < jh2bh(descriptor)->b_size; i += 512) {
 		journal_header_t *tmp =
@@ -609,7 +612,6 @@
 		put_bh(bh);		/* One for getblk() */
 		journal_unlock_journal_head(descriptor);
 	}
-	lock_journal(journal);
 
 	/* End of a transaction!  Finally, we can do checkpoint
            processing: any buffers committed as a result of this
@@ -618,6 +620,25 @@
 
 skip_commit:
 
+	/* Call any callbacks that had been registered for handles in this
+	 * transaction.  It is up to the callback to free any allocated
+	 * memory.
+	 */
+	if (!list_empty(&commit_transaction->t_jcb)) {
+		struct list_head *p, *n;
+		int error = is_journal_aborted(journal);
+
+		list_for_each_safe(p, n, &commit_transaction->t_jcb) {
+			struct journal_callback *jcb;
+
+			jcb = list_entry(p, struct journal_callback, jcb_list);
+			list_del(p);
+			jcb->jcb_func(jcb, error);
+		}
+	}
+
+	lock_journal(journal);
+
 	jbd_debug(3, "JBD: commit phase 7\n");
 
 	J_ASSERT(commit_transaction->t_sync_datalist == NULL);
--- linux-2.4.18-chaos5-pristine/fs/jbd/journal.c	Sat Jun 29 23:07:56 2002
+++ linux-2.4.18-chaos5/fs/jbd/journal.c	Sat Jun 29 23:09:04 2002
@@ -58,6 +58,7 @@
 #endif
 EXPORT_SYMBOL(journal_flush);
 EXPORT_SYMBOL(journal_revoke);
+EXPORT_SYMBOL(journal_callback_set);
 
 EXPORT_SYMBOL(journal_init_dev);
 EXPORT_SYMBOL(journal_init_inode);
--- linux-2.4.18-chaos5-pristine/fs/jbd/transaction.c	Sat Jun 29 23:07:56 2002
+++ linux-2.4.18-chaos5/fs/jbd/transaction.c	Sat Jun 29 23:09:04 2002
@@ -57,6 +57,7 @@
 	transaction->t_state = T_RUNNING;
 	transaction->t_tid = journal->j_transaction_sequence++;
 	transaction->t_expires = jiffies + journal->j_commit_interval;
+	INIT_LIST_HEAD(&transaction->t_jcb);
 
 	/* Set up the commit timer for the new transaction. */
 	J_ASSERT (!journal->j_commit_timer_active);
@@ -201,6 +202,20 @@
 	return 0;
 }
 
+/* Allocate a new handle.  This should probably be in a slab... */
+static handle_t *get_handle(int nblocks)
+{
+	handle_t *handle = jbd_kmalloc(sizeof (handle_t), GFP_NOFS);
+	if (!handle)
+		return NULL;
+	memset(handle, 0, sizeof (handle_t));
+	handle->h_buffer_credits = nblocks;
+	handle->h_ref = 1;
+	INIT_LIST_HEAD(&handle->h_jcb);
+
+	return handle;
+}
+
 /*
  * Obtain a new handle.  
  *
@@ -227,14 +242,11 @@
 		handle->h_ref++;
 		return handle;
 	}
-	
-	handle = jbd_kmalloc(sizeof (handle_t), GFP_NOFS);
+
+	handle = get_handle(nblocks);
 	if (!handle)
 		return ERR_PTR(-ENOMEM);
-	memset (handle, 0, sizeof (handle_t));
 
-	handle->h_buffer_credits = nblocks;
-	handle->h_ref = 1;
 	current->journal_info = handle;
 
 	err = start_this_handle(journal, handle);
@@ -333,14 +345,11 @@
 	
 	if (is_journal_aborted(journal))
 		return ERR_PTR(-EIO);
-	
-	handle = jbd_kmalloc(sizeof (handle_t), GFP_NOFS);
+
+	handle = get_handle(nblocks);
 	if (!handle)
 		return ERR_PTR(-ENOMEM);
-	memset (handle, 0, sizeof (handle_t));
 
-	handle->h_buffer_credits = nblocks;
-	handle->h_ref = 1;
 	current->journal_info = handle;
 
 	err = try_start_this_handle(journal, handle);
@@ -1319,6 +1328,29 @@
 #endif
 
 /*
+ * Register a callback function for this handle.  The function will be
+ * called when the transaction that this handle is part of has been
+ * committed to disk with the original callback data struct and the
+ * error status of the journal as parameters.  There is no guarantee of
+ * ordering between handles within a single transaction, nor between
+ * callbacks registered on the same handle.
+ *
+ * The caller is responsible for allocating the journal_callback struct.
+ * This is to allow the caller to add as much extra data to the callback
+ * as needed, but reduce the overhead of multiple allocations.  The caller
+ * allocated struct must start with a struct journal_callback at offset 0,
+ * and has the caller-specific data afterwards.
+ */
+void journal_callback_set(handle_t *handle, void (*func)(void *, int),
+			  void *cb_data)
+{
+	struct journal_callback *jcb = cb_data;
+
+	list_add(&jcb->jcb_list, &handle->h_jcb);
+	jcb->jcb_func = func;
+}
+
+/*
  * All done for a particular handle.
  *
  * There is not much action needed here.  We just return any remaining
@@ -1383,7 +1415,10 @@
 			wake_up(&journal->j_wait_transaction_locked);
 	}
 
-	/* 
+	/* Move callbacks from the handle to the transaction. */
+	list_splice(&handle->h_jcb, &transaction->t_jcb);
+
+	/*
 	 * If the handle is marked SYNC, we need to set another commit
 	 * going!  We also want to force a commit if the current
 	 * transaction is occupying too much of the log, or if the
--- linux-2.4.18-chaos5-pristine/include/linux/blkdev.h	Sat Jun 29 23:07:57 2002
+++ linux-2.4.18-chaos5/include/linux/blkdev.h	Mon Jul  1 08:51:17 2002
@@ -276,4 +276,9 @@
 	}
 	return retval;
 }
+
+#define CONFIG_DEV_RDONLY
+void dev_set_rdonly(kdev_t, int);
+int dev_check_rdonly(kdev_t);
+void dev_clear_rdonly(int);
 #endif
--- linux-2.4.18-chaos5-pristine/include/linux/jbd.h	Sat Jun 29 23:07:57 2002
+++ linux-2.4.18-chaos5/include/linux/jbd.h	Mon Jul  1 08:51:19 2002
@@ -257,6 +257,13 @@
 	return bh->b_private;
 }
 
+#define HAVE_JOURNAL_CALLBACK_STATUS
+struct journal_callback {
+	struct list_head jcb_list;
+	void (*jcb_func)(void *cb_data, int error);
+	/* user data goes here */
+};
+
 struct jbd_revoke_table_s;
 
 /* The handle_t type represents a single atomic update being performed
@@ -287,6 +294,12 @@
 	   operations */
 	int			h_err;
 
+	/* List of application registered callbacks for this handle.
+	 * The function(s) will be called after the transaction that
+	 * this handle is part of has been committed to disk.
+	 */
+	struct list_head	h_jcb;
+
 	/* Flags */
 	unsigned int	h_sync:		1;	/* sync-on-close */
 	unsigned int	h_jdata:	1;	/* force data journaling */
@@ -406,6 +419,10 @@
 
 	/* How many handles used this transaction? */
 	int t_handle_count;
+
+	/* List of registered callback functions for this transaction.
+	 * Called when the transaction is committed. */
+	struct list_head	t_jcb;
 };
 
 
@@ -654,6 +671,8 @@
 extern int	 journal_try_to_free_buffers(journal_t *, struct page *, int);
 extern int	 journal_stop(handle_t *);
 extern int	 journal_flush (journal_t *);
+extern void	 journal_callback_set(handle_t *handle, void (*fn)(void *, int),
+				      void *cb_data);
 
 extern void	 journal_lock_updates (journal_t *);
 extern void	 journal_unlock_updates (journal_t *);
--- linux-2.4.18-chaos5-pristine/kernel/ksyms.c	Sat Jun 29 23:07:57 2002
+++ linux-2.4.18-chaos5/kernel/ksyms.c	Sat Jun 29 23:09:04 2002
@@ -306,6 +306,13 @@
 EXPORT_SYMBOL(lock_may_write);
 EXPORT_SYMBOL(dcache_readdir);
 
+/* lustre */
+EXPORT_SYMBOL(panic_notifier_list);
+EXPORT_SYMBOL(pagecache_lock_cacheline);
+EXPORT_SYMBOL(kmem_cache_validate);
+EXPORT_SYMBOL(do_kern_mount);
+
+
 /* for stackable file systems (lofs, wrapfs, cryptfs, etc.) */
 EXPORT_SYMBOL(default_llseek);
 EXPORT_SYMBOL(dentry_open);
--- linux-2.4.18-chaos5-pristine/include/linux/dcache.h	Sat Jun 29 23:07:57 2002
+++ linux-2.4.18-chaos5/include/linux/dcache.h	Mon Jul  1 08:51:12 2002
@@ -6,6 +6,33 @@
 #include <asm/atomic.h>
 #include <linux/mount.h>
 
+#define IT_OPEN  (1)
+#define IT_CREAT  (1<<1)
+#define IT_MKDIR  (1<<2)
+#define IT_LINK  (1<<3)
+#define IT_SYMLINK  (1<<4)
+#define IT_UNLINK  (1<<5)
+#define IT_RMDIR  (1<<6)
+#define IT_RENAME  (1<<7)
+#define IT_RENAME2  (1<<8)
+#define IT_READDIR  (1<<9)
+#define IT_GETATTR  (1<<10)
+#define IT_SETATTR  (1<<11)
+#define IT_READLINK  (1<<12)
+#define IT_MKNOD  (1<<13)
+#define IT_LOOKUP  (1<<14)
+
+struct lookup_intent { 
+	int it_op;
+	int it_mode;
+	int it_disposition;
+	int it_status; 
+	struct iattr *it_iattr;
+        __u64 it_lock_handle[2];
+        int it_lock_mode;
+	void *it_data;
+};
+
 /*
  * linux/include/linux/dcache.h
  *
@@ -78,6 +105,7 @@
 	unsigned long d_time;		/* used by d_revalidate */
 	struct dentry_operations  *d_op;
 	struct super_block * d_sb;	/* The root of the dentry tree */
+ 	struct lookup_intent *d_it;
 	unsigned long d_vfs_flags;
 	void * d_fsdata;		/* fs-specific data */
 	void * d_extra_attributes;	/* TUX-specific data */
@@ -91,6 +119,8 @@
 	int (*d_delete)(struct dentry *);
 	void (*d_release)(struct dentry *);
 	void (*d_iput)(struct dentry *, struct inode *);
+	int (*d_revalidate2)(struct dentry *, int, struct lookup_intent *);
+ 	void (*d_intent_release)(struct dentry *);
 };
 
 /* the dentry parameter passed to d_hash and d_compare is the parent
--- linux-2.4.18-chaos5-pristine/include/linux/fs.h	Sat Jun 29 23:07:57 2002
+++ linux-2.4.18-chaos5/include/linux/fs.h	Mon Jul  1 08:51:12 2002
@@ -572,6 +572,7 @@
 
 	/* needed for tty driver, and maybe others */
 	void			*private_data;
+	 struct lookup_intent    *f_intent;
 
 	/* preallocated helper kiobuf to speedup O_DIRECT */
 	struct kiobuf		*f_iobuf;
@@ -829,7 +830,9 @@
 extern int vfs_link(struct dentry *, struct inode *, struct dentry *);
 extern int vfs_rmdir(struct inode *, struct dentry *);
 extern int vfs_unlink(struct inode *, struct dentry *);
-extern int vfs_rename(struct inode *, struct dentry *, struct inode *, struct dentry *);
+int vfs_rename(struct inode *old_dir, struct dentry *old_dentry,
+		struct inode *new_dir, struct dentry *new_dentry, 
+		struct lookup_intent *it);
 
 /*
  * File types
@@ -890,6 +893,7 @@
 struct inode_operations {
 	int (*create) (struct inode *,struct dentry *,int);
 	struct dentry * (*lookup) (struct inode *,struct dentry *);
+	 struct dentry * (*lookup2) (struct inode *,struct dentry *, struct lookup_intent *);
 	int (*link) (struct dentry *,struct inode *,struct dentry *);
 	int (*unlink) (struct inode *,struct dentry *);
 	int (*symlink) (struct inode *,struct dentry *,const char *);
@@ -1036,6 +1040,7 @@
 extern struct vfsmount *kern_mount(struct file_system_type *);
 extern int may_umount(struct vfsmount *);
 extern long do_mount(char *, char *, char *, unsigned long, void *);
+struct vfsmount *do_kern_mount(const char *type, int flags, char *name, void *data);
 extern void umount_tree(struct vfsmount *);
 
 #define kern_umount mntput
@@ -1370,6 +1375,7 @@
 extern loff_t default_llseek(struct file *file, loff_t offset, int origin);
 
 extern int FASTCALL(__user_walk(const char *, unsigned, struct nameidata *));
+extern int FASTCALL(__user_walk_it(const char *, unsigned, struct nameidata *, struct lookup_intent *it));
 extern int FASTCALL(path_init(const char *, unsigned, struct nameidata *));
 extern int FASTCALL(path_walk(const char *, struct nameidata *));
 extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));
@@ -1381,6 +1387,8 @@
 extern struct dentry * lookup_hash(struct qstr *, struct dentry *);
 #define user_path_walk(name,nd)	 __user_walk(name, LOOKUP_FOLLOW|LOOKUP_POSITIVE, nd)
 #define user_path_walk_link(name,nd) __user_walk(name, LOOKUP_POSITIVE, nd)
+#define user_path_walk_it(name,nd,it)  __user_walk_it(name, LOOKUP_FOLLOW|LOOKUP_POSITIVE, nd, it)
+#define user_path_walk_link_it(name,nd,it) __user_walk_it(name, LOOKUP_POSITIVE, nd, it)
 
 extern void iput(struct inode *);
 extern void force_delete(struct inode *);
--- linux-2.4.18-chaos5-pristine/fs/nfsd/vfs.c	Sat Jun 29 23:07:56 2002
+++ linux-2.4.18-chaos5/fs/nfsd/vfs.c	Sat Jun 29 23:09:04 2002
@@ -1298,7 +1298,7 @@
 			err = nfserr_perm;
 	} else
 #endif
-	err = vfs_rename(fdir, odentry, tdir, ndentry);
+	err = vfs_rename(fdir, odentry, tdir, ndentry, NULL);
 	unlock_kernel();
 	if (!err && EX_ISSYNC(tfhp->fh_export)) {
 		nfsd_sync_dir(tdentry);
--- linux-2.4.18-chaos5-pristine/fs/namei.c	Sat Jun 29 23:07:56 2002
+++ linux-2.4.18-chaos5/fs/namei.c	Tue Jul  2 16:06:05 2002
@@ -94,6 +94,14 @@
  * XEmacs seems to be relying on it...
  */
 
+void intent_release(struct dentry *de) 
+{
+	if (de->d_op && de->d_op->d_intent_release)
+		de->d_op->d_intent_release(de);
+	de->d_it = NULL;
+}
+
+
 /* In order to reduce some races, while at the same time doing additional
  * checking and hopefully speeding things up, we copy filenames to the
  * kernel data space before using them..
@@ -260,10 +268,18 @@
  * Internal lookup() using the new generic dcache.
  * SMP-safe
  */
-static struct dentry * cached_lookup(struct dentry * parent, struct qstr * name, int flags)
+static struct dentry * cached_lookup(struct dentry * parent, struct qstr * name, int flags, struct lookup_intent *it)
 {
 	struct dentry * dentry = d_lookup(parent, name);
 
+	if (dentry && dentry->d_op && dentry->d_op->d_revalidate2) {
+		if (!dentry->d_op->d_revalidate2(dentry, flags, it) && !d_invalidate(dentry)) {
+			dput(dentry);
+			dentry = NULL;
+		}
+		return dentry; 
+	} else
+
 	if (dentry && dentry->d_op && dentry->d_op->d_revalidate) {
 		if (!dentry->d_op->d_revalidate(dentry, flags) && !d_invalidate(dentry)) {
 			dput(dentry);
@@ -281,7 +297,7 @@
  * make sure that nobody added the entry to the dcache in the meantime..
  * SMP-safe
  */
-static struct dentry * real_lookup(struct dentry * parent, struct qstr * name, int flags)
+static struct dentry * real_lookup(struct dentry * parent, struct qstr * name, int flags, struct lookup_intent *it)
 {
 	struct dentry * result;
 	struct inode *dir = parent->d_inode;
@@ -300,6 +316,9 @@
 		result = ERR_PTR(-ENOMEM);
 		if (dentry) {
 			lock_kernel();
+			if (dir->i_op->lookup2) 
+				result = dir->i_op->lookup2(dir, dentry, it);
+			else 
 			result = dir->i_op->lookup(dir, dentry);
 			unlock_kernel();
 			if (result)
@@ -322,6 +341,12 @@
 			result = ERR_PTR(-ENOENT);
 		}
 	}
+	else if (result->d_op && result->d_op->d_revalidate2) {
+		if (!result->d_op->d_revalidate2(result, flags, it) && !d_invalidate(result)) {
+			dput(result);
+			result = ERR_PTR(-ENOENT);
+		}
+	}
 	return result;
 }
 
@@ -447,7 +472,7 @@
  *
  * We expect 'base' to be positive and a directory.
  */
-int link_path_walk(const char * name, struct nameidata *nd)
+int link_path_walk_it(const char * name, struct nameidata *nd, struct lookup_intent *it)
 {
 	struct dentry *dentry;
 	struct inode *inode;
@@ -524,12 +549,12 @@
 				break;
 		}
 		/* This does the actual lookups.. */
-		dentry = cached_lookup(nd->dentry, &this, LOOKUP_CONTINUE);
+		dentry = cached_lookup(nd->dentry, &this, LOOKUP_CONTINUE, it);
 		if (!dentry) {
 			err = -EWOULDBLOCKIO;
 			if (atomic)
 				break;
-			dentry = real_lookup(nd->dentry, &this, LOOKUP_CONTINUE);
+			dentry = real_lookup(nd->dentry, &this, LOOKUP_CONTINUE, it);
 			err = PTR_ERR(dentry);
 			if (IS_ERR(dentry))
 				break;
@@ -563,7 +588,7 @@
 			nd->dentry = dentry;
 		}
 		err = -ENOTDIR; 
-		if (!inode->i_op->lookup)
+		if (!inode->i_op->lookup && !inode->i_op->lookup2)
 			break;
 		continue;
 		/* here ends the main loop */
@@ -590,12 +615,12 @@
 			if (err < 0)
 				break;
 		}
-		dentry = cached_lookup(nd->dentry, &this, 0);
+		dentry = cached_lookup(nd->dentry, &this, 0, it);
 		if (!dentry) {
 			err = -EWOULDBLOCKIO;
 			if (atomic)
 				break;
-			dentry = real_lookup(nd->dentry, &this, 0);
+			dentry = real_lookup(nd->dentry, &this, 0, it);
 			err = PTR_ERR(dentry);
 			if (IS_ERR(dentry))
 				break;
@@ -619,7 +644,8 @@
 			goto no_inode;
 		if (lookup_flags & LOOKUP_DIRECTORY) {
 			err = -ENOTDIR; 
-			if (!inode->i_op || !inode->i_op->lookup)
+			if (!inode->i_op || (!inode->i_op->lookup && 
+					     !inode->i_op->lookup2))
 				break;
 		}
 		goto return_base;
@@ -651,6 +677,7 @@
 			}
 		}
 return_base:
+                nd->dentry->d_it = it;
 		return 0;
 out_dput:
 		dput(dentry);
@@ -658,15 +685,29 @@
 	}
 	path_release(nd);
 return_err:
+        if (!err)
+                nd->dentry->d_it = it;
 	return err;
 }
 
+int link_path_walk(const char * name, struct nameidata *nd)
+{
+	return link_path_walk_it(name, nd, NULL);
+}
+
+int path_walk_it(const char * name, struct nameidata *nd, struct lookup_intent *it)
+{
+	current->total_link_count = 0;
+	return link_path_walk_it(name, nd, it);
+}
+
 int path_walk(const char * name, struct nameidata *nd)
 {
 	current->total_link_count = 0;
-	return link_path_walk(name, nd);
+	return link_path_walk_it(name, nd, NULL);
 }
 
+
 /* SMP-safe */
 /* returns 1 if everything is done */
 static int __emul_lookup_dentry(const char *name, struct nameidata *nd)
@@ -749,6 +790,17 @@
 }
 
 /* SMP-safe */
+int path_lookup_it(const char *path, unsigned flags, struct nameidata *nd, 
+		struct lookup_intent *it)
+{
+	int error = 0;
+	if (path_init(path, flags, nd))
+		error = path_walk_it(path, nd, it);
+	return error;
+}
+
+
+/* SMP-safe */
 int path_lookup(const char *path, unsigned flags, struct nameidata *nd)
 {
 	int error = 0;
@@ -777,7 +829,8 @@
  * needs parent already locked. Doesn't follow mounts.
  * SMP-safe.
  */
-struct dentry * lookup_hash(struct qstr *name, struct dentry * base)
+struct dentry * lookup_hash_it(struct qstr *name, struct dentry * base, 
+			    struct lookup_intent *it)
 {
 	struct dentry * dentry;
 	struct inode *inode;
@@ -800,13 +853,16 @@
 			goto out;
 	}
 
-	dentry = cached_lookup(base, name, 0);
+	dentry = cached_lookup(base, name, 0, it);
 	if (!dentry) {
 		struct dentry *new = d_alloc(base, name);
 		dentry = ERR_PTR(-ENOMEM);
 		if (!new)
 			goto out;
 		lock_kernel();
+		if (inode->i_op->lookup2) 
+			dentry = inode->i_op->lookup2(inode, new, it);
+		else 
 		dentry = inode->i_op->lookup(inode, new);
 		unlock_kernel();
 		if (!dentry)
@@ -818,6 +874,12 @@
 	return dentry;
 }
 
+struct dentry * lookup_hash(struct qstr *name, struct dentry * base)
+{
+	return lookup_hash_it(name, base, NULL);
+}
+
+
 /* SMP-safe */
 struct dentry * lookup_one_len(const char * name, struct dentry * base, int len)
 {
@@ -839,7 +901,7 @@
 	}
 	this.hash = end_name_hash(hash);
 
-	return lookup_hash(&this, base);
+	return lookup_hash_it(&this, base, NULL);
 access:
 	return ERR_PTR(-EACCES);
 }
@@ -870,6 +932,22 @@
 	return err;
 }
 
+int __user_walk_it(const char *name, unsigned flags, struct nameidata *nd, struct lookup_intent *it)
+{
+	char *tmp;
+	int err;
+
+	tmp = getname(name);
+	err = PTR_ERR(tmp);
+	if (!IS_ERR(tmp)) {
+		err = 0;
+		if (path_init(tmp, flags, nd))
+			err = path_walk_it(tmp, nd, it);
+		putname(tmp);
+	}
+	return err;
+}
+
 /*
  * It's inline, so penalty for filesystems that don't use sticky bit is
  * minimal.
@@ -1008,7 +1086,8 @@
  * for symlinks (where the permissions are checked later).
  * SMP-safe
  */
-int open_namei(const char * pathname, int flag, int mode, struct nameidata *nd)
+int open_namei_it(const char * pathname, int flag, int mode, struct nameidata *nd, 
+		struct lookup_intent *it)
 {
 	int acc_mode, error = 0;
 	struct inode *inode;
@@ -1022,16 +1101,19 @@
 	 * The simplest case - just a plain lookup.
 	 */
 	if (!(flag & O_CREAT)) {
-		error = path_lookup(pathname, lookup_flags(flag), nd);
+		error = path_lookup_it(pathname, lookup_flags(flag), nd, it);
 		if (error)
 			return error;
 		dentry = nd->dentry;
+		dentry->d_it = it;
 		goto ok;
 	}
 
 	/*
 	 * Create - we need to know the parent.
 	 */
+	if (it) 
+	        it->it_op |= IT_CREAT;
 	error = path_lookup(pathname, LOOKUP_PARENT, nd);
 	if (error)
 		return error;
@@ -1047,7 +1129,7 @@
 
 	dir = nd->dentry;
 	down(&dir->d_inode->i_sem);
-	dentry = lookup_hash(&nd->last, nd->dentry);
+	dentry = lookup_hash_it(&nd->last, nd->dentry, it);
 
 do_last:
 	error = PTR_ERR(dentry);
@@ -1056,6 +1138,7 @@
 		goto exit;
 	}
 
+        dentry->d_it = it;
 	/* Negative dentry, just create the file */
 	if (!dentry->d_inode) {
 		error = vfs_create(dir->d_inode, dentry,
@@ -1172,9 +1255,11 @@
 		if (flag & FMODE_WRITE)
 			DQUOT_INIT(inode);
 
+        intent_release(dentry);
 	return 0;
 
 exit_dput:
+        intent_release(dentry);
 	dput(dentry);
 exit:
 	path_release(nd);
@@ -1217,13 +1302,20 @@
 	}
 	dir = nd->dentry;
 	down(&dir->d_inode->i_sem);
-	dentry = lookup_hash(&nd->last, nd->dentry);
+	dentry = lookup_hash_it(&nd->last, nd->dentry, NULL);
 	putname(nd->last.name);
 	goto do_last;
 }
 
+int open_namei(const char * pathname, int flag, int mode, struct nameidata *nd)
+{
+	return open_namei_it(pathname, flag, mode, nd, NULL); 
+}
+
+
 /* SMP-safe */
-static struct dentry *lookup_create(struct nameidata *nd, int is_dir)
+static struct dentry *lookup_create(struct nameidata *nd, int is_dir, 
+				    struct lookup_intent *it)
 {
 	struct dentry *dentry;
 
@@ -1231,7 +1323,7 @@
 	dentry = ERR_PTR(-EEXIST);
 	if (nd->last_type != LAST_NORM)
 		goto fail;
-	dentry = lookup_hash(&nd->last, nd->dentry);
+	dentry = lookup_hash_it(&nd->last, nd->dentry, it);
 	if (IS_ERR(dentry))
 		goto fail;
 	if (!is_dir && nd->last.name[nd->last.len] && !dentry->d_inode)
@@ -1277,6 +1369,7 @@
 	char * tmp;
 	struct dentry * dentry;
 	struct nameidata nd;
+	struct lookup_intent it = { IT_MKNOD , mode };
 
 	if (S_ISDIR(mode))
 		return -EPERM;
@@ -1287,11 +1380,12 @@
 	error = path_lookup(tmp, LOOKUP_PARENT, &nd);
 	if (error)
 		goto out;
-	dentry = lookup_create(&nd, 0);
+	dentry = lookup_create(&nd, 0, &it);
 	error = PTR_ERR(dentry);
 
 	mode &= ~current->fs->umask;
 	if (!IS_ERR(dentry)) {
+		dentry->d_it = &it;
 		switch (mode & S_IFMT) {
 		case 0: case S_IFREG:
 			error = vfs_create(nd.dentry->d_inode,dentry,mode);
@@ -1305,6 +1399,7 @@
 		default:
 			error = -EINVAL;
 		}
+                intent_release(dentry); 
 		dput(dentry);
 	}
 	up(&nd.dentry->d_inode->i_sem);
@@ -1345,6 +1440,7 @@
 {
 	int error = 0;
 	char * tmp;
+	struct lookup_intent it = { IT_MKDIR, mode };
 
 	tmp = getname(pathname);
 	error = PTR_ERR(tmp);
@@ -1355,11 +1451,13 @@
 		error = path_lookup(tmp, LOOKUP_PARENT, &nd);
 		if (error)
 			goto out;
-		dentry = lookup_create(&nd, 1);
+		dentry = lookup_create(&nd, 1, &it);
 		error = PTR_ERR(dentry);
 		if (!IS_ERR(dentry)) {
+			dentry->d_it = &it;
 			error = vfs_mkdir(nd.dentry->d_inode, dentry,
 					  mode & ~current->fs->umask);
+                        intent_release(dentry); 
 			dput(dentry);
 		}
 		up(&nd.dentry->d_inode->i_sem);
@@ -1439,6 +1537,7 @@
 	char * name;
 	struct dentry *dentry;
 	struct nameidata nd;
+	struct lookup_intent it = { IT_RMDIR, 0 };
 
 	name = getname(pathname);
 	if(IS_ERR(name))
@@ -1460,10 +1559,12 @@
 			goto exit1;
 	}
 	down(&nd.dentry->d_inode->i_sem);
-	dentry = lookup_hash(&nd.last, nd.dentry);
+	dentry = lookup_hash_it(&nd.last, nd.dentry, &it);
 	error = PTR_ERR(dentry);
 	if (!IS_ERR(dentry)) {
+		dentry->d_it = &it; 
 		error = vfs_rmdir(nd.dentry->d_inode, dentry);
+		intent_release(dentry); 
 		dput(dentry);
 	}
 	up(&nd.dentry->d_inode->i_sem);
@@ -1507,6 +1608,7 @@
 	char * name;
 	struct dentry *dentry;
 	struct nameidata nd;
+	struct lookup_intent it = { IT_UNLINK, 0 };
 
 	name = getname(pathname);
 	if(IS_ERR(name))
@@ -1519,14 +1621,16 @@
 	if (nd.last_type != LAST_NORM)
 		goto exit1;
 	down(&nd.dentry->d_inode->i_sem);
-	dentry = lookup_hash(&nd.last, nd.dentry);
+	dentry = lookup_hash_it(&nd.last, nd.dentry, &it);
 	error = PTR_ERR(dentry);
 	if (!IS_ERR(dentry)) {
+		dentry->d_it = &it;
 		/* Why not before? Because we want correct error value */
 		if (nd.last.name[nd.last.len])
 			goto slashes;
 		error = vfs_unlink(nd.dentry->d_inode, dentry);
 	exit2:
+		intent_release(dentry); 
 		dput(dentry);
 	}
 	up(&nd.dentry->d_inode->i_sem);
@@ -1573,6 +1677,7 @@
 	int error = 0;
 	char * from;
 	char * to;
+	struct lookup_intent it = { IT_SYMLINK, 0 };
 
 	from = getname(oldname);
 	if(IS_ERR(from))
@@ -1586,11 +1691,13 @@
 		error = path_lookup(to, LOOKUP_PARENT, &nd);
 		if (error)
 			goto out;
-		dentry = lookup_create(&nd, 0);
+		dentry = lookup_create(&nd, 0, &it);
 		error = PTR_ERR(dentry);
 		if (!IS_ERR(dentry)) {
+			dentry->d_it = &it;
 			error = vfs_symlink(nd.dentry->d_inode, dentry, from);
-			dput(dentry);
+                        intent_release(dentry); 
+                        dput(dentry);
 		}
 		up(&nd.dentry->d_inode->i_sem);
 		path_release(&nd);
@@ -1654,6 +1761,7 @@
 {
 	int error;
 	char * to;
+	struct lookup_intent it = { IT_LINK, 0 };
 
 	to = getname(newname);
 	error = PTR_ERR(to);
@@ -1670,10 +1778,12 @@
 		error = -EXDEV;
 		if (old_nd.mnt != nd.mnt)
 			goto out_release;
-		new_dentry = lookup_create(&nd, 0);
+		new_dentry = lookup_create(&nd, 0, &it);
 		error = PTR_ERR(new_dentry);
 		if (!IS_ERR(new_dentry)) {
+			new_dentry->d_it = &it;
 			error = vfs_link(old_nd.dentry, nd.dentry->d_inode, new_dentry);
+			intent_release(new_dentry);
 			dput(new_dentry);
 		}
 		up(&nd.dentry->d_inode->i_sem);
@@ -1714,7 +1824,8 @@
  *	   locking].
  */
 int vfs_rename_dir(struct inode *old_dir, struct dentry *old_dentry,
-	       struct inode *new_dir, struct dentry *new_dentry)
+	       struct inode *new_dir, struct dentry *new_dentry,
+	       struct lookup_intent *it)
 {
 	int error;
 	struct inode *target;
@@ -1768,10 +1879,12 @@
 	} else
 		double_down(&old_dir->i_zombie,
 			    &new_dir->i_zombie);
+	new_dentry->d_it = it;
 	if (d_mountpoint(old_dentry)||d_mountpoint(new_dentry))
 		error = -EBUSY;
 	else 
 		error = old_dir->i_op->rename(old_dir, old_dentry, new_dir, new_dentry);
+	intent_release(new_dentry);
 	if (target) {
 		if (!error)
 			target->i_flags |= S_DEAD;
@@ -1793,7 +1906,8 @@
 }
 
 int vfs_rename_other(struct inode *old_dir, struct dentry *old_dentry,
-	       struct inode *new_dir, struct dentry *new_dentry)
+	       struct inode *new_dir, struct dentry *new_dentry,
+	       struct lookup_intent *it)
 {
 	int error;
 
@@ -1820,10 +1934,12 @@
 	DQUOT_INIT(old_dir);
 	DQUOT_INIT(new_dir);
 	double_down(&old_dir->i_zombie, &new_dir->i_zombie);
+	new_dentry->d_it = it;
 	if (d_mountpoint(old_dentry)||d_mountpoint(new_dentry))
 		error = -EBUSY;
 	else
 		error = old_dir->i_op->rename(old_dir, old_dentry, new_dir, new_dentry);
+	intent_release(new_dentry);
 	double_up(&old_dir->i_zombie, &new_dir->i_zombie);
 	if (error)
 		return error;
@@ -1835,13 +1951,14 @@
 }
 
 int vfs_rename(struct inode *old_dir, struct dentry *old_dentry,
-	       struct inode *new_dir, struct dentry *new_dentry)
+	       struct inode *new_dir, struct dentry *new_dentry,
+	       struct lookup_intent *it)
 {
 	int error;
 	if (S_ISDIR(old_dentry->d_inode->i_mode))
-		error = vfs_rename_dir(old_dir,old_dentry,new_dir,new_dentry);
+		error = vfs_rename_dir(old_dir,old_dentry,new_dir,new_dentry,it);
 	else
-		error = vfs_rename_other(old_dir,old_dentry,new_dir,new_dentry);
+		error = vfs_rename_other(old_dir,old_dentry,new_dir,new_dentry,it);
 	if (!error) {
 		if (old_dir == new_dir)
 			inode_dir_notify(old_dir, DN_RENAME);
@@ -1858,6 +1975,7 @@
 	int error = 0;
 	struct dentry * old_dir, * new_dir;
 	struct dentry * old_dentry, *new_dentry;
+	struct lookup_intent it = {IT_RENAME, 0};
 	struct nameidata oldnd, newnd;
 
 	error = path_lookup(oldname, LOOKUP_PARENT, &oldnd);
@@ -1883,7 +2001,7 @@
 
 	double_lock(new_dir, old_dir);
 
-	old_dentry = lookup_hash(&oldnd.last, old_dir);
+	old_dentry = lookup_hash_it(&oldnd.last, old_dir, &it);
 	error = PTR_ERR(old_dentry);
 	if (IS_ERR(old_dentry))
 		goto exit3;
@@ -1899,14 +2019,15 @@
 		if (newnd.last.name[newnd.last.len])
 			goto exit4;
 	}
-	new_dentry = lookup_hash(&newnd.last, new_dir);
+	it.it_op = IT_RENAME2;
+        new_dentry = lookup_hash_it(&newnd.last, new_dir, &it);
 	error = PTR_ERR(new_dentry);
 	if (IS_ERR(new_dentry))
 		goto exit4;
 
 	lock_kernel();
 	error = vfs_rename(old_dir->d_inode, old_dentry,
-				   new_dir->d_inode, new_dentry);
+				   new_dir->d_inode, new_dentry, &it);
 	unlock_kernel();
 
 	dput(new_dentry);
--- linux-2.4.18-chaos5-pristine/fs/open.c	Sat Jun 29 23:07:56 2002
+++ linux-2.4.18-chaos5/fs/open.c	Sat Jun 29 23:09:04 2002
@@ -19,6 +19,8 @@
 #include <asm/uaccess.h>
 
 #define special_file(m) (S_ISCHR(m)||S_ISBLK(m)||S_ISFIFO(m)||S_ISSOCK(m))
+extern int path_walk_it(const char * name, struct nameidata *nd, struct lookup_intent *it);
+extern void intent_release(struct dentry *de);
 
 int vfs_statfs(struct super_block *sb, struct statfs *buf)
 {
@@ -118,14 +120,19 @@
 	struct nameidata nd;
 	struct inode * inode;
 	int error;
+	struct lookup_intent it;
+	
+	it.it_op = IT_SETATTR;
+
 
 	error = -EINVAL;
 	if (length < 0)	/* sorry, but loff_t says... */
 		goto out;
 
-	error = user_path_walk(path, &nd);
+	error = user_path_walk_it(path, &nd, &it);
 	if (error)
 		goto out;
+	nd.dentry->d_it = &it;
 	inode = nd.dentry->d_inode;
 
 	/* For directories it's -EISDIR, for other non-regulars - -EINVAL */
@@ -168,6 +175,7 @@
 	put_write_access(inode);
 
 dput_and_out:
+	intent_release(nd.dentry);
 	path_release(&nd);
 out:
 	return error;
@@ -259,10 +267,14 @@
 	struct nameidata nd;
 	struct inode * inode;
 	struct iattr newattrs;
+	struct lookup_intent it;
 
-	error = user_path_walk(filename, &nd);
+	it.it_op = IT_SETATTR;
+
+	error = user_path_walk_it(filename, &nd, &it);
 	if (error)
 		goto out;
+	nd.dentry->d_it = &it;
 	inode = nd.dentry->d_inode;
 
 	error = -EROFS;
@@ -286,6 +298,7 @@
 	}
 	error = notify_change(nd.dentry, &newattrs);
 dput_and_out:
+	intent_release(nd.dentry);
 	path_release(&nd);
 out:
 	return error;
@@ -303,11 +316,15 @@
 	struct nameidata nd;
 	struct inode * inode;
 	struct iattr newattrs;
+	struct lookup_intent it;
+	
+	it.it_op = IT_SETATTR;
 
-	error = user_path_walk(filename, &nd);
+	error = user_path_walk_it(filename, &nd, &it);
 
 	if (error)
 		goto out;
+	nd.dentry->d_it = &it;
 	inode = nd.dentry->d_inode;
 
 	error = -EROFS;
@@ -330,6 +347,7 @@
 	}
 	error = notify_change(nd.dentry, &newattrs);
 dput_and_out:
+	intent_release(nd.dentry);
 	path_release(&nd);
 out:
 	return error;
@@ -346,6 +364,9 @@
 	int old_fsuid, old_fsgid;
 	kernel_cap_t old_cap;
 	int res;
+	struct lookup_intent it;
+	
+	it.it_op = IT_GETATTR;
 
 	if (mode & ~S_IRWXO)	/* where's F_OK, X_OK, W_OK, R_OK? */
 		return -EINVAL;
@@ -363,13 +384,14 @@
 	else
 		current->cap_effective = current->cap_permitted;
 
-	res = user_path_walk(filename, &nd);
+	res = user_path_walk_it(filename, &nd, &it);
 	if (!res) {
 		res = permission(nd.dentry->d_inode, mode);
 		/* SuS v2 requires we report a read only fs too */
 		if(!res && (mode & S_IWOTH) && IS_RDONLY(nd.dentry->d_inode)
 		   && !special_file(nd.dentry->d_inode->i_mode))
 			res = -EROFS;
+                intent_release(nd.dentry);
 		path_release(&nd);
 	}
 
@@ -384,11 +406,13 @@
 {
 	int error;
 	struct nameidata nd;
-
-	error = __user_walk(filename,LOOKUP_POSITIVE|LOOKUP_FOLLOW|LOOKUP_DIRECTORY,&nd);
+        struct lookup_intent it = {IT_GETATTR};
+	
+	error = __user_walk_it(filename,LOOKUP_POSITIVE|LOOKUP_FOLLOW|LOOKUP_DIRECTORY,&nd, &it);
 	if (error)
 		goto out;
 
+	nd.dentry->d_it = &it;
 	error = permission(nd.dentry->d_inode,MAY_EXEC);
 	if (error)
 		goto dput_and_out;
@@ -396,6 +420,7 @@
 	set_fs_pwd(current->fs, nd.mnt, nd.dentry);
 
 dput_and_out:
+	intent_release(nd.dentry);
 	path_release(&nd);
 out:
 	return error;
@@ -435,12 +460,14 @@
 {
 	int error;
 	struct nameidata nd;
+	struct lookup_intent it = {IT_GETATTR};
 
-	error = __user_walk(filename, LOOKUP_POSITIVE | LOOKUP_FOLLOW |
-		      LOOKUP_DIRECTORY | LOOKUP_NOALT, &nd);
+	error = __user_walk_it(filename, LOOKUP_POSITIVE | LOOKUP_FOLLOW |
+		      LOOKUP_DIRECTORY | LOOKUP_NOALT, &nd, &it);
 	if (error)
 		goto out;
 
+	nd.dentry->d_it = &it;
 	error = permission(nd.dentry->d_inode,MAY_EXEC);
 	if (error)
 		goto dput_and_out;
@@ -453,6 +480,7 @@
 	set_fs_altroot();
 	error = 0;
 dput_and_out:
+	intent_release(nd.dentry);
 	path_release(&nd);
 out:
 	return error;
@@ -497,12 +525,15 @@
 	struct inode * inode;
 	int error;
 	struct iattr newattrs;
+	struct lookup_intent it;
 
-	error = user_path_walk(filename, &nd);
+	it.it_op = IT_SETATTR;
+	error = user_path_walk_it(filename, &nd, &it);
 	if (error)
 		goto out;
 	inode = nd.dentry->d_inode;
 
+	nd.dentry->d_it = &it;
 	error = -EROFS;
 	if (IS_RDONLY(inode))
 		goto dput_and_out;
@@ -518,6 +549,7 @@
 	error = notify_change(nd.dentry, &newattrs);
 
 dput_and_out:
+	intent_release(nd.dentry);
 	path_release(&nd);
 out:
 	return error;
@@ -587,10 +619,15 @@
 {
 	struct nameidata nd;
 	int error;
+	struct lookup_intent it;
+	
+	it.it_op = IT_SETATTR;
 
-	error = user_path_walk(filename, &nd);
+	error = user_path_walk_it(filename, &nd, &it);
 	if (!error) {
+		nd.dentry->d_it = &it;
 		error = chown_common(nd.dentry, user, group);
+		intent_release(nd.dentry);
 		path_release(&nd);
 	}
 	return error;
@@ -600,10 +637,15 @@
 {
 	struct nameidata nd;
 	int error;
+	struct lookup_intent it;
 
-	error = user_path_walk_link(filename, &nd);
+	it.it_op = IT_SETATTR;
+
+	error = user_path_walk_link_it(filename, &nd, &it);
 	if (!error) {
+		nd.dentry->d_it = &it;
 		error = chown_common(nd.dentry, user, group);
+		intent_release(nd.dentry);
 		path_release(&nd);
 	}
 	return error;
@@ -637,10 +679,15 @@
  * for the internal routines (ie open_namei()/follow_link() etc). 00 is
  * used by symlinks.
  */
+extern int open_namei_it(const char *filename, int namei_flags, int mode, 
+			 struct nameidata *nd, struct lookup_intent *it);
+struct file *dentry_open_it(struct dentry *dentry, struct vfsmount *mnt, int flags, struct lookup_intent *it);
+
 struct file *filp_open(const char * filename, int flags, int mode)
 {
 	int namei_flags, error;
 	struct nameidata nd;
+	struct lookup_intent it = {IT_OPEN, 0};
 
 	namei_flags = flags;
 	if ((namei_flags+1) & O_ACCMODE)
@@ -648,14 +695,14 @@
 	if (namei_flags & O_TRUNC)
 		namei_flags |= 2;
 
-	error = open_namei(filename, namei_flags, mode, &nd);
+	error = open_namei_it(filename, namei_flags, mode, &nd, &it);
 	if (!error)
-		return dentry_open(nd.dentry, nd.mnt, flags);
+		return dentry_open_it(nd.dentry, nd.mnt, flags, &it);
 
 	return ERR_PTR(error);
 }
 
-struct file *dentry_open(struct dentry *dentry, struct vfsmount *mnt, int flags)
+struct file *dentry_open_it(struct dentry *dentry, struct vfsmount *mnt, int flags, struct lookup_intent *it)
 {
 	struct file * f;
 	struct inode *inode;
@@ -712,11 +759,19 @@
 cleanup_file:
 	put_filp(f);
 cleanup_dentry:
+        intent_release(dentry);
 	dput(dentry);
 	mntput(mnt);
 	return ERR_PTR(error);
 }
 
+struct file *dentry_open(struct dentry *dentry, struct vfsmount *mnt, int flags)
+{
+	return dentry_open_it(dentry, mnt, flags, NULL);
+
+}
+
+
 /*
  * Find an empty file descriptor entry, and mark it busy.
  */
--- linux-2.4.18-chaos5-pristine/fs/stat.c	Sat Jun 29 23:07:56 2002
+++ linux-2.4.18-chaos5/fs/stat.c	Mon Jul  1 08:54:45 2002
@@ -13,6 +13,8 @@
 
 #include <asm/uaccess.h>
 
+
+extern void intent_release(struct dentry *de);
 /*
  * Revalidate the inode. This is required for proper NFS attribute caching.
  */
@@ -104,10 +106,12 @@
 {
 	struct nameidata nd;
 	int error;
+ 	struct lookup_intent it = { IT_GETATTR};
 
-	error = user_path_walk(name, &nd);
+	error = user_path_walk_it(name, &nd, &it);
 	if (!error) {
 		error = do_getattr(nd.mnt, nd.dentry, stat);
+		intent_release(nd.dentry);
 		path_release(&nd);
 	}
 	return error;
@@ -117,10 +121,13 @@
 {
 	struct nameidata nd;
 	int error;
+ 	struct lookup_intent it = { IT_GETATTR};
+
 
-	error = user_path_walk_link(name, &nd);
+	error = user_path_walk_link_it(name, &nd, &it);
 	if (!error) {
 		error = do_getattr(nd.mnt, nd.dentry, stat);
+		intent_release(nd.dentry);
 		path_release(&nd);
 	}
 	return error;
--- linux-2.4.18-chaos5-pristine/mm/slab.c	Sat Jun 29 23:07:57 2002
+++ linux-2.4.18-chaos5/mm/slab.c	Sat Jun 29 23:09:04 2002
@@ -1207,6 +1207,60 @@
  * Called with the cache-lock held.
  */
 
+extern struct page *check_get_page(unsigned long kaddr);
+struct page *page_mem_map(struct page *page);
+static int kmem_check_cache_obj (kmem_cache_t * cachep,
+                                 slab_t *slabp, void * objp)
+{
+	int i;
+	unsigned int objnr;
+#if DEBUG
+	if (cachep->flags & SLAB_RED_ZONE) {
+		objp -= BYTES_PER_WORD;
+		if ( *(unsigned long *)objp != RED_MAGIC2)
+			/* Either write before start, or a double free. */
+                        return 0;
+		if (*(unsigned long *)(objp+cachep->objsize -
+				BYTES_PER_WORD) != RED_MAGIC2)
+			/* Either write past end, or a double free. */
+                        return 0;
+	}
+#endif
+
+        objnr = (objp-slabp->s_mem)/cachep->objsize;
+	if (objnr >= cachep->num)
+                return 0;
+	if (objp != slabp->s_mem + objnr*cachep->objsize)
+                return 0;
+
+	/* Check slab's freelist to see if this obj is there. */
+	for (i = slabp->free; i != BUFCTL_END; i = slab_bufctl(slabp)[i]) {
+		if (i == objnr)
+                        return 0;
+	}
+	return 1;
+}
+
+
+int kmem_cache_validate(kmem_cache_t *cachep, void *objp)
+{
+        struct page *page = check_get_page((unsigned long)objp); 
+
+        if (!VALID_PAGE(page)) {
+                return 0;
+        }
+
+        if (!PageSlab(page)) {
+                return 0;
+        }
+
+        /* XXX check for freed slab objects ? */ 
+        if (!kmem_check_cache_obj(cachep, GET_PAGE_SLAB(page), objp)) 
+                return 0;
+
+        return (cachep == GET_PAGE_CACHE(page));
+}
+
 #if DEBUG
 static int kmem_extra_free_checks (kmem_cache_t * cachep,
 			slab_t *slabp, void * objp)
--- linux-2.4.18-chaos5-pristine/arch/i386/mm/init.c	Sat Jun 29 23:07:34 2002
+++ linux-2.4.18-chaos5/arch/i386/mm/init.c	Sat Jun 29 23:09:04 2002
@@ -43,6 +43,14 @@
 static unsigned long totalram_pages;
 static unsigned long totalhigh_pages;
 
+
+struct page *check_get_page(unsigned long kaddr)
+{
+#warning FIXME: Lustre team, is this solid enough?
+        return virt_to_page(kaddr);
+}
+
+
 int do_check_pgt_cache(int low, int high)
 {
 	int freed = 0;
--- linux-2.4.18-chaos5-pristine/include/linux/slab.h	Sat Jun 29 23:07:57 2002
+++ linux-2.4.18-chaos5/include/linux/slab.h	Mon Jul  1 08:51:12 2002
@@ -57,6 +57,7 @@
 extern int kmem_cache_shrink(kmem_cache_t *);
 extern void *kmem_cache_alloc(kmem_cache_t *, int);
 extern void kmem_cache_free(kmem_cache_t *, void *);
+extern int kmem_cache_validate(kmem_cache_t *cachep, void *objp);
 
 extern void *kmalloc(size_t, int);
 extern void kfree(const void *);
--- linux-2.4.18-chaos5-pristine/scripts/mkspec	Sat Jun 29 23:07:58 2002
+++ linux-2.4.18-chaos5/scripts/mkspec	Sat Jun 29 23:09:04 2002
@@ -64,6 +64,7 @@
 fi
 # Back on track, again
 echo 'cp System.map $RPM_BUILD_ROOT'"/boot/System.map-$VERSION.$PATCHLEVEL.$SUBLEVEL$EXTRAVERSION"
+echo 'cp vmlinux $RPM_BUILD_ROOT'"/boot/vmlinux-$VERSION.$PATCHLEVEL.$SUBLEVEL$EXTRAVERSION"
 echo 'cp .config $RPM_BUILD_ROOT'"/boot/config-$VERSION.$PATCHLEVEL.$SUBLEVEL$EXTRAVERSION"
 echo ""
 echo "%clean"
