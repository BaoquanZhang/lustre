--- linux-2.4.17/kernel/ksyms.c.lustre	Fri Feb 22 15:26:38 2002
+++ linux-2.4.17/kernel/ksyms.c	Fri Feb 22 15:27:44 2002
@@ -282,6 +282,11 @@
 EXPORT_SYMBOL(lock_may_write);
 EXPORT_SYMBOL(dcache_readdir);
 
+/* lustre */
+EXPORT_SYMBOL(pagecache_lock);
+EXPORT_SYMBOL(do_kern_mount);
+
+
 /* for stackable file systems (lofs, wrapfs, cryptfs, etc.) */
 EXPORT_SYMBOL(default_llseek);
 EXPORT_SYMBOL(dentry_open);
--- linux-2.4.17/include/linux/fs.h.lustre	Fri Feb 22 15:27:53 2002
+++ linux-2.4.17/include/linux/fs.h	Fri Feb 22 15:28:52 2002
@@ -983,7 +984,7 @@
 extern struct vfsmount *kern_mount(struct file_system_type *);
 extern int may_umount(struct vfsmount *);
 extern long do_mount(char *, char *, char *, unsigned long, void *);
-
+struct vfsmount *do_kern_mount(char *type, int flags, char *name, void *data);
 #define kern_umount mntput
 
 extern int vfs_statfs(struct super_block *, struct statfs *);
--- linux-2.4.17/fs/ext3/Makefile.orig	Fri Dec 21 10:41:55 2001
+++ linux-2.4.17/fs/ext3/Makefile	Fri Mar 22 11:00:58 2002
@@ -8,6 +8,8 @@
 # Note 2! The CFLAGS definitions are now in the main makefile...
 
 O_TARGET := ext3.o
+
+export-objs :=	super.o
 
 obj-y    := balloc.o bitmap.o dir.o file.o fsync.o ialloc.o inode.o \
		ioctl.o namei.o super.o symlink.o
--- linux-2.4.17/fs/ext3/super.c.orig	Fri Dec 21 10:41:55 2001
+++ linux-2.4.17/fs/ext3/super.c	Fri Mar 22 11:00:41 2002
@@ -1742,7 +1742,7 @@
 	unregister_filesystem(&ext3_fs_type);
 }
 
-EXPORT_NO_SYMBOLS;
+EXPORT_SYMBOL(ext3_bread);
 
 MODULE_AUTHOR("Remy Card, Stephen Tweedie, Andrew Morton, Andreas Dilger, Theodore Ts'o and others");
 MODULE_DESCRIPTION("Second Extended Filesystem with journaling extensions");
--- lum/include/linux/blkdev.h.orig	Thu Mar 28 11:40:24 2002
+++ lum/include/linux/blkdev.h	Thu Mar 28 23:38:46 2002
@@ -228,4 +228,8 @@
 	return retval;
 }
 
+#define CONFIG_DEV_RDONLY
+void dev_set_rdonly(kdev_t, int);
+int dev_check_rdonly(kdev_t);
+void dev_clear_rdonly(int);
 #endif
--- lum/drivers/block/blkpg.c.orig	Sun Nov 11 11:20:21 2001
+++ lum/drivers/block/blkpg.c	Thu Mar 28 16:30:41 2002
@@ -294,3 +294,38 @@
 }
 
 EXPORT_SYMBOL(blk_ioctl);
+
+#define NUM_DEV_NO_WRITE 16
+static int dev_no_write[NUM_DEV_NO_WRITE];
+
+/*
+ * Debug code for turning block devices "read-only" (will discard writes
+ * silently).  This is for filesystem crash/recovery testing.
+ */
+void dev_set_rdonly(kdev_t dev, int no_write)
+{
+	if (dev) {
+		printk(KERN_WARNING "Turning device %s read-only\n", 
+		       bdevname(dev));
+		dev_no_write[no_write] = 0xdead0000 + dev;
+	}
+}
+
+int dev_check_rdonly(kdev_t dev) {
+	int i;
+
+	for (i = 0; i < NUM_DEV_NO_WRITE; i++) {
+		if ((dev_no_write[i] & 0xffff0000) == 0xdead0000 &&
+		    dev == (dev_no_write[i] & 0xffff))
+			return 1;
+	}
+	return 0;
+}
+
+void dev_clear_rdonly(int no_write) {
+	dev_no_write[no_write] = 0;
+}
+
+EXPORT_SYMBOL(dev_set_rdonly);
+EXPORT_SYMBOL(dev_check_rdonly);
+EXPORT_SYMBOL(dev_clear_rdonly);
--- lum/drivers/block/loop.c.orig	Fri Dec 21 10:41:53 2001
+++ lum/drivers/block/loop.c	Thu Mar 28 23:39:25 2002
@@ -471,6 +475,11 @@
 	spin_unlock_irq(&lo->lo_lock);
 
 	if (rw == WRITE) {
+#ifdef CONFIG_DEV_RDONLY
+		if (dev_check_rdonly(rbh->b_rdev))
+			goto err;
+#endif
+
 		if (lo->lo_flags & LO_FLAGS_READ_ONLY)
 			goto err;
 	} else if (rw == READA) {
--- lum/drivers/ide/ide-disk.c.orig	Fri Dec 21 10:41:54 2001
+++ lum/drivers/ide/ide-disk.c	Thu Mar 28 23:38:41 2002
@@ -367,6 +367,12 @@
  */
 static ide_startstop_t do_rw_disk (ide_drive_t *drive, struct request *rq, unsigned long block)
 {
+#ifdef CONFIG_DEV_RDONLY
+	if (rq->cmd == WRITE && dev_check_rdonly(rq->rq_dev)) {
+		ide_end_request(1, HWGROUP(drive));
+		return ide_stopped;
+	}
+#endif
 	if (IDE_CONTROL_REG)
 		OUT_BYTE(drive->ctl,IDE_CONTROL_REG);
 	OUT_BYTE(0x00, IDE_FEATURE_REG);
