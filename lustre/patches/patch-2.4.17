--- linux/mm/filemap.c.obd-orig	Mon Nov 26 06:29:17 2001
+++ linux/mm/filemap.c	Tue Dec 11 14:29:50 2001
@@ -2862,8 +2861,10 @@
 	if ((ssize_t) count < 0)
 		return -EINVAL;
 
+#if 0
 	if (!access_ok(VERIFY_READ, buf, count))
 		return -EFAULT;
+#endif
 
 	cached_page = NULL;
 
@@ -2987,10 +2988,12 @@
 		 * same page as we're writing to, without it being marked
 		 * up-to-date.
 		 */
+#if 0
 		{ volatile unsigned char dummy;
 			__get_user(dummy, buf);
 			__get_user(dummy, buf+bytes-1);
 		}
+#endif
 
 		status = -ENOMEM;	/* we'll assign it later anyway */
 		page = __grab_cache_page(mapping, index, &cached_page);
--- linux/kernel/ksyms.c.lustre-orig	Sun Jan 20 17:47:43 2002
+++ linux/kernel/ksyms.c	Sun Jan 20 18:21:30 2002
@@ -280,6 +280,13 @@
 EXPORT_SYMBOL(lock_page);
 EXPORT_SYMBOL(unlock_page);
 
+/* Lustre symbols */
+EXPORT_SYMBOL(pagecache_lock);
+EXPORT_SYMBOL(do_kern_mount);
+EXPORT_SYMBOL(sys_mkdir);
+EXPORT_SYMBOL(sys_rmdir);
+EXPORT_SYMBOL(sys_unlink);
+
 /* device registration */
 EXPORT_SYMBOL(register_chrdev);
 EXPORT_SYMBOL(unregister_chrdev);
--- linux/include/linux/fs.h.lustre-orig	Sun Jan 20 17:32:26 2002
+++ linux/include/linux/fs.h	Sun Jan 20 18:23:42 2002
@@ -984,6 +984,8 @@
 extern int may_umount(struct vfsmount *);
 extern long do_mount(char *, char *, char *, unsigned long, void *);
 
+struct vfsmount *do_kern_mount(char *type, int flags, char *name, void *data);
+int do_umount(struct vfsmount *mnt, int flags);
 #define kern_umount mntput
 
 extern int vfs_statfs(struct super_block *, struct statfs *);
@@ -1043,6 +1045,11 @@
 	return 0;
 }
 
+/* fs/namei.c */ 
+asmlinkage long sys_mkdir(const char * pathname, int mode);
+asmlinkage long sys_rmdir(const char * pathname);
+asmlinkage long sys_unlink(const char * pathname);
+
 /* fs/open.c */
 
 asmlinkage long sys_open(const char *, int, int);
