diff -ur kernel-2.4.18/drivers/block/blkpg.c kernel-2.4.18.patched/drivers/block/blkpg.c
--- kernel-2.4.18/drivers/block/blkpg.c	Tue May  7 17:33:10 2002
+++ kernel-2.4.18.patched/drivers/block/blkpg.c	Thu May 30 13:38:14 2002
@@ -295,3 +295,38 @@
 }
 
 EXPORT_SYMBOL(blk_ioctl);
+
+#define NUM_DEV_NO_WRITE 16
+static int dev_no_write[NUM_DEV_NO_WRITE];
+
+/*
+ * Debug code for turning block devices "read-only" (will discard writes
+ * silently).  This is for filesystem crash/recovery testing.
+ */
+void dev_set_rdonly(kdev_t dev, int no_write)
+{
+	if (dev) {
+		printk(KERN_WARNING "Turning device %s read-only\n", 
+		       bdevname(dev));
+		dev_no_write[no_write] = 0xdead0000 + dev;
+	}
+}
+
+int dev_check_rdonly(kdev_t dev) {
+	int i;
+
+	for (i = 0; i < NUM_DEV_NO_WRITE; i++) {
+		if ((dev_no_write[i] & 0xffff0000) == 0xdead0000 &&
+		    dev == (dev_no_write[i] & 0xffff))
+			return 1;
+	}
+	return 0;
+}
+
+void dev_clear_rdonly(int no_write) {
+	dev_no_write[no_write] = 0;
+}
+
+EXPORT_SYMBOL(dev_set_rdonly);
+EXPORT_SYMBOL(dev_check_rdonly);
+EXPORT_SYMBOL(dev_clear_rdonly);
diff -ur kernel-2.4.18/drivers/block/loop.c kernel-2.4.18.patched/drivers/block/loop.c
--- kernel-2.4.18/drivers/block/loop.c	Tue May  7 16:48:59 2002
+++ kernel-2.4.18.patched/drivers/block/loop.c	Thu May 30 13:38:14 2002
@@ -503,6 +503,11 @@
 	spin_unlock_irq(&lo->lo_lock);
 
 	if (rw == WRITE) {
+#ifdef CONFIG_DEV_RDONLY
+		if (dev_check_rdonly(rbh->b_rdev))
+			goto err;
+#endif
+
 		if (lo->lo_flags & LO_FLAGS_READ_ONLY)
 			goto err;
 	} else if (rw == READA) {
diff -ur kernel-2.4.18/drivers/ide/ide-disk.c kernel-2.4.18.patched/drivers/ide/ide-disk.c
--- kernel-2.4.18/drivers/ide/ide-disk.c	Tue May  7 15:43:35 2002
+++ kernel-2.4.18.patched/drivers/ide/ide-disk.c	Thu May 30 13:38:14 2002
@@ -557,6 +557,12 @@
  */
 static ide_startstop_t do_rw_disk (ide_drive_t *drive, struct request *rq, unsigned long block)
 {
+#ifdef CONFIG_DEV_RDONLY
+	if (rq->cmd == WRITE && dev_check_rdonly(rq->rq_dev)) {
+		ide_end_request(1, HWGROUP(drive));
+		return ide_stopped;
+	}
+#endif
 	if (IDE_CONTROL_REG)
 		OUT_BYTE(drive->ctl,IDE_CONTROL_REG);
 
diff -ur kernel-2.4.18/fs/ext3/Makefile kernel-2.4.18.patched/fs/ext3/Makefile
--- kernel-2.4.18/fs/ext3/Makefile	Tue May  7 14:53:46 2002
+++ kernel-2.4.18.patched/fs/ext3/Makefile	Thu May 30 13:38:14 2002
@@ -9,6 +9,8 @@
 
 O_TARGET := ext3.o
 
+export-objs :=	super.o
+
 obj-y    := balloc.o bitmap.o dir.o file.o fsync.o ialloc.o inode.o \
 		ioctl.o namei.o super.o symlink.o
 obj-m    := $(O_TARGET)
diff -ur kernel-2.4.18/fs/ext3/super.c kernel-2.4.18.patched/fs/ext3/super.c
--- kernel-2.4.18/fs/ext3/super.c	Tue May  7 16:43:17 2002
+++ kernel-2.4.18.patched/fs/ext3/super.c	Thu May 30 13:38:14 2002
@@ -1746,7 +1746,7 @@
 	unregister_filesystem(&ext3_fs_type);
 }
 
-EXPORT_NO_SYMBOLS;
+EXPORT_SYMBOL(ext3_bread);
 
 MODULE_AUTHOR("Remy Card, Stephen Tweedie, Andrew Morton, Andreas Dilger, Theodore Ts'o and others");
 MODULE_DESCRIPTION("Second Extended Filesystem with journaling extensions");
diff -ur kernel-2.4.18/fs/jbd/commit.c kernel-2.4.18.patched/fs/jbd/commit.c
--- kernel-2.4.18/fs/jbd/commit.c	Tue May  7 15:39:35 2002
+++ kernel-2.4.18.patched/fs/jbd/commit.c	Thu May 30 13:38:14 2002
@@ -482,7 +482,7 @@
            transaction's t_log_list queue, and metadata buffers are on
            the t_iobuf_list queue.
 
-	   Wait for the transactions in reverse order.  That way we are
+	   Wait for the buffers in reverse order.  That way we are
 	   less likely to be woken up until all IOs have completed, and
 	   so we incur less scheduling load.
 	*/
@@ -575,8 +575,10 @@
 
 	jbd_debug(3, "JBD: commit phase 6\n");
 
-	if (is_journal_aborted(journal))
+	if (is_journal_aborted(journal)) {
+		unlock_journal(journal);
 		goto skip_commit;
+	}
 
 	/* Done it all: now write the commit record.  We should have
 	 * cleaned up our previous buffers by now, so if we are in abort
@@ -586,9 +588,10 @@
 	descriptor = journal_get_descriptor_buffer(journal);
 	if (!descriptor) {
 		__journal_abort_hard(journal);
+		unlock_journal(journal);
 		goto skip_commit;
 	}
-	
+
 	/* AKPM: buglet - add `i' to tmp! */
 	for (i = 0; i < jh2bh(descriptor)->b_size; i += 512) {
 		journal_header_t *tmp =
@@ -609,7 +612,6 @@
 		put_bh(bh);		/* One for getblk() */
 		journal_unlock_journal_head(descriptor);
 	}
-	lock_journal(journal);
 
 	/* End of a transaction!  Finally, we can do checkpoint
            processing: any buffers committed as a result of this
@@ -617,6 +619,25 @@
            before. */
 
 skip_commit:
+
+	/* Call any callbacks that had been registered for handles in this
+	 * transaction.  It is up to the callback to free any allocated
+	 * memory.
+	 */
+	if (!list_empty(&commit_transaction->t_jcb)) {
+		struct list_head *p, *n;
+		int error = is_journal_aborted(journal);
+
+		list_for_each_safe(p, n, &commit_transaction->t_jcb) {
+			struct journal_callback *jcb;
+
+			jcb = list_entry(p, struct journal_callback, jcb_list);
+			list_del(p);
+			jcb->jcb_func(jcb, error);
+		}
+	}
+
+	lock_journal(journal);
 
 	jbd_debug(3, "JBD: commit phase 7\n");
 
diff -ur kernel-2.4.18/fs/jbd/journal.c kernel-2.4.18.patched/fs/jbd/journal.c
--- kernel-2.4.18/fs/jbd/journal.c	Tue May  7 16:43:17 2002
+++ kernel-2.4.18.patched/fs/jbd/journal.c	Thu May 30 13:38:14 2002
@@ -58,6 +58,7 @@
 #endif
 EXPORT_SYMBOL(journal_flush);
 EXPORT_SYMBOL(journal_revoke);
+EXPORT_SYMBOL(journal_callback_set);
 
 EXPORT_SYMBOL(journal_init_dev);
 EXPORT_SYMBOL(journal_init_inode);
diff -ur kernel-2.4.18/fs/jbd/transaction.c kernel-2.4.18.patched/fs/jbd/transaction.c
--- kernel-2.4.18/fs/jbd/transaction.c	Tue May  7 16:43:17 2002
+++ kernel-2.4.18.patched/fs/jbd/transaction.c	Thu May 30 13:38:14 2002
@@ -57,6 +57,7 @@
 	transaction->t_state = T_RUNNING;
 	transaction->t_tid = journal->j_transaction_sequence++;
 	transaction->t_expires = jiffies + journal->j_commit_interval;
+	INIT_LIST_HEAD(&transaction->t_jcb);
 
 	/* Set up the commit timer for the new transaction. */
 	J_ASSERT (!journal->j_commit_timer_active);
@@ -201,6 +202,20 @@
 	return 0;
 }
 
+/* Allocate a new handle.  This should probably be in a slab... */
+static handle_t *get_handle(int nblocks)
+{
+	handle_t *handle = jbd_kmalloc(sizeof (handle_t), GFP_NOFS);
+	if (!handle)
+		return NULL;
+	memset(handle, 0, sizeof (handle_t));
+	handle->h_buffer_credits = nblocks;
+	handle->h_ref = 1;
+	INIT_LIST_HEAD(&handle->h_jcb);
+
+	return handle;
+}
+
 /*
  * Obtain a new handle.  
  *
@@ -227,14 +242,11 @@
 		handle->h_ref++;
 		return handle;
 	}
-	
-	handle = jbd_kmalloc(sizeof (handle_t), GFP_NOFS);
+
+	handle = get_handle(nblocks);
 	if (!handle)
 		return ERR_PTR(-ENOMEM);
-	memset (handle, 0, sizeof (handle_t));
 
-	handle->h_buffer_credits = nblocks;
-	handle->h_ref = 1;
 	current->journal_info = handle;
 
 	err = start_this_handle(journal, handle);
@@ -333,14 +345,11 @@
 	
 	if (is_journal_aborted(journal))
 		return ERR_PTR(-EIO);
-	
-	handle = jbd_kmalloc(sizeof (handle_t), GFP_NOFS);
+
+	handle = get_handle(nblocks);
 	if (!handle)
 		return ERR_PTR(-ENOMEM);
-	memset (handle, 0, sizeof (handle_t));
 
-	handle->h_buffer_credits = nblocks;
-	handle->h_ref = 1;
 	current->journal_info = handle;
 
 	err = try_start_this_handle(journal, handle);
@@ -1319,6 +1328,29 @@
 #endif
 
 /*
+ * Register a callback function for this handle.  The function will be
+ * called when the transaction that this handle is part of has been
+ * committed to disk with the original callback data struct and the
+ * error status of the journal as parameters.  There is no guarantee of
+ * ordering between handles within a single transaction, nor between
+ * callbacks registered on the same handle.
+ *
+ * The caller is responsible for allocating the journal_callback struct.
+ * This is to allow the caller to add as much extra data to the callback
+ * as needed, but reduce the overhead of multiple allocations.  The caller
+ * allocated struct must start with a struct journal_callback at offset 0,
+ * and has the caller-specific data afterwards.
+ */
+void journal_callback_set(handle_t *handle, void (*func)(void *, int),
+			  void *cb_data)
+{
+	struct journal_callback *jcb = cb_data;
+
+	list_add(&jcb->jcb_list, &handle->h_jcb);
+	jcb->jcb_func = func;
+}
+
+/*
  * All done for a particular handle.
  *
  * There is not much action needed here.  We just return any remaining
@@ -1383,7 +1415,10 @@
 			wake_up(&journal->j_wait_transaction_locked);
 	}
 
-	/* 
+	/* Move callbacks from the handle to the transaction. */
+	list_splice(&handle->h_jcb, &transaction->t_jcb);
+
+	/*
 	 * If the handle is marked SYNC, we need to set another commit
 	 * going!  We also want to force a commit if the current
 	 * transaction is occupying too much of the log, or if the
diff -ur kernel-2.4.18/include/linux/blkdev.h kernel-2.4.18.patched/include/linux/blkdev.h
--- kernel-2.4.18/include/linux/blkdev.h	Tue May  7 15:46:15 2002
+++ kernel-2.4.18.patched/include/linux/blkdev.h	Thu May 30 13:42:25 2002
@@ -276,4 +276,9 @@
 	}
 	return retval;
 }
+
+#define CONFIG_DEV_RDONLY
+void dev_set_rdonly(kdev_t, int);
+int dev_check_rdonly(kdev_t);
+void dev_clear_rdonly(int);
 #endif
diff -ur kernel-2.4.18/include/linux/fs.h kernel-2.4.18.patched/include/linux/fs.h
--- kernel-2.4.18/include/linux/fs.h	Tue May  7 16:40:30 2002
+++ kernel-2.4.18.patched/include/linux/fs.h	Thu May 30 13:40:51 2002
@@ -1034,6 +1034,7 @@
 extern struct vfsmount *kern_mount(struct file_system_type *);
 extern int may_umount(struct vfsmount *);
 extern long do_mount(char *, char *, char *, unsigned long, void *);
+struct vfsmount *do_kern_mount(const char *type, int flags, char *name, void *data);
 extern void umount_tree(struct vfsmount *);
 
 #define kern_umount mntput
diff -ur kernel-2.4.18/include/linux/jbd.h kernel-2.4.18.patched/include/linux/jbd.h
--- kernel-2.4.18/include/linux/jbd.h	Tue May  7 16:43:17 2002
+++ kernel-2.4.18.patched/include/linux/jbd.h	Thu May 30 13:38:14 2002
@@ -257,6 +257,13 @@
 	return bh->b_private;
 }
 
+#define HAVE_JOURNAL_CALLBACK_STATUS
+struct journal_callback {
+	struct list_head jcb_list;
+	void (*jcb_func)(void *cb_data, int error);
+	/* user data goes here */
+};
+
 struct jbd_revoke_table_s;
 
 /* The handle_t type represents a single atomic update being performed
@@ -287,6 +294,12 @@
 	   operations */
 	int			h_err;
 
+	/* List of application registered callbacks for this handle.
+	 * The function(s) will be called after the transaction that
+	 * this handle is part of has been committed to disk.
+	 */
+	struct list_head	h_jcb;
+
 	/* Flags */
 	unsigned int	h_sync:		1;	/* sync-on-close */
 	unsigned int	h_jdata:	1;	/* force data journaling */
@@ -406,6 +419,10 @@
 
 	/* How many handles used this transaction? */
 	int t_handle_count;
+
+	/* List of registered callback functions for this transaction.
+	 * Called when the transaction is committed. */
+	struct list_head	t_jcb;
 };
 
 
@@ -654,6 +671,8 @@
 extern int	 journal_try_to_free_buffers(journal_t *, struct page *, int);
 extern int	 journal_stop(handle_t *);
 extern int	 journal_flush (journal_t *);
+extern void	 journal_callback_set(handle_t *handle, void (*fn)(void *, int),
+				      void *cb_data);
 
 extern void	 journal_lock_updates (journal_t *);
 extern void	 journal_unlock_updates (journal_t *);
diff -ur kernel-2.4.18/kernel/ksyms.c kernel-2.4.18.patched/kernel/ksyms.c
--- kernel-2.4.18/kernel/ksyms.c	Mon May 20 00:15:42 2002
+++ kernel-2.4.18.patched/kernel/ksyms.c	Thu May 30 13:38:14 2002
@@ -305,6 +305,11 @@
 EXPORT_SYMBOL(lock_may_write);
 EXPORT_SYMBOL(dcache_readdir);
 
+/* lustre */
+EXPORT_SYMBOL(pagecache_lock);
+EXPORT_SYMBOL(do_kern_mount);
+
+
 /* for stackable file systems (lofs, wrapfs, cryptfs, etc.) */
 EXPORT_SYMBOL(default_llseek);
 EXPORT_SYMBOL(dentry_open);
--- linux/include/linux/fs.h.lustre-orig	Wed May 22 08:29:48 2002
+++ linux/include/linux/fs.h	Tue Jun  4 09:24:48 2002
@@ -314,8 +314,8 @@
 #include <linux/ncp_fs_i.h>
 #include <linux/proc_fs_i.h>
 #include <linux/usbdev_fs_i.h>
-#include <linux/hostfs_fs_i.h>
 #include <linux/jffs2_fs_i.h>
+#include <linux/hostfs_fs_i.h>
 #include <linux/cramfs_fs_sb.h>
 
 /*
@@ -506,8 +506,8 @@
 		struct proc_inode_info		proc_i;
 		struct socket			socket_i;
 		struct usbdev_inode_info        usbdev_i;
-	        struct hostfs_inode_info	hostfs_i;
  		struct jffs2_inode_info		jffs2_i;
+                struct hostfs_inode_info        hostfs_i;
 		void				*generic_ip;
 	} u;
 };
@@ -536,6 +536,7 @@
 
 	/* needed for tty driver, and maybe others */
 	void			*private_data;
+        struct lookup_intent    *f_intent;
 
 	/* preallocated helper kiobuf to speedup O_DIRECT */
 	struct kiobuf		*f_iobuf;
@@ -779,7 +780,9 @@
 extern int vfs_link(struct dentry *, struct inode *, struct dentry *);
 extern int vfs_rmdir(struct inode *, struct dentry *);
 extern int vfs_unlink(struct inode *, struct dentry *);
-extern int vfs_rename(struct inode *, struct dentry *, struct inode *, struct dentry *);
+int vfs_rename(struct inode *old_dir, struct dentry *old_dentry,
+               struct inode *new_dir, struct dentry *new_dentry, 
+               struct lookup_intent *it);
 
 /*
  * File types
@@ -840,6 +843,7 @@
 struct inode_operations {
 	int (*create) (struct inode *,struct dentry *,int);
 	struct dentry * (*lookup) (struct inode *,struct dentry *);
+        struct dentry * (*lookup2) (struct inode *,struct dentry *, struct lookup_intent *);
 	int (*link) (struct dentry *,struct inode *,struct dentry *);
 	int (*unlink) (struct inode *,struct dentry *);
 	int (*symlink) (struct inode *,struct dentry *,const char *);
@@ -855,6 +859,10 @@
 	int (*revalidate) (struct dentry *);
 	int (*setattr) (struct dentry *, struct iattr *);
 	int (*getattr) (struct dentry *, struct iattr *);
+        int (*setxattr) (struct dentry *, const char *, void *, size_t, int);
+        ssize_t (*getxattr) (struct dentry *, const char *, void *, size_t);
+        ssize_t (*listxattr) (struct dentry *, char *, size_t);
+        int (*removexattr) (struct dentry *, const char *);
 };
 
 struct seq_file;
@@ -1307,6 +1315,7 @@
 extern loff_t default_llseek(struct file *file, loff_t offset, int origin);
 
 extern int FASTCALL(__user_walk(const char *, unsigned, struct nameidata *));
+extern int FASTCALL(__user_walk_it(const char *, unsigned, struct nameidata *, struct lookup_intent *it));
 extern int FASTCALL(path_init(const char *, unsigned, struct nameidata *));
 extern int FASTCALL(path_walk(const char *, struct nameidata *));
 extern int FASTCALL(link_path_walk(const char *, struct nameidata *));
@@ -1317,6 +1326,8 @@
 extern struct dentry * lookup_hash(struct qstr *, struct dentry *);
 #define user_path_walk(name,nd)	 __user_walk(name, LOOKUP_FOLLOW|LOOKUP_POSITIVE, nd)
 #define user_path_walk_link(name,nd) __user_walk(name, LOOKUP_POSITIVE, nd)
+#define user_path_walk_it(name,nd,it)  __user_walk_it(name, LOOKUP_FOLLOW|LOOKUP_POSITIVE, nd, it)
+#define user_path_walk_link_it(name,nd,it) __user_walk_it(name, LOOKUP_POSITIVE, nd, it)
 
 extern void iput(struct inode *);
 extern void force_delete(struct inode *);
--- linux/include/linux/dcache.h.lustre-orig	Wed May 22 08:29:48 2002
+++ linux/include/linux/dcache.h	Tue Jun  4 09:24:45 2002
@@ -6,6 +6,28 @@
 #include <asm/atomic.h>
 #include <linux/mount.h>
 
+#define IT_OPEN  (1)
+#define IT_CREAT  (1<<1)
+#define IT_MKDIR  (1<<2)
+#define IT_LINK  (1<<3)
+#define IT_SYMLINK  (1<<4)
+#define IT_UNLINK  (1<<5)
+#define IT_RMDIR  (1<<6)
+#define IT_RENAME  (1<<7)
+#define IT_READDIR  (1<<8)
+#define IT_GETATTR  (1<<9)
+#define IT_SETATTR  (1<<10)
+#define IT_READLINK  (1<<11)
+
+struct lookup_intent { 
+        int it_op;
+        int it_mode;
+        int it_disposition;
+        int it_status; 
+        struct iattr *it_iattr;
+        void *it_data;
+};
+
 /*
  * linux/include/linux/dcache.h
  *
@@ -79,17 +101,20 @@
 	struct dentry_operations  *d_op;
 	struct super_block * d_sb;	/* The root of the dentry tree */
 	unsigned long d_vfs_flags;
+        struct lookup_intent *d_it;
 	void * d_fsdata;		/* fs-specific data */
 	unsigned char d_iname[DNAME_INLINE_LEN]; /* small names */
 };
 
 struct dentry_operations {
 	int (*d_revalidate)(struct dentry *, int);
+        int (*d_revalidate2)(struct dentry *, int, struct lookup_intent *);
 	int (*d_hash) (struct dentry *, struct qstr *);
 	int (*d_compare) (struct dentry *, struct qstr *, struct qstr *);
 	int (*d_delete)(struct dentry *);
 	void (*d_release)(struct dentry *);
 	void (*d_iput)(struct dentry *, struct inode *);
+        void (*d_intent_rel)(struct dentry *);
 };
 
 /* the dentry parameter passed to d_hash and d_compare is the parent
--- linux/fs/namei.c.lustre-orig	Wed May 22 08:29:48 2002
+++ linux/fs/namei.c	Mon Jun  3 16:14:56 2002
@@ -94,6 +94,14 @@
  * XEmacs seems to be relying on it...
  */
 
+void intent_release(struct dentry *de) 
+{
+        if (de->d_op && de->d_op->d_intent_rel)
+                de->d_op->d_intent_rel(de);
+        de->d_it = NULL;
+}
+
+
 /* In order to reduce some races, while at the same time doing additional
  * checking and hopefully speeding things up, we copy filenames to the
  * kernel data space before using them..
@@ -260,10 +268,18 @@
  * Internal lookup() using the new generic dcache.
  * SMP-safe
  */
-static struct dentry * cached_lookup(struct dentry * parent, struct qstr * name, int flags)
+static struct dentry * cached_lookup(struct dentry * parent, struct qstr * name, int flags, struct lookup_intent *it)
 {
 	struct dentry * dentry = d_lookup(parent, name);
 
+        if (dentry && dentry->d_op && dentry->d_op->d_revalidate2) {
+                if (!dentry->d_op->d_revalidate2(dentry, flags, it) && !d_invalidate(dentry)) {
+                        dput(dentry);
+                        dentry = NULL;
+                }
+                return dentry; 
+        }
+
 	if (dentry && dentry->d_op && dentry->d_op->d_revalidate) {
 		if (!dentry->d_op->d_revalidate(dentry, flags) && !d_invalidate(dentry)) {
 			dput(dentry);
@@ -281,7 +297,7 @@
  * make sure that nobody added the entry to the dcache in the meantime..
  * SMP-safe
  */
-static struct dentry * real_lookup(struct dentry * parent, struct qstr * name, int flags)
+static struct dentry * real_lookup(struct dentry * parent, struct qstr * name, int flags, struct lookup_intent *it)
 {
 	struct dentry * result;
 	struct inode *dir = parent->d_inode;
@@ -300,6 +316,9 @@
 		result = ERR_PTR(-ENOMEM);
 		if (dentry) {
 			lock_kernel();
+                        if (dir->i_op->lookup2) 
+                                result = dir->i_op->lookup2(dir, dentry, it);
+                        else 
 			result = dir->i_op->lookup(dir, dentry);
 			unlock_kernel();
 			if (result)
@@ -322,6 +341,12 @@
 			result = ERR_PTR(-ENOENT);
 		}
 	}
+        if (result->d_op && result->d_op->d_revalidate2) {
+                if (!result->d_op->d_revalidate2(result, flags, it) && !d_invalidate(result)) {
+                        dput(result);
+                        result = ERR_PTR(-ENOENT);
+                }
+        }
 	return result;
 }
 
@@ -445,7 +470,7 @@
  *
  * We expect 'base' to be positive and a directory.
  */
-int link_path_walk(const char * name, struct nameidata *nd)
+int link_path_walk_it(const char * name, struct nameidata *nd, struct lookup_intent *it)
 {
 	struct dentry *dentry;
 	struct inode *inode;
@@ -518,9 +543,9 @@
 				break;
 		}
 		/* This does the actual lookups.. */
-		dentry = cached_lookup(nd->dentry, &this, LOOKUP_CONTINUE);
+                dentry = cached_lookup(nd->dentry, &this, LOOKUP_CONTINUE, NULL);
 		if (!dentry) {
-			dentry = real_lookup(nd->dentry, &this, LOOKUP_CONTINUE);
+                        dentry = real_lookup(nd->dentry, &this, LOOKUP_CONTINUE, NULL);
 			err = PTR_ERR(dentry);
 			if (IS_ERR(dentry))
 				break;
@@ -554,7 +579,7 @@
 			nd->dentry = dentry;
 		}
 		err = -ENOTDIR; 
-		if (!inode->i_op->lookup)
+                if (!inode->i_op->lookup && !inode->i_op->lookup2)
 			break;
 		continue;
 		/* here ends the main loop */
@@ -581,9 +606,9 @@
 			if (err < 0)
 				break;
 		}
-		dentry = cached_lookup(nd->dentry, &this, 0);
+                dentry = cached_lookup(nd->dentry, &this, 0, it);
 		if (!dentry) {
-			dentry = real_lookup(nd->dentry, &this, 0);
+                        dentry = real_lookup(nd->dentry, &this, 0, it);
 			err = PTR_ERR(dentry);
 			if (IS_ERR(dentry))
 				break;
@@ -607,7 +632,8 @@
 			goto no_inode;
 		if (lookup_flags & LOOKUP_DIRECTORY) {
 			err = -ENOTDIR; 
-			if (!inode->i_op || !inode->i_op->lookup)
+                        if (!inode->i_op || (!inode->i_op->lookup && 
+                                             !inode->i_op->lookup2))
 				break;
 		}
 		goto return_base;
@@ -636,12 +662,24 @@
 	return err;
 }
 
+int link_path_walk(const char * name, struct nameidata *nd)
+{
+        return link_path_walk_it(name, nd, NULL);
+}
+
+int path_walk_it(const char * name, struct nameidata *nd, struct lookup_intent *it)
+{
+        current->total_link_count = 0;
+        return link_path_walk_it(name, nd, it);
+}
+
 int path_walk(const char * name, struct nameidata *nd)
 {
 	current->total_link_count = 0;
-	return link_path_walk(name, nd);
+        return link_path_walk_it(name, nd, NULL);
 }
 
+
 /* SMP-safe */
 /* returns 1 if everything is done */
 static int __emul_lookup_dentry(const char *name, struct nameidata *nd)
@@ -742,7 +780,8 @@
  * needs parent already locked. Doesn't follow mounts.
  * SMP-safe.
  */
-struct dentry * lookup_hash(struct qstr *name, struct dentry * base)
+struct dentry * lookup_hash_it(struct qstr *name, struct dentry * base, 
+                            struct lookup_intent *it)
 {
 	struct dentry * dentry;
 	struct inode *inode;
@@ -765,13 +804,16 @@
 			goto out;
 	}
 
-	dentry = cached_lookup(base, name, 0);
+        dentry = cached_lookup(base, name, 0, it);
 	if (!dentry) {
 		struct dentry *new = d_alloc(base, name);
 		dentry = ERR_PTR(-ENOMEM);
 		if (!new)
 			goto out;
 		lock_kernel();
+                if (inode->i_op->lookup2) 
+                        dentry = inode->i_op->lookup2(inode, new, it);
+                else 
 		dentry = inode->i_op->lookup(inode, new);
 		unlock_kernel();
 		if (!dentry)
@@ -783,6 +825,12 @@
 	return dentry;
 }
 
+struct dentry * lookup_hash(struct qstr *name, struct dentry * base)
+{
+        return lookup_hash_it(name, base, NULL);
+}
+
+
 /* SMP-safe */
 struct dentry * lookup_one_len(const char * name, struct dentry * base, int len)
 {
@@ -804,7 +852,7 @@
 	}
 	this.hash = end_name_hash(hash);
 
-	return lookup_hash(&this, base);
+        return lookup_hash_it(&this, base, NULL);
 access:
 	return ERR_PTR(-EACCES);
 }
@@ -836,6 +884,22 @@
 	return err;
 }
 
+int __user_walk_it(const char *name, unsigned flags, struct nameidata *nd, struct lookup_intent *it)
+{
+        char *tmp;
+        int err;
+
+        tmp = getname(name);
+        err = PTR_ERR(tmp);
+        if (!IS_ERR(tmp)) {
+                err = 0;
+                if (path_init(tmp, flags, nd))
+                        err = path_walk_it(tmp, nd, it);
+                putname(tmp);
+        }
+        return err;
+}
+
 /*
  * It's inline, so penalty for filesystems that don't use sticky bit is
  * minimal.
@@ -970,7 +1034,8 @@
  * for symlinks (where the permissions are checked later).
  * SMP-safe
  */
-int open_namei(const char * pathname, int flag, int mode, struct nameidata *nd)
+int open_namei_it(const char * pathname, int flag, int mode, struct nameidata *nd, 
+               struct lookup_intent *it)
 {
 	int acc_mode, error = 0;
 	struct inode *inode;
@@ -984,8 +1049,9 @@
 	 * The simplest case - just a plain lookup.
 	 */
 	if (!(flag & O_CREAT)) {
+
 		if (path_init(pathname, lookup_flags(flag), nd))
-			error = path_walk(pathname, nd);
+                        error = path_walk_it(pathname, nd, it);
 		if (error)
 			return error;
 		dentry = nd->dentry;
@@ -995,6 +1061,8 @@
 	/*
 	 * Create - we need to know the parent.
 	 */
+        if (it) 
+                it->it_op |= IT_CREAT;
 	if (path_init(pathname, LOOKUP_PARENT, nd))
 		error = path_walk(pathname, nd);
 	if (error)
@@ -1011,7 +1079,7 @@
 
 	dir = nd->dentry;
 	down(&dir->d_inode->i_sem);
-	dentry = lookup_hash(&nd->last, nd->dentry);
+        dentry = lookup_hash_it(&nd->last, nd->dentry, it);
 
 do_last:
 	error = PTR_ERR(dentry);
@@ -1022,6 +1090,7 @@
 
 	/* Negative dentry, just create the file */
 	if (!dentry->d_inode) {
+                dentry->d_it = it;
 		error = vfs_create(dir->d_inode, dentry,
 				   mode & ~current->fs->umask);
 		up(&dir->d_inode->i_sem);
@@ -1181,13 +1250,20 @@
 	}
 	dir = nd->dentry;
 	down(&dir->d_inode->i_sem);
-	dentry = lookup_hash(&nd->last, nd->dentry);
+        dentry = lookup_hash_it(&nd->last, nd->dentry, NULL);
 	putname(nd->last.name);
 	goto do_last;
 }
 
+int open_namei(const char * pathname, int flag, int mode, struct nameidata *nd)
+{
+        return open_namei_it(pathname, flag, mode, nd, NULL); 
+}
+
+
 /* SMP-safe */
-static struct dentry *lookup_create(struct nameidata *nd, int is_dir)
+static struct dentry *lookup_create(struct nameidata *nd, int is_dir, 
+                                    struct lookup_intent *it)
 {
 	struct dentry *dentry;
 
@@ -1195,7 +1271,7 @@
 	dentry = ERR_PTR(-EEXIST);
 	if (nd->last_type != LAST_NORM)
 		goto fail;
-	dentry = lookup_hash(&nd->last, nd->dentry);
+        dentry = lookup_hash_it(&nd->last, nd->dentry, it);
 	if (IS_ERR(dentry))
 		goto fail;
 	if (!is_dir && nd->last.name[nd->last.len] && !dentry->d_inode)
@@ -1241,6 +1317,7 @@
 	char * tmp;
 	struct dentry * dentry;
 	struct nameidata nd;
+        struct lookup_intent it = { IT_CREAT , mode };
 
 	if (S_ISDIR(mode))
 		return -EPERM;
@@ -1252,11 +1329,12 @@
 		error = path_walk(tmp, &nd);
 	if (error)
 		goto out;
-	dentry = lookup_create(&nd, 0);
+        dentry = lookup_create(&nd, 0, &it);
 	error = PTR_ERR(dentry);
 
 	mode &= ~current->fs->umask;
 	if (!IS_ERR(dentry)) {
+                dentry->d_it = &it;
 		switch (mode & S_IFMT) {
 		case 0: case S_IFREG:
 			error = vfs_create(nd.dentry->d_inode,dentry,mode);
@@ -1272,6 +1350,7 @@
 		}
 		dput(dentry);
 	}
+        intent_release(dentry); 
 	up(&nd.dentry->d_inode->i_sem);
 	path_release(&nd);
 out:
@@ -1310,6 +1389,7 @@
 {
 	int error = 0;
 	char * tmp;
+        struct lookup_intent it = { IT_MKDIR, mode };
 
 	tmp = getname(pathname);
 	error = PTR_ERR(tmp);
@@ -1321,13 +1401,15 @@
 			error = path_walk(tmp, &nd);
 		if (error)
 			goto out;
-		dentry = lookup_create(&nd, 1);
+                dentry = lookup_create(&nd, 1, &it);
 		error = PTR_ERR(dentry);
 		if (!IS_ERR(dentry)) {
+                        dentry->d_it = &it;
 			error = vfs_mkdir(nd.dentry->d_inode, dentry,
 					  mode & ~current->fs->umask);
 			dput(dentry);
 		}
+                intent_release(dentry); 
 		up(&nd.dentry->d_inode->i_sem);
 		path_release(&nd);
 out:
@@ -1407,6 +1489,7 @@
 	char * name;
 	struct dentry *dentry;
 	struct nameidata nd;
+        struct lookup_intent it = { IT_RMDIR, 0 };
 
 	name = getname(pathname);
 	if(IS_ERR(name))
@@ -1429,10 +1512,12 @@
 			goto exit1;
 	}
 	down(&nd.dentry->d_inode->i_sem);
-	dentry = lookup_hash(&nd.last, nd.dentry);
+        dentry = lookup_hash_it(&nd.last, nd.dentry, &it);
 	error = PTR_ERR(dentry);
 	if (!IS_ERR(dentry)) {
+                dentry->d_it = &it; 
 		error = vfs_rmdir(nd.dentry->d_inode, dentry);
+                intent_release(dentry); 
 		dput(dentry);
 	}
 	up(&nd.dentry->d_inode->i_sem);
@@ -1476,6 +1561,7 @@
 	char * name;
 	struct dentry *dentry;
 	struct nameidata nd;
+        struct lookup_intent it = { IT_UNLINK, 0 };
 
 	name = getname(pathname);
 	if(IS_ERR(name))
@@ -1489,14 +1575,16 @@
 	if (nd.last_type != LAST_NORM)
 		goto exit1;
 	down(&nd.dentry->d_inode->i_sem);
-	dentry = lookup_hash(&nd.last, nd.dentry);
+        dentry = lookup_hash_it(&nd.last, nd.dentry, &it);
 	error = PTR_ERR(dentry);
 	if (!IS_ERR(dentry)) {
+                dentry->d_it = &it;
 		/* Why not before? Because we want correct error value */
 		if (nd.last.name[nd.last.len])
 			goto slashes;
 		error = vfs_unlink(nd.dentry->d_inode, dentry);
 	exit2:
+                intent_release(dentry); 
 		dput(dentry);
 	}
 	up(&nd.dentry->d_inode->i_sem);
@@ -1543,6 +1631,7 @@
 	int error = 0;
 	char * from;
 	char * to;
+        struct lookup_intent it = { IT_SYMLINK, 0 };
 
 	from = getname(oldname);
 	if(IS_ERR(from))
@@ -1557,12 +1646,14 @@
 			error = path_walk(to, &nd);
 		if (error)
 			goto out;
-		dentry = lookup_create(&nd, 0);
+                dentry = lookup_create(&nd, 0, &it);
 		error = PTR_ERR(dentry);
 		if (!IS_ERR(dentry)) {
+                        dentry->d_it = &it;
 			error = vfs_symlink(nd.dentry->d_inode, dentry, from);
 			dput(dentry);
 		}
+                intent_release(dentry); 
 		up(&nd.dentry->d_inode->i_sem);
 		path_release(&nd);
 out:
@@ -1626,6 +1717,7 @@
 	int error;
 	char * from;
 	char * to;
+        struct lookup_intent it = { IT_LINK, 0 };
 
 	from = getname(oldname);
 	if(IS_ERR(from))
@@ -1648,12 +1740,14 @@
 		error = -EXDEV;
 		if (old_nd.mnt != nd.mnt)
 			goto out_release;
-		new_dentry = lookup_create(&nd, 0);
+                new_dentry = lookup_create(&nd, 0, &it);
 		error = PTR_ERR(new_dentry);
 		if (!IS_ERR(new_dentry)) {
+                        new_dentry->d_it = &it;
 			error = vfs_link(old_nd.dentry, nd.dentry->d_inode, new_dentry);
 			dput(new_dentry);
 		}
+                intent_release(new_dentry); 
 		up(&nd.dentry->d_inode->i_sem);
 out_release:
 		path_release(&nd);
@@ -1694,7 +1788,8 @@
  *	   locking].
  */
 int vfs_rename_dir(struct inode *old_dir, struct dentry *old_dentry,
-	       struct inode *new_dir, struct dentry *new_dentry)
+                   struct inode *new_dir, struct dentry *new_dentry,
+                   struct lookup_intent *it)
 {
 	int error;
 	struct inode *target;
@@ -1748,12 +1843,14 @@
 	} else
 		double_down(&old_dir->i_zombie,
 			    &new_dir->i_zombie);
+        new_dentry->d_it = it;
 	if (IS_DEADDIR(old_dir)||IS_DEADDIR(new_dir))
 		error = -ENOENT;
 	else if (d_mountpoint(old_dentry)||d_mountpoint(new_dentry))
 		error = -EBUSY;
 	else 
 		error = old_dir->i_op->rename(old_dir, old_dentry, new_dir, new_dentry);
+        intent_release(new_dentry); 
 	if (target) {
 		if (!error)
 			target->i_flags |= S_DEAD;
@@ -1775,7 +1872,8 @@
 }
 
 int vfs_rename_other(struct inode *old_dir, struct dentry *old_dentry,
-	       struct inode *new_dir, struct dentry *new_dentry)
+               struct inode *new_dir, struct dentry *new_dentry, 
+                     struct lookup_intent *it)
 {
 	int error;
 
@@ -1802,10 +1900,12 @@
 	DQUOT_INIT(old_dir);
 	DQUOT_INIT(new_dir);
 	double_down(&old_dir->i_zombie, &new_dir->i_zombie);
+        new_dentry->d_it = it;
 	if (d_mountpoint(old_dentry)||d_mountpoint(new_dentry))
 		error = -EBUSY;
 	else
 		error = old_dir->i_op->rename(old_dir, old_dentry, new_dir, new_dentry);
+        intent_release(new_dentry); 
 	double_up(&old_dir->i_zombie, &new_dir->i_zombie);
 	if (error)
 		return error;
@@ -1817,13 +1917,14 @@
 }
 
 int vfs_rename(struct inode *old_dir, struct dentry *old_dentry,
-	       struct inode *new_dir, struct dentry *new_dentry)
+               struct inode *new_dir, struct dentry *new_dentry, 
+               struct lookup_intent *it)
 {
 	int error;
 	if (S_ISDIR(old_dentry->d_inode->i_mode))
-		error = vfs_rename_dir(old_dir,old_dentry,new_dir,new_dentry);
+                error = vfs_rename_dir(old_dir,old_dentry,new_dir,new_dentry, it);
 	else
-		error = vfs_rename_other(old_dir,old_dentry,new_dir,new_dentry);
+                error = vfs_rename_other(old_dir,old_dentry,new_dir,new_dentry, it);
 	if (!error) {
 		if (old_dir == new_dir)
 			inode_dir_notify(old_dir, DN_RENAME);
@@ -1841,6 +1942,7 @@
 	struct dentry * old_dir, * new_dir;
 	struct dentry * old_dentry, *new_dentry;
 	struct nameidata oldnd, newnd;
+        struct lookup_intent it = {IT_RENAME, 0};
 
 	if (path_init(oldname, LOOKUP_PARENT, &oldnd))
 		error = path_walk(oldname, &oldnd);
@@ -1868,7 +1970,9 @@
 
 	double_lock(new_dir, old_dir);
 
-	old_dentry = lookup_hash(&oldnd.last, old_dir);
+        it.it_op = IT_RENAME;
+        it.it_mode = 0;
+        old_dentry = lookup_hash_it(&oldnd.last, old_dir, &it);
 	error = PTR_ERR(old_dentry);
 	if (IS_ERR(old_dentry))
 		goto exit3;
@@ -1884,14 +1988,14 @@
 		if (newnd.last.name[newnd.last.len])
 			goto exit4;
 	}
-	new_dentry = lookup_hash(&newnd.last, new_dir);
+        new_dentry = lookup_hash_it(&newnd.last, new_dir, &it);
 	error = PTR_ERR(new_dentry);
 	if (IS_ERR(new_dentry))
 		goto exit4;
 
 	lock_kernel();
 	error = vfs_rename(old_dir->d_inode, old_dentry,
-				   new_dir->d_inode, new_dentry);
+                                   new_dir->d_inode, new_dentry, &it);
 	unlock_kernel();
 
 	dput(new_dentry);
--- linux/fs/open.c.lustre-orig	Wed May 22 08:29:48 2002
+++ linux/fs/open.c	Wed May 22 08:29:48 2002
@@ -630,10 +630,15 @@
  * for the internal routines (ie open_namei()/follow_link() etc). 00 is
  * used by symlinks.
  */
+extern int open_namei_it(const char *filename, int namei_flags, int mode, 
+                         struct nameidata *nd, struct lookup_intent *it);
+struct file *dentry_open_it(struct dentry *dentry, struct vfsmount *mnt, int flags, struct lookup_intent *it);
+
 struct file *filp_open(const char * filename, int flags, int mode)
 {
 	int namei_flags, error;
 	struct nameidata nd;
+        struct lookup_intent it = {IT_OPEN, 0};
 
 	namei_flags = flags;
 	if ((namei_flags+1) & O_ACCMODE)
@@ -641,14 +646,14 @@
 	if (namei_flags & O_TRUNC)
 		namei_flags |= 2;
 
-	error = open_namei(filename, namei_flags, mode, &nd);
+        error = open_namei_it(filename, namei_flags, mode, &nd, &it);
 	if (!error)
-		return dentry_open(nd.dentry, nd.mnt, flags);
+                return dentry_open_it(nd.dentry, nd.mnt, flags, &it);
 
 	return ERR_PTR(error);
 }
 
-struct file *dentry_open(struct dentry *dentry, struct vfsmount *mnt, int flags)
+struct file *dentry_open_it(struct dentry *dentry, struct vfsmount *mnt, int flags, struct lookup_intent *it)
 {
 	struct file * f;
 	struct inode *inode;
@@ -690,6 +695,7 @@
 			goto cleanup_all;
 	}
 	f->f_flags &= ~(O_CREAT | O_EXCL | O_NOCTTY | O_TRUNC);
+        f->f_intent = it;
 
 	return f;
 
@@ -710,6 +716,13 @@
 	return ERR_PTR(error);
 }
 
+struct file *dentry_open(struct dentry *dentry, struct vfsmount *mnt, int flags)
+{
+        return dentry_open_it(dentry, mnt, flags, NULL);
+
+}
+
+
 /*
  * Find an empty file descriptor entry, and mark it busy.
  */
