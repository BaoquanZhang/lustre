--- ./fs/extN/namei.c.orig	Tue May  7 17:10:31 2002
+++ ./fs/extN/namei.c	Tue May  7 17:13:27 2002
@@ -1080,7 +1080,7 @@ dx_make_index:
 		root = (struct dx_root *) bh->b_data;
 		
 		extN_add_compat_feature (sb, EXTN_FEATURE_COMPAT_DIR_INDEX);
-		dir->u.extN_i.i_flags |= EXTN_INDEX_FL;
+		EXTN_I(dir)->i_flags |= EXTN_INDEX_FL;
 		bh2 = extN_append (handle, dir, &block, &retval);
 		if (!(bh2))
 		{
@@ -1321,7 +1321,7 @@ static int extN_mkdir(struct inode * dir
 	if (err)
 		goto out_no_entry;
 	dir->i_nlink++;
-	dir->u.extN_i.i_flags &= ~EXTN_INDEX_FL;
+	EXTN_I(dir)->i_flags &= ~EXTN_INDEX_FL;
 	extN_mark_inode_dirty(handle, dir);
 	d_instantiate(dentry, inode);
 out_stop:
@@ -1596,7 +1595,7 @@ static int extN_rmdir (struct inode * di
 	extN_mark_inode_dirty(handle, inode);
 	dir->i_nlink--;
 	inode->i_ctime = dir->i_ctime = dir->i_mtime = CURRENT_TIME;
-	//	dir->u.extN_i.i_flags &= ~EXTN_INDEX_FL;
+	//	EXTN_I(dir)->i_flags &= ~EXTN_INDEX_FL;
 	extN_mark_inode_dirty(handle, dir);
 
 end_rmdir:
@@ -1642,7 +1641,7 @@ static int extN_unlink(struct inode * di
 	if (retval)
 		goto end_unlink;
 	dir->i_ctime = dir->i_mtime = CURRENT_TIME;
-	//	dir->u.extN_i.i_flags &= ~EXTN_INDEX_FL;
+	//	EXTN_I(dir)->i_flags &= ~EXTN_INDEX_FL;
 	extN_mark_inode_dirty(handle, dir);
 	inode->i_nlink--;
 	if (!inode->i_nlink)
@@ -1844,7 +1843,7 @@ static int extN_rename (struct inode * o
 		new_inode->i_ctime = CURRENT_TIME;
 	}
 	old_dir->i_ctime = old_dir->i_mtime = CURRENT_TIME;
-	// old_dir->u.extN_i.i_flags &= ~EXTN_INDEX_FL;
+	// EXTN_I(old_dir)->i_flags &= ~EXTN_INDEX_FL;
 	if (dir_bh) {
 		BUFFER_TRACE(dir_bh, "get_write_access");
 		extN_journal_get_write_access(handle, dir_bh);
@@ -1856,7 +1855,7 @@ static int extN_rename (struct inode * o
 			new_inode->i_nlink--;
 		} else {
 			new_dir->i_nlink++;
-	//		new_dir->u.extN_i.i_flags &= ~EXTN_INDEX_FL;
+	//		EXTN_I(new_dir)->i_flags &= ~EXTN_INDEX_FL;
 			extN_mark_inode_dirty(handle, new_dir);
 		}
 	}
--- linux-2.4.17/fs/extN/super.c.orig	Fri Dec 21 10:41:55 2001
+++ linux-2.4.17/fs/extN/super.c	Fri Mar 22 11:00:41 2002
@@ -1742,7 +1742,7 @@
 	unregister_filesystem(&extN_fs_type);
 }
 
-EXPORT_NO_SYMBOLS;
+EXPORT_SYMBOL(extN_bread);
 
 MODULE_AUTHOR("Remy Card, Stephen Tweedie, Andrew Morton, Andreas Dilger, Theodore Ts'o and others");
 MODULE_DESCRIPTION("Second Extended Filesystem with journaling extensions");
--- ./include/linux/extN_fs.h.orig	Tue May  7 17:06:03 2002
+++ ./include/linux/extN_fs.h	Tue May  7 17:07:11 2002
@@ -17,6 +17,8 @@
 #define _LINUX_EXTN_FS_H
 
 #include <linux/types.h>
+#include <linux/extN_fs_sb.h>
+#include <linux/extN_fs_i.h>
 
 /*
  * The second extended filesystem constants/structures
@@ -86,8 +88,8 @@
 #define EXTN_MIN_BLOCK_LOG_SIZE		  10
 
 #ifdef __KERNEL__
-#define EXTN_SB(sb)	(&((sb)->u.extN_sb))
-#define EXTN_I(inode)	(&((inode)->u.extN_i))
+#define EXTN_SB(sb)	((struct extN_sb_info *)&((sb)->u.generic_sbp))
+#define EXTN_I(inode)	((struct extN_inode_info *)&((inode)->u.generic_ip))
 
 #define EXTN_BLOCK_SIZE(s)		((s)->s_blocksize)
 #define EXTN_BLOCK_SIZE_BITS(s)		((s)->s_blocksize_bits)
@@ -445,7 +445,9 @@
 };
 
 #define NEXT_ORPHAN(inode) EXTN_I(inode)->i_dtime
-#define orphan_list_entry(l) list_entry((l), struct inode, u.extN_i.i_orphan)
+#define orphan_list_entry(l) ((struct inode *)((char *)(l) - \
+		(unsigned long)(offsetof(struct inode, u.generic_ip) + \
+				offsetof(struct extN_inode_info, i_orphan))))
 
 /*
  * Codes for operating systems
@@ -581,7 +583,7 @@ struct extN_dir_entry_2 {
 #ifdef CONFIG_EXTN_INDEX
   enum {extN_dx = 1};
   #define dx_static static
-  #define is_dx(dir) ((dir)->u.extN_i.i_flags & EXTN_INDEX_FL)
+  #define is_dx(dir) (EXTN_I(dir)->i_flags & EXTN_INDEX_FL)
 #define EXTN_DIR_LINK_MAX(dir) (!is_dx(dir) && (dir)->i_nlink >= EXTN_LINK_MAX)
 #define EXTN_DIR_LINK_EMPTY(dir) ((dir)->i_nlink == 2 || (dir)->i_nlink == 1)
 #else
