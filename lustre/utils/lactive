#!/usr/bin/env python
#
#  Copyright (C) 2002 Cluster File Systems, Inc.
#   Author: Robert Read <rread@clusterfs.com>
#   This file is part of Lustre, http://www.lustre.org.
#
#   Lustre is free software; you can redistribute it and/or
#   modify it under the terms of version 2 of the GNU General Public
#   License as published by the Free Software Foundation.
#
#   Lustre is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with Lustre; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

# Make the new node the active node for all devices it shares with the
# old. The bulk of this code is for figuring out which devices to
# change, and what to change them to.

# XXX add error checking
# XXX make this code less ugly

import sys, getopt, types
import string, os
import ldap
import Lustre

lactive_options = [
    ('ldapurl',"LDAP server URL, eg. ldap://localhost", Lustre.Options.PARAM),
    ('config', "Cluster config name used for LDAP query", Lustre.Options.PARAM),
    ('old', "The old, failed node name", Lustre.Options.PARAM),
    ('new', "The new node name", Lustre.Options.PARAM),
    ]

cl = Lustre.Options("lactive","", lactive_options)
config, args = cl.parse(sys.argv[1:])

base = "config=%s,fs=lustre" % (config.config,)
db = Lustre.LustreDB_LDAP('', {}, base=base, url = config.ldapurl)

old = db.lookup_name(config.old)
new = db.lookup_name(config.new)

print "old:", old.getUUID()
print "new:",  new.getUUID()

def fatal(*args):
    msg = string.join(map(str,args))
    print "! " + msg
    sys.exit(1)

# find all the targets on the failed node and, change the active
# pointers to point to the devices on the new node.
prof_list = old.get_refs('profile')
for prof_uuid in prof_list:
    prof_db = db.lookup(prof_uuid)
    if not prof_db:
        fatal("profile:", profile, "not found.")
    for ref_class, ref_uuid in prof_db.get_all_refs(): 
        if ref_class in ('osd', 'mdsdev'):
            devdb = db.lookup(ref_uuid)
            tgtuuid = devdb.get_first_ref('target')
            active_uuid = old.get_active_dev(tgtuuid)
            if ref_uuid != active_uuid:
                continue
            inactive_uuid = new.get_tgt_dev(tgtuuid)
            print ("%s: changing active %s:%s to %s:%s"
                   % (tgtuuid, config.old, active_uuid,
                      config.new, inactive_uuid))
            db.update_active(tgtuuid, inactive_uuid)



