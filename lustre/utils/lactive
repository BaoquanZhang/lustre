#!/usr/bin/env python
#
#  Copyright (C) 2002 Cluster File Systems, Inc.
#   Author: Robert Read <rread@clusterfs.com>
#   This file is part of Lustre, http://www.lustre.org.
#
#   Lustre is free software; you can redistribute it and/or
#   modify it under the terms of version 2 of the GNU General Public
#   License as published by the Free Software Foundation.
#
#   Lustre is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with Lustre; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

# Make the new node the active node for all devices it shares with the
# old. The bulk of this code is for figuring out which devices to
# change, and what to change them to.

# XXX add error checking
# XXX make this code less ugly

import sys, getopt, types
import string, os
import ldap
import Lustre


def usage():
    print """usage: lactive --ldapurl <ldapurl> --old <name> --new <name>"""
    sys.exit(1)
    
def parse_cmdline(argv):
    short_opts = "h"
    long_opts = ["help", "new=", "old=", "ldapurl=",]
    opts = []
    args = []
    config = {}

    try:
        opts, args = getopt.getopt(argv, short_opts, long_opts)
    except getopt.error:
        print "invalid opt"
        usage()
    
    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
        if o in ("--old",):
            config['old'] = a
        if o in ("--new",):
            config['new'] = a
        if o in ("--ldapurl",):
            config['ldapurl'] = a

    return config

def get_active(db, tgtuuid):
    tgt = db.lookup(tgtuuid)
    tgt_dev_uuid =tgt.get_first_ref('active')
    return tgt_dev_uuid

def get_inactive(db, tgtuuid):
    prof_list = db.get_refs('profile')
    for prof_uuid in prof_list:
        prof_db = db.lookup(prof_uuid)
        if not prof_db:
            panic("profile:", profile, "not found.")
        for ref_class, ref_uuid in prof_db.get_all_refs(): 
            if ref_class in ('osdRef', 'mdsdevRef'):
                devdb = db.lookup(ref_uuid)
                uuid = devdb.get_first_ref('target')
                if tgtuuid == uuid:
                    return ref_uuid
    return None


config = parse_cmdline(sys.argv[1:])

db = Lustre.LustreDB_LDAP('', {}, base="config=test23,fs=lustre",
                          url = config['ldapurl'])

old = db.lookup_name(config['old'])
new = db.lookup_name(config['new'])

print "old:", old.getUUID()
print "new:",  new.getUUID()

# find all the targets on the failed node and, change the active
# pointers to point to the devices on the new node.  
prof_list = old.get_refs('profile')
for prof_uuid in prof_list:
    prof_db = db.lookup(prof_uuid)
    if not prof_db:
        panic("profile:", profile, "not found.")
    for ref_class, ref_uuid in prof_db.get_all_refs(): 
        if ref_class in ('osdRef', 'mdsdevRef'):
            devdb = db.lookup(ref_uuid)
            tgtuuid = devdb.get_first_ref('target')
            active_uuid = get_active(old, tgtuuid)
            if ref_uuid != active_uuid:
                continue
            inactive_uuid = get_inactive(new, tgtuuid)
            print ("%s: changing active %s:%s to %s:%s"
                   % (tgtuuid, config['old'], active_uuid,
                      config['new'], inactive_uuid))
            db.update_active(tgtuuid, inactive_uuid)



