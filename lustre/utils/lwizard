#! /bin/sh
# Copyright (C) 2003  Cluster File Systems, Inc.
# Create a Lustre configuration file
#
# Usage: lwizard
#
# Jerrifer <jerrifer@clusterfs.com>
# wangdi <wangdi@clusterfs.com>

# fatal error to exit
fatal()
{
        if [ "$#" -gt "1" ]; then
		echo
                echo "$2"
                exit 1
        fi

        exit 1
}

#print usage and exit 
usage()
{
        cat <<EOF
Usage: ${0##*/} [OPTIONS]...

${##*/} asks the user questions about their cluster configuration, and
writes an appropriate configuration file to config.xml.

Options:
  -o, --file=CONFIG_FILE
       write configuration to CONFIG_FILE (default: config.xml)
  --stripe_size=SIZE
       specify the size (in KB) of each stripe on an OST (default: 64)
  --stripe_cnt=COUNT
       sepcify the number of OSTs files are striped to (default: 1)
  --help
       to get this help
EOF

   exit 0     
}

# check if $1 is a number
check_number()
{
        local num=$(expr "$1" : "[0-9]*$")
        if [ $num -gt "0" ]; then 
                return 0 
        fi
     
        return 1
}

#parse options of this shell
get_option()
{
        local long_options="file:,mds_size:,ost_size:,stripe_size"
        local options
    
        long_options="$long_options:,stripe_cnt:,stripe_pattern"
        options=$(getopt -o o:h --long "$long_options":,help -- "$@")

        if [ $? -ne 0 ] ; then
                usage
        fi
        eval set -- "$options"
     
        while true ; do
        case "$1" in
                -o | --file)
                        CONFIG_FILE=$2
                        shift 2
			;;
                --stripe_size)
                        STRIPE_SIZE=$(($2 * 1024))
                        check_number $STRIPE_SIZE || fatal 1 "bad stripe_size"
                        shift 2
			;;
                --stripe_cnt)
                        STRIPE_CNT=$2
                        check_number $STRIPE_CNT || fatal 1 "bad stripe_cnt"
                        shift 2
			;;
                -h | --help)
                        usage
                        ;;
                --)
                        shift 1
                        break
        esac
        done 
}

# if $1 in $2
in_list()
{
        local node
  
        for node in $2 ; do
                [ "$1" = "$node" ] && return 0
        done
        return 1
}


#ask user some questions to add a device 
add_device()
{
	local hostnames
	local device

	echo "Creating $1 \"$1$2\"..."
	echo -n "Please enter the hostname(s) for $1$2: "
	read hostnames

	if [ -z "$hostnames" ] ; then
	    return 1
	fi

	for hostname in $hostnames ; do
	    device=
	    while [ -z "$device" ] ; do
		echo -n "Please enter the $1$2 device for ${hostname}: "
		read device
	    done
	    newdev="$hostname:$device:$2:$1$2:$CURRENT_MDS:$CURRENT_LOV"
	    DEVICE_LIST="$DEVICE_LIST $newdev"
	done

        return 0 
}

cur_mds_id=1

# get mds information
add_mds()
{
	CURRENT_LOV=
	CURRENT_MDS=
	add_device "mds" "$cur_mds_id" || return 1
	CURRENT_LOV="lov$cur_mds_id"
	CURRENT_MDS="mds$cur_mds_id"

	DEVICE_LIST="$DEVICE_LIST *:*:lov:$CURRENT_LOV:$CURRENT_MDS:"

	(( cur_mds_id++ ))
        return 0
}

cur_ost_id=1

# ask user to add ost 
add_ost()
{
	# We have to add one...
	while ! add_device "ost" "$cur_ost_id" ; do
	    true
	done

	(( cur_ost_id++ ))

	# ...and maybe more
	while add_device "ost" "$cur_ost_id" ; do
		(( cur_ost_id++ ))
        done
        return 0
}

cur_cli_id=1

# ask user to add client to lustre
add_client()
{
	echo -n "Please enter the clients' mountpoint (/mnt/lustre): "
	read mtpt
	[ -z "$mtpt" ] && mtpt="/mnt/lustre"
	newdev="*:$mtpt:client:client$cur_cli_id:$CURRENT_MDS:$CURRENT_LOV"
	DEVICE_LIST="$DEVICE_LIST $newdev"
	(( cur_cli_id++ ))
        return 0
}

#save node config into config file 
add_node()
{
        local node=$1
        local nettype=$DEFAULT_NETTYPE
        local config_file=$2
      
        in_list "$node" "$NODE_LIST" && return 0 
        NODE_LIST="$NODE_LIST $node" 
 
        $LMC -m "$config_file" --add node --node "$node" || return 1 
	$LMC -m "$config_file" --add net --node "$node" --nid "$node" \
             --nettype "$nettype" || return 1 
        return 0 
} 

#get hostname, device , device_id and device name 
#from mds node 
get_name_in_list()
{
	HOST_NAME=$(echo $1 | awk -F: '{ print $1 }')
	DEVICE=$(echo $1 | awk -F: '{ print $2 }')
	DEVICE_ID=$(echo $1 | awk -F: '{ print $3 }')
	DEVICE_NAME=$(echo $1 | awk -F: '{ print $4 }')
	DEVICE_MDS=$(echo $1 | awk -F: '{ print $5 }')
	DEVICE_LOV=$(echo $1 | awk -F: '{ print $6 }')
}

# following user input to create xml config file 
create_config()
{
        local config_file=$1 

	for device in $DEVICE_LIST ; do
		get_name_in_list $device
		echo -n " $DEVICE_NAME"
		case $DEVICE_NAME in
		    mds*)
			add_node "$HOST_NAME" "$config_file" || return 1
			$LMC -m "$config_file" --add mds --node "$HOST_NAME" \
			    --mds "$DEVICE_NAME" \
			    --nid "$HOST_NAME"  --fstype "$DEFAULT_FSTYPE" \
			    --dev "$DEVICE" || return 1
			;;
		    lov*)
			$LMC -m "$config_file" --add lov \
			    --lov "$DEVICE_NAME" \
			    --mds "$DEVICE_MDS" \
			    --stripe_sz "$STRIPE_SIZE" \
			    --stripe_cnt "$STRIPE_CNT" \
			    --stripe_pattern "$STRIPE_PATTERN" || return 1
			;;
		    ost*)
			add_node "$HOST_NAME" "$config_file" || return 1
			$LMC -m "$config_file" --add ost --node "$HOST_NAME" \
			    --ost "$DEVICE_NAME" \
			    --lov "$DEVICE_LOV" --fstype "$DEFAULT_FSTYPE" \
			    --dev "$DEVICE" || return 1
			;;
		    client*)
			add_node "$DEVICE_NAME" "$config_file" || return 1
			$LMC -m "$config_file" --add mtpt \
			    --node "$DEVICE_NAME" \
			    --mds "$DEVICE_MDS" \
			    --lov "$DEVICE_LOV" --path "$DEVICE" || return 1
			;;
		esac
        done
	echo
        return 0 
}

#parse options 
get_option "$@"

#some default definitions
LMC=${LMC:-"/usr/sbin/lmc"}
CONFIG_FILE=${CONFIG_FILE:-"config.xml"}
TMP_CONFIG_FILE=${TMP_CONFIG_FILE:-".config.xml.tmp"}
DEFAULT_FSTYPE=${DEFAULT_FSTYPE:-"ext3"}
DEFAULT_NETTYPE=${DEFAULT_NETTYPE:-"tcp"}
DEFAULT_MNTPT=${DEFAULT_MNTPT:-"/mnt/lustre"}
STRIPE_SIZE=${STRIPE_SIZE:-65536}
STRIPE_CNT=${STRIPE_CNT:-1}
STRIPE_PATTERN=${STRIPE_PATTERN:-0}
ANSWER="yes no"

#print program information
cat <<EOF
This script will help you create a Lustre configuration file.

EOF

CURRENT_LOV=
MDS_LIST=
OST_LIST=
CLIENT_LIST=

while add_mds ; do
   add_ost
   add_client
done

rm -f "$TMP_CONFIG_FILE"
echo -n "Saving configuration to $CONFIG_FILE:"
create_config "$TMP_CONFIG_FILE" || \
    fatal 1 "There was an error saving the config file."
mv -f "$TMP_CONFIG_FILE" "$CONFIG_FILE" || \
    fatal 1 "There was an error saving the config file."

cat <<EOF

Your configuration has been saved to $CONFIG_FILE.
EOF
exit 0
