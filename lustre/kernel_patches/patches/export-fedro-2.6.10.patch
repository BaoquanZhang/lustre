Index: linux-2.6.10/net/core/sock.c
===================================================================
--- linux-2.6.10.orig/net/core/sock.c	2004-12-25 05:35:23.000000000 +0800
+++ linux-2.6.10/net/core/sock.c	2005-03-31 20:42:01.084364672 +0800
@@ -1359,6 +1359,7 @@
 EXPORT_SYMBOL(sk_alloc);
 EXPORT_SYMBOL(sk_free);
 EXPORT_SYMBOL(sk_send_sigurg);
+EXPORT_SYMBOL(sock_getsockopt);
 EXPORT_SYMBOL(sock_alloc_send_pskb);
 EXPORT_SYMBOL(sock_alloc_send_skb);
 EXPORT_SYMBOL(sock_init_data);
Index: linux-2.6.10/fs/dcache.c
===================================================================
--- linux-2.6.10.orig/fs/dcache.c	2005-03-31 19:44:53.000000000 +0800
+++ linux-2.6.10/fs/dcache.c	2005-03-31 22:02:08.130582568 +0800
@@ -1691,6 +1691,7 @@
 
 EXPORT_SYMBOL(d_alloc);
 EXPORT_SYMBOL(d_alloc_anon);
+EXPORT_SYMBOL(is_subdir);
 EXPORT_SYMBOL(d_alloc_root);
 EXPORT_SYMBOL(d_delete);
 EXPORT_SYMBOL(d_find_alias);
Index: linux-2.6.10/fs/namespace.c
===================================================================
--- linux-2.6.10.orig/fs/namespace.c	2005-03-31 19:44:54.000000000 +0800
+++ linux-2.6.10/fs/namespace.c	2005-03-31 22:03:44.906870336 +0800
@@ -1239,6 +1239,7 @@
 		mntput(old_pwdmnt);
 	}
 }
+EXPORT_SYMBOL(set_fs_pwd);
 
 static void chroot_fs_refs(struct nameidata *old_nd, struct nameidata *new_nd)
 {
Index: linux-2.6.10/fs/file_table.c
===================================================================
--- linux-2.6.10.orig/fs/file_table.c	2004-12-25 05:33:50.000000000 +0800
+++ linux-2.6.10/fs/file_table.c	2005-03-31 20:44:40.924065344 +0800
@@ -196,6 +196,7 @@
 		file_free(file);
 	}
 }
+EXPORT_SYMBOL(put_filp);
 
 void file_move(struct file *file, struct list_head *list)
 {
Index: linux-2.6.10/kernel/sched.c
===================================================================
--- linux-2.6.10.orig/kernel/sched.c	2005-03-31 15:57:21.000000000 +0800
+++ linux-2.6.10/kernel/sched.c	2005-03-31 22:00:30.616406976 +0800
@@ -2942,6 +2942,19 @@
 
 EXPORT_SYMBOL(sleep_on_timeout);
 
+void fastcall __sched sleep_on(wait_queue_head_t *q)
+{
+        SLEEP_ON_VAR
+
+        current->state = TASK_UNINTERRUPTIBLE;
+
+        SLEEP_ON_HEAD
+        schedule();
+        SLEEP_ON_TAIL
+}
+
+EXPORT_SYMBOL(sleep_on);
+
 void set_user_nice(task_t *p, long nice)
 {
 	unsigned long flags;
Index: linux-2.6.10/kernel/exit.c
===================================================================
--- linux-2.6.10.orig/kernel/exit.c	2005-03-31 19:44:52.509587264 +0800
+++ linux-2.6.10/kernel/exit.c	2005-03-31 20:47:18.034180976 +0800
@@ -515,6 +515,7 @@
 {
 	__exit_mm(tsk);
 }
+EXPORT_SYMBOL(exit_mm);
 
 static inline void choose_new_parent(task_t *p, task_t *reaper, task_t *child_reaper)
 {
