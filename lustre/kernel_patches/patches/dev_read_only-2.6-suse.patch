--- linux-2.6.5-suse.orig/drivers/block/ll_rw_blk.c.naked	2005-04-07 17:43:49.143050888 -0700
+++ linux-2.6.5/drivers/block/ll_rw_blk.c	2005-03-16 10:57:38.000000000 -0800
@@ -2458,6 +2458,8 @@ static inline void blk_partition_remap(s
 	}
 }
 
+int dev_check_rdonly(struct block_device *bdev);
+
 /**
  * generic_make_request: hand a buffer to its device driver for I/O
  * @bio:  The bio describing the location in memory and on the device.
@@ -2546,6 +2548,13 @@ end_io:
 		if (test_bit(QUEUE_FLAG_DEAD, &q->queue_flags))
 			goto end_io;
 
+		/* this is cfs's dev_rdonly check */
+		if (bio->bi_rw == WRITE &&
+		                dev_check_rdonly(bio->bi_bdev)) {
+		        bio_endio(bio, bio->bi_size, 0);
+		        break;
+		}
+
 		/*
 		 * If this device has partitions, remap block n
 		 * of partition p to block n+start(p) of the disk.
@@ -3078,6 +3087,91 @@ void swap_io_context(struct io_context *
 }
 
 /*
+ * Debug code for turning block devices "read-only" (will discard writes
+ * silently).  This is for filesystem crash/recovery testing.
+ */
+struct deventry {
+        dev_t dev;
+        struct deventry *next;
+};
+
+static struct deventry *devlist = NULL;
+static spinlock_t devlock = SPIN_LOCK_UNLOCKED; 
+
+int dev_check_rdonly(struct block_device *bdev) 
+{
+        struct deventry *cur;
+        if (!bdev) return 0;
+        spin_lock(&devlock);
+        cur = devlist;
+        while(cur) {
+                if (bdev->bd_dev == cur->dev) {
+                        spin_unlock(&devlock);
+                        return 1;
+                }
+                cur = cur->next;
+        }
+        spin_unlock(&devlock);
+        return 0;
+}
+
+void dev_set_rdonly(struct block_device *bdev)
+{
+        struct deventry *newdev, *cur;
+
+        if (!bdev) 
+	        return;
+        newdev = kmalloc(sizeof(struct deventry), GFP_KERNEL);
+        if (!newdev) 
+	        return;
+
+        spin_lock(&devlock);
+        cur = devlist;
+        while(cur) {
+                if (bdev->bd_dev == cur->dev) {
+                        spin_unlock(&devlock);
+                        kfree(newdev);
+                        return;
+                }
+                cur = cur->next;
+        }
+        newdev->dev = bdev->bd_dev;
+        newdev->next = devlist;
+        devlist = newdev;
+        spin_unlock(&devlock);
+        printk(KERN_WARNING "Turning device %s read-only\n",
+               bdev->bd_disk ? bdev->bd_disk->disk_name : "?");
+}
+
+void dev_clear_rdonly(struct block_device *bdev) 
+{
+        struct deventry *cur, *last = NULL;
+        if (!bdev) return;
+        spin_lock(&devlock);
+        cur = devlist;
+        while(cur) {
+                if (bdev->bd_dev == cur->dev) {
+                        if (last) 
+                                last->next = cur->next;
+                        else
+                                devlist = cur->next;
+                        spin_unlock(&devlock);
+                        kfree(cur);
+                        printk(KERN_WARNING "Removing read-only on %s\n",
+			       bdev->bd_disk ? bdev->bd_disk->disk_name : "?");
+			return;
+                }
+                last = cur;
+                cur = cur->next;
+        }
+        spin_unlock(&devlock);
+}
+
+EXPORT_SYMBOL(dev_set_rdonly);
+EXPORT_SYMBOL(dev_clear_rdonly);
+EXPORT_SYMBOL(dev_check_rdonly);
+
+/*
  * sysfs parts below
  */
 struct queue_sysfs_entry {
--- linux-2.6.5-suse.orig/include/linux/fs.h	2004-11-11 07:28:45.000000000 -0800
+++ linux-2.6.5/include/linux/fs.h	2005-04-07 18:12:42.772181591 -0700
@@ -1385,6 +1385,10 @@ extern void file_kill(struct file *f);
 struct bio;
 extern int submit_bio(int, struct bio *);
 extern int bdev_read_only(struct block_device *);
+#define HAVE_CLEAR_RDONLY_ON_PUT
+void dev_set_rdonly(kdev_t dev);
+int dev_check_rdonly(kdev_t dev);
+void dev_clear_rdonly(kdev_t dev);
 extern int set_blocksize(struct block_device *, int);
 extern int sb_set_blocksize(struct super_block *, int);
 extern int sb_min_blocksize(struct super_block *, int);
--- linux-2.6.5-suse.orig/fs/block_dev.c	2004-11-11 07:28:30.000000000 -0800
+++ linux-2.6.5/fs/block_dev.c	2005-04-07 18:14:27.948304347 -0700
@@ -739,6 +739,7 @@ int blkdev_put(struct block_device *bdev
 	}
 	unlock_kernel();
 	up(&bdev->bd_sem);
+	dev_clear_rdonly(to_kdev_t(bdev->bd_dev));
 	bdput(bdev);
 	return ret;
 }
