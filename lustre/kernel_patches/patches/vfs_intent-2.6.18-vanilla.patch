Index: linux-2.6/fs/inode.c
===================================================================
--- linux-2.6.orig/fs/inode.c	2006-08-31 11:17:39.000000000 +0800
+++ linux-2.6/fs/inode.c	2006-08-31 11:23:48.000000000 +0800
@@ -234,6 +234,7 @@ void __iget(struct inode * inode)
 	inodes_stat.nr_unused--;
 }
 
+EXPORT_SYMBOL(__iget);
 /**
  * clear_inode - clear an inode
  * @inode: inode to clear
Index: linux-2.6/fs/open.c
===================================================================
--- linux-2.6.orig/fs/open.c	2006-08-31 11:17:39.000000000 +0800
+++ linux-2.6/fs/open.c	2006-08-31 11:59:09.000000000 +0800
@@ -226,11 +226,12 @@ static long do_sys_truncate(const char _
 	struct inode * inode;
 	int error;
 
+	intent_init(&nd.intent.open, IT_GETATTR);
 	error = -EINVAL;
 	if (length < 0)	/* sorry, but loff_t says... */
 		goto out;
 
-	error = user_path_walk(path, &nd);
+	error = user_path_walk_it(path, &nd);
 	if (error)
 		goto out;
 	inode = nd.dentry->d_inode;
@@ -495,6 +496,7 @@ asmlinkage long sys_faccessat(int dfd, c
 	int old_fsuid, old_fsgid;
 	kernel_cap_t old_cap;
 	int res;
+	intent_init(&nd.intent.open, IT_GETATTR);
 
 	if (mode & ~S_IRWXO)	/* where's F_OK, X_OK, W_OK, R_OK? */
 		return -EINVAL;
@@ -519,7 +521,7 @@ asmlinkage long sys_faccessat(int dfd, c
 	else
 		current->cap_effective = current->cap_permitted;
 
-	res = __user_walk_fd(dfd, filename, LOOKUP_FOLLOW|LOOKUP_ACCESS, &nd);
+	res = __user_walk_fd_it(dfd, filename, LOOKUP_FOLLOW|LOOKUP_ACCESS, &nd);
 	if (!res) {
 		res = vfs_permission(&nd, mode);
 		/* SuS v2 requires we report a read only fs too */
@@ -545,8 +547,9 @@ asmlinkage long sys_chdir(const char __u
 {
 	struct nameidata nd;
 	int error;
+	intent_init(&nd.intent.open, IT_GETATTR);
 
-	error = __user_walk(filename, LOOKUP_FOLLOW|LOOKUP_DIRECTORY, &nd);
+	error = __user_walk_it(filename, LOOKUP_FOLLOW|LOOKUP_DIRECTORY, &nd);
 	if (error)
 		goto out;
 
@@ -596,8 +599,9 @@ asmlinkage long sys_chroot(const char __
 {
 	struct nameidata nd;
 	int error;
+	intent_init(&nd.intent.open, IT_GETATTR);
 
-	error = __user_walk(filename, LOOKUP_FOLLOW | LOOKUP_DIRECTORY | LOOKUP_NOALT, &nd);
+	error = __user_walk_it(filename, LOOKUP_FOLLOW | LOOKUP_DIRECTORY | LOOKUP_NOALT, &nd);
 	if (error)
 		goto out;
 
@@ -823,6 +827,7 @@ static struct file *__dentry_open(struct
 		error = open(inode, f);
 		if (error)
 			goto cleanup_all;
+		intent_release(f->f_it);
 	}
 
 	f->f_flags &= ~(O_CREAT | O_EXCL | O_NOCTTY | O_TRUNC);
@@ -849,6 +854,7 @@ cleanup_all:
 	f->f_dentry = NULL;
 	f->f_vfsmnt = NULL;
 cleanup_file:
+	intent_release(f->f_it);
 	put_filp(f);
 	dput(dentry);
 	mntput(mnt);
@@ -874,6 +880,7 @@ static struct file *do_filp_open(int dfd
 {
 	int namei_flags, error;
 	struct nameidata nd;
+	intent_init(&nd.intent.open, IT_OPEN);
 
 	namei_flags = flags;
 	if ((namei_flags+1) & O_ACCMODE)
@@ -944,6 +951,7 @@ struct file *nameidata_to_filp(struct na
 
 	/* Pick up the filp from the open intent */
 	filp = nd->intent.open.file;
+	filp->f_it = &nd->intent.open;
 	/* Has the filesystem initialised the file for us? */
 	if (filp->f_dentry == NULL)
 		filp = __dentry_open(nd->dentry, nd->mnt, flags, filp, NULL);
Index: linux-2.6/fs/nfsctl.c
===================================================================
--- linux-2.6.orig/fs/nfsctl.c	2006-08-31 11:17:39.000000000 +0800
+++ linux-2.6/fs/nfsctl.c	2006-08-31 11:23:48.000000000 +0800
@@ -25,6 +25,7 @@ static struct file *do_open(char *name, 
 	struct nameidata nd;
 	int error;
 
+	intent_init(&nd.intent.open, IT_OPEN);
 	nd.mnt = do_kern_mount("nfsd", 0, "nfsd", NULL);
 
 	if (IS_ERR(nd.mnt))
Index: linux-2.6/fs/namei.c
===================================================================
--- linux-2.6.orig/fs/namei.c	2006-08-31 11:17:39.000000000 +0800
+++ linux-2.6/fs/namei.c	2006-08-31 11:59:09.000000000 +0800
@@ -344,8 +344,19 @@ int deny_write_access(struct file * file
 	return 0;
 }
 
+void intent_release(struct lookup_intent *it)
+{
+	if (!it)
+		return;
+	if (it->it_magic != INTENT_MAGIC)
+		return;
+	if (it->it_op_release)
+		it->it_op_release(it);
+}
+
 void path_release(struct nameidata *nd)
 {
+	intent_release(&nd->intent);
 	dput(nd->dentry);
 	mntput(nd->mnt);
 }
@@ -447,8 +458,12 @@ static struct dentry * real_lookup(struc
 {
 	struct dentry * result;
 	struct inode *dir = parent->d_inode;
+	int counter = 0;
 
 	mutex_lock(&dir->i_mutex);
+again:
+	counter++;
+
 	/*
 	 * First re-do the cached lookup just in case it was created
 	 * while we waited for the directory semaphore..
@@ -482,13 +497,16 @@ static struct dentry * real_lookup(struc
 	 * Uhhuh! Nasty case: the cache was re-populated while
 	 * we waited on the semaphore. Need to revalidate.
 	 */
-	mutex_unlock(&dir->i_mutex);
 	if (result->d_op && result->d_op->d_revalidate) {
 		if (!result->d_op->d_revalidate(result, nd) && !d_invalidate(result)) {
 			dput(result);
-			result = ERR_PTR(-ENOENT);
+			if (counter > 10)
+				result = ERR_PTR(-ESTALE);
+			if (!IS_ERR(result))
+				goto again;
 		}
 	}
+	mutex_unlock(&dir->i_mutex);
 	return result;
 }
 
@@ -516,7 +534,9 @@ walk_init_root(const char *name, struct 
 static __always_inline int __vfs_follow_link(struct nameidata *nd, const char *link)
 {
 	int res = 0;
+	struct lookup_intent it = nd->intent.open;
 	char *name;
+
 	if (IS_ERR(link))
 		goto fail;
 
@@ -526,6 +546,10 @@ static __always_inline int __vfs_follow_
 			/* weird __emul_prefix() stuff did it */
 			goto out;
 	}
+	intent_init(&nd->intent.open, it.it_op);
+	nd->intent.open.it_flags = it.it_flags;
+	nd->intent.open.it_create_mode = it.it_create_mode;
+	nd->intent.open.file = it.file;
 	res = link_path_walk(link, nd);
 out:
 	if (nd->depth || res || nd->last_type!=LAST_NORM)
@@ -778,6 +802,33 @@ fail:
 	return PTR_ERR(dentry);
 }
 
+static int revalidate_special(struct nameidata *nd)
+{
+	struct dentry *dentry = nd->dentry;
+	int err, counter = 0;
+
+ revalidate_again:
+	if (!dentry->d_op || !dentry->d_op->d_revalidate)
+		return 0;
+	if (!dentry->d_op->d_revalidate(dentry, nd)) {
+		struct dentry *new;
+		if ((err = permission(dentry->d_parent->d_inode, MAY_EXEC, nd)))
+			return err;
+		new = real_lookup(dentry->d_parent, &dentry->d_name, nd);
+		if (IS_ERR(new))
+			return PTR_ERR(new);
+		d_invalidate(dentry);
+		dput(dentry);
+		nd->dentry = dentry = new;
+		counter++;
+		if (counter < 10)
+			goto revalidate_again;
+		//printk("excessive revalidate_it loops\n");
+		return -ESTALE;
+	}
+	return 0;
+}
+
 /*
  * Name resolution.
  * This is the basic name resolution function, turning a pathname into
@@ -874,7 +925,11 @@ static fastcall int __link_path_walk(con
 			goto out_dput;
 
 		if (inode->i_op->follow_link) {
+			int save_flags = nd->flags;
+			nd->flags |= LOOKUP_LINK_NOTLAST;
 			err = do_follow_link(&next, nd);
+			if (!(save_flags & LOOKUP_LINK_NOTLAST))
+				nd->flags &= ~LOOKUP_LINK_NOTLAST;
 			if (err)
 				goto return_err;
 			err = -ENOENT;
@@ -909,6 +964,23 @@ last_component:
 				inode = nd->dentry->d_inode;
 				/* fallthrough */
 			case 1:
+				nd->flags |= LOOKUP_LAST;
+				err = revalidate_special(nd);
+				nd->flags &= ~LOOKUP_LAST;
+				if (!nd->dentry->d_inode)
+					err = -ENOENT;
+				if (err) {
+					path_release(nd);
+					goto return_err;
+				}
+				if (lookup_flags & LOOKUP_DIRECTORY) {
+					err = -ENOTDIR;
+					if(!nd->dentry->d_inode->i_op ||
+					  !nd->dentry->d_inode->i_op->lookup) {
+						path_release(nd);
+						goto return_err;
+					}
+				}
 				goto return_reval;
 		}
 		if (nd->dentry->d_op && nd->dentry->d_op->d_hash) {
@@ -916,7 +988,9 @@ last_component:
 			if (err < 0)
 				break;
 		}
+		nd->flags |= LOOKUP_LAST;
 		err = do_lookup(nd, &this, &next);
+		nd->flags &= ~LOOKUP_LAST;
 		if (err)
 			break;
 		inode = next.dentry->d_inode;
@@ -1268,7 +1342,7 @@ static struct dentry *lookup_hash(struct
 }
 
 /* SMP-safe */
-struct dentry * lookup_one_len(const char * name, struct dentry * base, int len)
+struct dentry * lookup_one_len_it(const char * name, struct dentry * base, int len, struct nameidata *nd)
 {
 	unsigned long hash;
 	struct qstr this;
@@ -1288,11 +1362,17 @@ struct dentry * lookup_one_len(const cha
 	}
 	this.hash = end_name_hash(hash);
 
-	return __lookup_hash(&this, base, NULL);
+	return __lookup_hash(&this, base, nd);
 access:
 	return ERR_PTR(-EACCES);
 }
 
+struct dentry * lookup_one_len(const char * name, struct dentry * base, int len)
+{
+ 	return lookup_one_len_it(name, base, len, NULL);
+}
+
+
 /*
  *	namei()
  *
@@ -1304,8 +1384,9 @@ access:
  * that namei follows links, while lnamei does not.
  * SMP-safe
  */
-int fastcall __user_walk_fd(int dfd, const char __user *name, unsigned flags,
-			    struct nameidata *nd)
+
+int fastcall __user_walk_fd_it(int dfd, const char __user *name, unsigned flags,
+			       struct nameidata *nd)
 {
 	char *tmp = getname(name);
 	int err = PTR_ERR(tmp);
@@ -1317,9 +1398,22 @@ int fastcall __user_walk_fd(int dfd, con
 	return err;
 }
 
+int fastcall __user_walk_fd(int dfd, const char __user *name, unsigned flags,
+			    struct nameidata *nd)
+{
+	intent_init(&nd->intent.open, IT_LOOKUP);
+	return __user_walk_fd_it(dfd, name, flags, nd);
+}
+
+int fastcall __user_walk_it(const char __user *name, unsigned flags, struct nameidata *nd)
+{
+	return __user_walk_fd_it(AT_FDCWD, name, flags, nd);
+}
+
 int fastcall __user_walk(const char __user *name, unsigned flags, struct nameidata *nd)
 {
-	return __user_walk_fd(AT_FDCWD, name, flags, nd);
+	intent_init(&nd->intent.open, IT_LOOKUP);
+	return __user_walk_it(name, flags, nd);
 }
 
 /*
@@ -1600,6 +1694,8 @@ int open_namei(int dfd, const char *path
 	if (flag & O_APPEND)
 		acc_mode |= MAY_APPEND;
 
+ 	nd->intent.open.it_flags = flag;
+ 	nd->intent.open.it_create_mode = mode;
 	/*
 	 * The simplest case - just a plain lookup.
 	 */
@@ -1614,6 +1710,7 @@ int open_namei(int dfd, const char *path
 	/*
 	 * Create - we need to know the parent.
 	 */
+ 	nd->intent.open.it_op |= IT_CREAT;
 	error = path_lookup_create(dfd,pathname,LOOKUP_PARENT,nd,flag,mode);
 	if (error)
 		return error;
@@ -1630,7 +1727,9 @@ int open_namei(int dfd, const char *path
 	dir = nd->dentry;
 	nd->flags &= ~LOOKUP_PARENT;
 	mutex_lock(&dir->d_inode->i_mutex);
+	nd->flags |= LOOKUP_LAST;
 	path.dentry = lookup_hash(nd);
+	nd->flags &= ~LOOKUP_LAST;
 	path.mnt = nd->mnt;
 
 do_last:
@@ -1746,7 +1845,9 @@ do_link:
 	}
 	dir = nd->dentry;
 	mutex_lock(&dir->d_inode->i_mutex);
+	nd->flags |= LOOKUP_LAST;
 	path.dentry = lookup_hash(nd);
+	nd->flags &= ~LOOKUP_LAST;
 	path.mnt = nd->mnt;
 	__putname(nd->last.name);
 	goto do_last;
@@ -2260,6 +2361,9 @@ asmlinkage long sys_linkat(int olddfd, c
 	int error;
 	char * to;
 
+	intent_init(&nd.intent.open, IT_LOOKUP);
+	intent_init(&old_nd.intent.open, IT_LOOKUP);
+
 	if ((flags & ~AT_SYMLINK_FOLLOW) != 0)
 		return -EINVAL;
 
@@ -2267,7 +2371,7 @@ asmlinkage long sys_linkat(int olddfd, c
 	if (IS_ERR(to))
 		return PTR_ERR(to);
 
-	error = __user_walk_fd(olddfd, oldname,
+	error = __user_walk_fd_it(olddfd, oldname,
 			       flags & AT_SYMLINK_FOLLOW ? LOOKUP_FOLLOW : 0,
 			       &old_nd);
 	if (error)
Index: linux-2.6/fs/stat.c
===================================================================
--- linux-2.6.orig/fs/stat.c	2006-08-31 11:17:39.000000000 +0800
+++ linux-2.6/fs/stat.c	2006-08-31 11:23:48.000000000 +0800
@@ -37,7 +37,7 @@ void generic_fillattr(struct inode *inod
 
 EXPORT_SYMBOL(generic_fillattr);
 
-int vfs_getattr(struct vfsmount *mnt, struct dentry *dentry, struct kstat *stat)
+int vfs_getattr_it(struct vfsmount *mnt, struct dentry *dentry, struct lookup_intent *it, struct kstat *stat)
 {
 	struct inode *inode = dentry->d_inode;
 	int retval;
@@ -46,6 +46,8 @@ int vfs_getattr(struct vfsmount *mnt, st
 	if (retval)
 		return retval;
 
+	if (inode->i_op->getattr_it)
+		return inode->i_op->getattr_it(mnt, dentry, it, stat);
 	if (inode->i_op->getattr)
 		return inode->i_op->getattr(mnt, dentry, stat);
 
@@ -60,6 +62,11 @@ int vfs_getattr(struct vfsmount *mnt, st
 	return 0;
 }
 
+int vfs_getattr(struct vfsmount *mnt, struct dentry *dentry, struct kstat *stat)
+{
+	return vfs_getattr_it(mnt, dentry, NULL, stat);
+}
+
 EXPORT_SYMBOL(vfs_getattr);
 
 int vfs_stat_fd(int dfd, char __user *name, struct kstat *stat)
@@ -67,9 +74,10 @@ int vfs_stat_fd(int dfd, char __user *na
 	struct nameidata nd;
 	int error;
 
-	error = __user_walk_fd(dfd, name, LOOKUP_FOLLOW, &nd);
+ 	intent_init(&nd.intent.open, IT_GETATTR);
+	error = __user_walk_fd_it(dfd, name, LOOKUP_FOLLOW, &nd);
 	if (!error) {
-		error = vfs_getattr(nd.mnt, nd.dentry, stat);
+ 		error = vfs_getattr_it(nd.mnt, nd.dentry, &nd.intent.open, stat);
 		path_release(&nd);
 	}
 	return error;
@@ -87,9 +95,10 @@ int vfs_lstat_fd(int dfd, char __user *n
 	struct nameidata nd;
 	int error;
 
-	error = __user_walk_fd(dfd, name, 0, &nd);
+ 	intent_init(&nd.intent.open, IT_GETATTR);
+	error = __user_walk_fd_it(dfd, name, 0, &nd);
 	if (!error) {
-		error = vfs_getattr(nd.mnt, nd.dentry, stat);
+ 		error = vfs_getattr_it(nd.mnt, nd.dentry, &nd.intent.open, stat);
 		path_release(&nd);
 	}
 	return error;
@@ -106,9 +115,12 @@ int vfs_fstat(unsigned int fd, struct ks
 {
 	struct file *f = fget(fd);
 	int error = -EBADF;
+	struct nameidata nd;
+	intent_init(&nd.intent.open, IT_GETATTR);
 
 	if (f) {
-		error = vfs_getattr(f->f_vfsmnt, f->f_dentry, stat);
+		error = vfs_getattr_it(f->f_vfsmnt, f->f_dentry, &nd.intent.open, stat);
+		intent_release(&nd.intent.open);
 		fput(f);
 	}
 	return error;
Index: linux-2.6/fs/namespace.c
===================================================================
--- linux-2.6.orig/fs/namespace.c	2006-08-31 11:17:39.000000000 +0800
+++ linux-2.6/fs/namespace.c	2006-08-31 11:59:07.000000000 +0800
@@ -73,6 +73,7 @@ struct vfsmount *alloc_vfsmnt(const char
 		INIT_LIST_HEAD(&mnt->mnt_share);
 		INIT_LIST_HEAD(&mnt->mnt_slave_list);
 		INIT_LIST_HEAD(&mnt->mnt_slave);
+		INIT_LIST_HEAD(&mnt->mnt_lustre_list);
 		if (name) {
 			int size = strlen(name) + 1;
 			char *newname = kmalloc(size, GFP_KERNEL);
@@ -162,6 +163,7 @@ static void __touch_namespace(struct nam
 
 static void detach_mnt(struct vfsmount *mnt, struct nameidata *old_nd)
 {
+	memset(old_nd, 0, sizeof(*old_nd));
 	old_nd->dentry = mnt->mnt_mountpoint;
 	old_nd->mnt = mnt->mnt_parent;
 	mnt->mnt_parent = mnt;
@@ -280,6 +282,9 @@ static inline void __mntput(struct vfsmo
 {
 	struct super_block *sb = mnt->mnt_sb;
 	dput(mnt->mnt_root);
+	spin_lock(&dcache_lock);
+	list_del(&mnt->mnt_lustre_list);
+	spin_unlock(&dcache_lock);
 	free_vfsmnt(mnt);
 	deactivate_super(sb);
 }
@@ -582,6 +587,8 @@ static int do_umount(struct vfsmount *mn
 	 */
 
 	lock_kernel();
+	if (sb->s_op->umount_lustre)
+		sb->s_op->umount_lustre(sb);
 	if (sb->s_op->umount_begin)
 		sb->s_op->umount_begin(mnt, flags);
 	unlock_kernel();
@@ -914,6 +921,7 @@ static int do_loopback(struct nameidata 
 		return err;
 	if (!old_name || !*old_name)
 		return -EINVAL;
+	intent_init(&old_nd.intent.open, IT_LOOKUP);
 	err = path_lookup(old_name, LOOKUP_FOLLOW, &old_nd);
 	if (err)
 		return err;
@@ -999,6 +1007,7 @@ static int do_move_mount(struct nameidat
 		return -EPERM;
 	if (!old_name || !*old_name)
 		return -EINVAL;
+	intent_init(&old_nd.intent.open, IT_LOOKUP);
 	err = path_lookup(old_name, LOOKUP_FOLLOW, &old_nd);
 	if (err)
 		return err;
@@ -1388,6 +1397,7 @@ long do_mount(char *dev_name, char *dir_
 	int retval = 0;
 	int mnt_flags = 0;
 
+	intent_init(&nd.intent.open, IT_LOOKUP);
 	/* Discard magic */
 	if ((flags & MS_MGC_MSK) == MS_MGC_VAL)
 		flags &= ~MS_MGC_MSK;
Index: linux-2.6/fs/exec.c
===================================================================
--- linux-2.6.orig/fs/exec.c	2006-08-31 11:17:39.000000000 +0800
+++ linux-2.6/fs/exec.c	2006-08-31 11:59:09.000000000 +0800
@@ -127,6 +127,7 @@ asmlinkage long sys_uselib(const char __
 	struct nameidata nd;
 	int error;
 
+	intent_init(&nd.intent.open, IT_OPEN);
 	error = __user_path_lookup_open(library, LOOKUP_FOLLOW, &nd, FMODE_READ|FMODE_EXEC);
 	if (error)
 		goto out;
@@ -477,6 +478,7 @@ struct file *open_exec(const char *name)
 	int err;
 	struct file *file;
 
+	intent_init(&nd.intent.open, IT_OPEN);
 	err = path_lookup_open(AT_FDCWD, name, LOOKUP_FOLLOW, &nd, FMODE_READ|FMODE_EXEC);
 	file = ERR_PTR(err);
 
Index: linux-2.6/include/linux/dcache.h
===================================================================
--- linux-2.6.orig/include/linux/dcache.h	2006-08-31 11:17:39.000000000 +0800
+++ linux-2.6/include/linux/dcache.h	2006-08-31 12:00:07.000000000 +0800
@@ -36,6 +36,9 @@ struct qstr {
 	const unsigned char *name;
 };
 
+struct inode;
+#include <linux/namei.h>
+
 struct dentry_stat_t {
 	int nr_dentry;
 	int nr_unused;
Index: linux-2.6/include/linux/fs.h
===================================================================
--- linux-2.6.orig/include/linux/fs.h	2006-08-31 11:17:39.000000000 +0800
+++ linux-2.6/include/linux/fs.h	2006-08-31 11:59:09.000000000 +0800
@@ -280,6 +280,8 @@ typedef void (dio_iodone_t)(struct kiocb
 #define ATTR_KILL_SUID	2048
 #define ATTR_KILL_SGID	4096
 #define ATTR_FILE	8192
+#define ATTR_RAW       	16384    /* file system, not vfs will massage attrs */
+#define ATTR_FROM_OPEN 	32768    /* called from open path, ie O_TRUNC */
 
 /*
  * This is the Inode Attributes structure, used for notify_change().  It
@@ -533,6 +535,7 @@ struct inode {
 	struct block_device	*i_bdev;
 	struct cdev		*i_cdev;
 	int			i_cindex;
+	void			*i_filterdata;
 
 	__u32			i_generation;
 
@@ -700,6 +703,7 @@ struct file {
 	spinlock_t		f_ep_lock;
 #endif /* #ifdef CONFIG_EPOLL */
 	struct address_space	*f_mapping;
+ 	struct lookup_intent    *f_it;
 };
 extern spinlock_t files_lock;
 #define file_list_lock() spin_lock(&files_lock);
@@ -1100,7 +1104,9 @@ struct inode_operations {
 	void (*truncate) (struct inode *);
 	int (*permission) (struct inode *, int, struct nameidata *);
 	int (*setattr) (struct dentry *, struct iattr *);
+	int (*setattr_raw) (struct inode *, struct iattr *);
 	int (*getattr) (struct vfsmount *mnt, struct dentry *, struct kstat *);
+	int (*getattr_it) (struct vfsmount *, struct dentry *, struct lookup_intent *, struct kstat *);
 	int (*setxattr) (struct dentry *, const char *,const void *,size_t,int);
 	ssize_t (*getxattr) (struct dentry *, const char *, void *, size_t);
 	ssize_t (*listxattr) (struct dentry *, char *, size_t);
@@ -1141,6 +1147,7 @@ struct super_operations {
 	int (*remount_fs) (struct super_block *, int *, char *);
 	void (*clear_inode) (struct inode *);
 	void (*umount_begin) (struct vfsmount *, int);
+	void (*umount_lustre) (struct super_block *);
 
 	int (*show_options)(struct seq_file *, struct vfsmount *);
 	int (*show_stats)(struct seq_file *, struct vfsmount *);
@@ -1363,6 +1370,7 @@ extern int may_umount_tree(struct vfsmou
 extern int may_umount(struct vfsmount *);
 extern void umount_tree(struct vfsmount *, int, struct list_head *);
 extern void release_mounts(struct list_head *);
+struct vfsmount *do_kern_mount(const char *type, int flags, const char *name, void *data);
 extern long do_mount(char *, char *, char *, unsigned long, void *);
 extern struct vfsmount *copy_tree(struct vfsmount *, struct dentry *, int);
 extern void mnt_set_mountpoint(struct vfsmount *, struct dentry *,
@@ -1424,6 +1432,7 @@ extern long do_sys_open(int fdf, const c
 			int mode);
 extern struct file *filp_open(const char *, int, int);
 extern struct file * dentry_open(struct dentry *, struct vfsmount *, int);
+extern struct file * dentry_open_it(struct dentry *, struct vfsmount *, int, struct lookup_intent *);
 extern int filp_close(struct file *, fl_owner_t id);
 extern char * getname(const char __user *);
 
Index: linux-2.6/include/linux/namei.h
===================================================================
--- linux-2.6.orig/include/linux/namei.h	2006-08-31 11:17:39.000000000 +0800
+++ linux-2.6/include/linux/namei.h	2006-08-31 11:23:48.000000000 +0800
@@ -5,10 +5,39 @@
 
 struct vfsmount;
 
+#define IT_OPEN                (1)
+#define IT_CREAT       (1<<1)
+#define IT_READDIR     (1<<2)
+#define IT_GETATTR     (1<<3)
+#define IT_LOOKUP      (1<<4)
+#define IT_UNLINK      (1<<5)
+#define IT_TRUNC       (1<<6)
+#define IT_GETXATTR    (1<<7)
+
+struct lustre_intent_data {
+	int     it_disposition;
+	int     it_status;
+	__u64   it_lock_handle;
+	void    *it_data;
+	int     it_lock_mode;
+};
+
+#define INTENT_MAGIC 0x19620323
+
+#define it_flags flags
+#define it_create_mode create_mode
+#define lookup_intent open_intent
+
 struct open_intent {
-	int	flags;
-	int	create_mode;
-	struct file *file;
+       	int     it_magic;
+       	void    (*it_op_release)(struct open_intent *);
+       	int     it_op;
+       	int     flags;
+       	int     create_mode;
+	struct  file *file;
+       	union {
+                struct lustre_intent_data lustre;
+       	} d;
 };
 
 enum { MAX_NESTED_LINKS = 8 };
@@ -28,6 +57,13 @@ struct nameidata {
 	} intent;
 };
 
+static inline void intent_init(struct lookup_intent *it, int op)
+{
+	memset(it, 0, sizeof(*it));
+	it->it_magic = INTENT_MAGIC;
+	it->it_op = op;
+}
+
 /*
  * Type of the last component on LOOKUP_PARENT
  */
@@ -48,6 +84,8 @@ enum {LAST_NORM, LAST_ROOT, LAST_DOT, LA
 #define LOOKUP_PARENT		16
 #define LOOKUP_NOALT		32
 #define LOOKUP_REVAL		64
+#define LOOKUP_LAST		(0x1000)
+#define LOOKUP_LINK_NOTLAST	(0x2000)
 /*
  * Intent data
  */
@@ -57,10 +95,19 @@ enum {LAST_NORM, LAST_ROOT, LAST_DOT, LA
 
 extern int FASTCALL(__user_walk(const char __user *, unsigned, struct nameidata *));
 extern int FASTCALL(__user_walk_fd(int dfd, const char __user *, unsigned, struct nameidata *));
+extern int FASTCALL(__user_walk_fd_it(int dfd, const char __user *, unsigned, struct nameidata *));
 #define user_path_walk(name,nd) \
 	__user_walk_fd(AT_FDCWD, name, LOOKUP_FOLLOW, nd)
 #define user_path_walk_link(name,nd) \
 	__user_walk_fd(AT_FDCWD, name, 0, nd)
+
+extern int FASTCALL(__user_walk_it(const char __user *name, unsigned flags, struct nameidata *nd));
+#define user_path_walk_it(name,nd) \
+ 	__user_walk_it(name, LOOKUP_FOLLOW, nd)
+#define user_path_walk_link_it(name,nd) \
+ 	__user_walk_it(name, 0, nd)
+extern void intent_release(struct lookup_intent *);
+
 extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));
 extern int FASTCALL(path_walk(const char *, struct nameidata *));
 extern int FASTCALL(link_path_walk(const char *, struct nameidata *));
Index: linux-2.6/include/linux/mount.h
===================================================================
--- linux-2.6.orig/include/linux/mount.h	2006-08-31 11:17:40.000000000 +0800
+++ linux-2.6/include/linux/mount.h	2006-08-31 11:23:48.000000000 +0800
@@ -53,6 +53,8 @@ struct vfsmount {
 	struct list_head mnt_slave;	/* slave list entry */
 	struct vfsmount *mnt_master;	/* slave is on master->mnt_slave_list */
 	struct namespace *mnt_namespace; /* containing namespace */
+ 	struct list_head mnt_lustre_list; /* GNS mount list */
+ 	unsigned long mnt_last_used;	/* for GNS auto-umount (jiffies) */
 	int mnt_pinned;
 };
 
