 fs/inode.c         |    1 
 fs/namei.c         |   66 ++++++++++++++++++++++++++++++++++++++---------------
 include/linux/fs.h |   11 ++++----
 3 files changed, 54 insertions(+), 24 deletions(-)

Index: lum/fs/namei.c
===================================================================
--- lum.orig/fs/namei.c	2004-06-07 17:19:45.000000000 -0400
+++ lum/fs/namei.c	2004-06-07 17:22:39.000000000 -0400
@@ -103,6 +103,36 @@
 }
 EXPORT_SYMBOL(intent_release);
 
+static void *lock_dir(struct inode *dir, struct qstr *name)
+{
+	unsigned long hash;
+	
+	if (!IS_PDIROPS(dir)) {
+		down(&dir->i_sem);
+		return 0;
+	}
+
+	/* OK. fs understands parallel directory operations.
+	 * so, we try to acquire lock for hash of requested
+	 * filename in order to prevent any operations with
+	 * same name in same time -bzzz */
+
+	/* calculate name hash */
+	hash = full_name_hash(name->name, name->len);
+
+	/* lock this hash */
+	return dynlock_lock(&dir->i_dcache_lock, hash, 1, GFP_ATOMIC);
+}
+
+static void unlock_dir(struct inode *dir, void *lock)
+{
+	if (!IS_PDIROPS(dir)) {
+		up(&dir->i_sem);
+		return;
+	}
+	dynlock_unlock(&dir->i_dcache_lock, lock);
+}
+
 /* In order to reduce some races, while at the same time doing additional
  * checking and hopefully speeding things up, we copy filenames to the
  * kernel data space before using them..
@@ -307,10 +337,11 @@
 	struct dentry * result;
 	struct inode *dir = parent->d_inode;
 	int counter = 0;
+	void *lock;
 
 again:
 	counter++;
-	down(&dir->i_sem);
+	lock = lock_dir(dir, name);
 	/*
 	 * First re-do the cached lookup just in case it was created
 	 * while we waited for the directory semaphore..
@@ -334,7 +365,7 @@
 			else
 				result = dentry;
 		}
-		up(&dir->i_sem);
+		unlock_dir(dir, lock);
 		return result;
 	}
 
@@ -342,7 +373,7 @@
 	 * Uhhuh! Nasty case: the cache was re-populated while
 	 * we waited on the semaphore. Need to revalidate.
 	 */
-	up(&dir->i_sem);
+	unlock_dir(dir, lock);
 	if (result->d_op && result->d_op->d_revalidate) {
 		if (!result->d_op->d_revalidate(result, flags) && !d_invalidate(result)) {
 			dput(result);
@@ -1169,13 +1200,13 @@
 		goto exit;
 
 	dir = nd->dentry;
-	down(&dir->d_inode->i_sem);
+	nd->lock = lock_dir(dir->d_inode, &nd->last);
 	dentry = lookup_hash_it(&nd->last, nd->dentry, nd, it);
 
 do_last:
 	error = PTR_ERR(dentry);
 	if (IS_ERR(dentry)) {
-		up(&dir->d_inode->i_sem);
+		unlock_dir(dir->d_inode, nd->lock);
 		goto exit;
 	}
 
@@ -1184,7 +1215,7 @@
 	if (!dentry->d_inode) {
 		error = vfs_create_it(dir->d_inode, dentry,
 				   mode & ~current->fs->umask, it);
-		up(&dir->d_inode->i_sem);
+		unlock_dir(dir->d_inode, nd->lock);		
 		dput(nd->dentry);
 		nd->dentry = dentry;
 		if (error)
@@ -1198,7 +1229,7 @@
 	/*
 	 * It already exists.
 	 */
-	up(&dir->d_inode->i_sem);
+	unlock_dir(dir->d_inode, nd->lock);
 
 	error = -EEXIST;
 	if (flag & O_EXCL)
@@ -1345,7 +1376,7 @@
 		goto exit;
 	}
 	dir = nd->dentry;
-	down(&dir->d_inode->i_sem);
+	nd->lock = lock_dir(dir->d_inode, &nd->last);
 	dentry = lookup_hash_it(&nd->last, nd->dentry, nd, it);
 	putname(nd->last.name);
 	goto do_last;
@@ -1363,7 +1394,7 @@
 {
 	struct dentry *dentry;
 
-	down(&nd->dentry->d_inode->i_sem);
+	nd->lock = lock_dir(nd->dentry->d_inode, &nd->last);
 	dentry = ERR_PTR(-EEXIST);
 	if (nd->last_type != LAST_NORM)
 		goto fail;
@@ -1456,7 +1487,7 @@
 		}
 		dput(dentry);
 	}
-	up(&nd.dentry->d_inode->i_sem);
+	unlock_dir(nd.dentry->d_inode, nd.lock);
 out2:
 	path_release(&nd);
 out:
@@ -1523,7 +1554,7 @@
 					  mode & ~current->fs->umask);
 			dput(dentry);
 		}
-		up(&nd.dentry->d_inode->i_sem);
+		unlock_dir(nd.dentry->d_inode, nd.lock);
 out2:
 		path_release(&nd);
 out:
@@ -1633,14 +1664,14 @@
 		if (error != -EOPNOTSUPP)
 			goto exit1;
 	}
-	down(&nd.dentry->d_inode->i_sem);
+	nd.lock = lock_dir(nd.dentry->d_inode, &nd.last);
 	dentry = lookup_hash_it(&nd.last, nd.dentry, &nd, NULL);
 	error = PTR_ERR(dentry);
 	if (!IS_ERR(dentry)) {
 		error = vfs_rmdir(nd.dentry->d_inode, dentry);
 		dput(dentry);
 	}
-	up(&nd.dentry->d_inode->i_sem);
+	unlock_dir(nd.dentry->d_inode, nd.lock);
 exit1:
 	path_release(&nd);
 exit:
@@ -1699,7 +1730,7 @@
 		if (error != -EOPNOTSUPP)
 			goto exit1;
 	}
-	down(&nd.dentry->d_inode->i_sem);
+	nd.lock = lock_dir(nd.dentry->d_inode, &nd.last);
 	dentry = lookup_hash_it(&nd.last, nd.dentry, &nd, NULL);
 	error = PTR_ERR(dentry);
 	if (!IS_ERR(dentry)) {
@@ -1710,7 +1741,7 @@
 	exit2:
 		dput(dentry);
 	}
-	up(&nd.dentry->d_inode->i_sem);
+	unlock_dir(nd.dentry->d_inode, nd.lock);
 exit1:
 	path_release(&nd);
 exit:
@@ -1784,7 +1815,7 @@
 			error = vfs_symlink(nd.dentry->d_inode, dentry, from);
 			dput(dentry);
 		}
-		up(&nd.dentry->d_inode->i_sem);
+		unlock_dir(nd.dentry->d_inode, nd.lock);
 	out2:
 		path_release(&nd);
 	out:
@@ -1880,7 +1911,7 @@
 			error = vfs_link(old_nd.dentry, nd.dentry->d_inode, new_dentry);
 			dput(new_dentry);
 		}
-		up(&nd.dentry->d_inode->i_sem);
+		unlock_dir(nd.dentry->d_inode, nd.lock);
 out_release:
 		path_release(&nd);
 out:
Index: lum/fs/inode.c
===================================================================
--- lum.orig/fs/inode.c	2004-06-07 17:19:45.000000000 -0400
+++ lum/fs/inode.c	2004-06-07 17:21:10.000000000 -0400
@@ -119,6 +119,7 @@
 		mapping->host = inode;
 		mapping->gfp_mask = GFP_HIGHUSER;
 		inode->i_mapping = mapping;
+		dynlock_init(&inode->i_dcache_lock);
 	}
 	return inode;
 }
Index: lum/include/linux/fs.h
===================================================================
--- lum.orig/include/linux/fs.h	2004-06-07 17:19:45.000000000 -0400
+++ lum/include/linux/fs.h	2004-06-07 17:21:10.000000000 -0400
@@ -21,6 +21,7 @@
 #include <linux/cache.h>
 #include <linux/stddef.h>
 #include <linux/string.h>
+#include <linux/dynlocks.h>
 
 #include <asm/atomic.h>
 #include <asm/bitops.h>
@@ -139,6 +140,7 @@
 #define S_IMMUTABLE	16	/* Immutable file */
 #define S_DEAD		32	/* removed, but still open directory */
 #define S_NOQUOTA	64	/* Inode is not counted to quota */
+#define S_PDIROPS	256	/* Parallel directory operations */
 
 /*
  * Note that nosuid etc flags are inode-specific: setting some file-system
@@ -165,6 +167,7 @@
 #define IS_IMMUTABLE(inode)	((inode)->i_flags & S_IMMUTABLE)
 #define IS_NOATIME(inode)	(__IS_FLG(inode, MS_NOATIME) || ((inode)->i_flags & S_NOATIME))
 #define IS_NODIRATIME(inode)	__IS_FLG(inode, MS_NODIRATIME)
+#define IS_PDIROPS(inode)	__IS_FLG(inode, S_PDIROPS)
 
 #define IS_DEADDIR(inode)	((inode)->i_flags & S_DEAD)
 
@@ -500,6 +503,7 @@
 	atomic_t		i_writecount;
 	unsigned int		i_attr_flags;
 	__u32			i_generation;
+	struct dynlock		i_dcache_lock;	/* for parallel directory ops */
 	union {
 		struct minix_inode_info		minix_i;
 		struct ext2_inode_info		ext2_i;
@@ -714,6 +718,7 @@
 	unsigned int flags;
 	int last_type;
 	struct lookup_intent *intent;
+	void *lock;
 };
 
 /*
@@ -1631,12 +1636,6 @@
 	return dget(dentry->d_parent);
 }
 
-static inline void unlock_dir(struct dentry *dir)
-{
-	up(&dir->d_inode->i_sem);
-	dput(dir);
-}
-
 /*
  * Whee.. Deadlock country. Happily there are only two VFS
  * operations that does this..
