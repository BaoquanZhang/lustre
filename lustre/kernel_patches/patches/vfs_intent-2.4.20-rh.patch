 0 files changed

Index: linux-2.4.20-rh/fs/dcache.c
===================================================================
--- linux-2.4.20-rh.orig/fs/dcache.c	2003-07-29 11:36:40.000000000 +0800
+++ linux-2.4.20-rh/fs/dcache.c	2003-07-30 17:56:16.000000000 +0800
@@ -186,6 +186,13 @@
 		spin_unlock(&dcache_lock);
 		return 0;
 	}
+
+	/* network invalidation by Lustre */
+	if (dentry->d_flags & DCACHE_LUSTRE_INVALID) {
+		spin_unlock(&dcache_lock);
+		return 0;
+	}
+
 	/*
 	 * Check whether to do a partial shrink_dcache
 	 * to get rid of unused child entries.
@@ -841,13 +848,19 @@
  * Adds a dentry to the hash according to its name.
  */
  
-void d_rehash(struct dentry * entry)
+void __d_rehash(struct dentry * entry, int lock)
 {
 	struct list_head *list = d_hash(entry->d_parent, entry->d_name.hash);
 	if (!list_empty(&entry->d_hash)) BUG();
-	spin_lock(&dcache_lock);
+	if (lock) spin_lock(&dcache_lock);
 	list_add(&entry->d_hash, list);
-	spin_unlock(&dcache_lock);
+	if (lock) spin_unlock(&dcache_lock);
+}
+EXPORT_SYMBOL(__d_rehash);
+
+void d_rehash(struct dentry * entry)
+{
+	__d_rehash(entry, 1);
 }
 
 #define do_switch(x,y) do { \
Index: linux-2.4.20-rh/fs/namei.c
===================================================================
--- linux-2.4.20-rh.orig/fs/namei.c	2003-07-29 11:36:22.000000000 +0800
+++ linux-2.4.20-rh/fs/namei.c	2003-07-30 18:00:29.000000000 +0800
@@ -94,6 +94,13 @@
  * XEmacs seems to be relying on it...
  */
 
+void intent_release(struct lookup_intent *it)
+{
+	if (it && it->it_op_release)
+		it->it_op_release(it);
+
+}
+
 /* In order to reduce some races, while at the same time doing additional
  * checking and hopefully speeding things up, we copy filenames to the
  * kernel data space before using them..
@@ -260,10 +267,19 @@
  * Internal lookup() using the new generic dcache.
  * SMP-safe
  */
-static struct dentry * cached_lookup(struct dentry * parent, struct qstr * name, int flags)
+static struct dentry *cached_lookup(struct dentry *parent, struct qstr *name,
+				    int flags, struct lookup_intent *it)
 {
 	struct dentry * dentry = d_lookup(parent, name);
 
+	if (dentry && dentry->d_op && dentry->d_op->d_revalidate_it) {
+		if (!dentry->d_op->d_revalidate_it(dentry, flags, it) &&
+		    !d_invalidate(dentry)) {
+			dput(dentry);
+			dentry = NULL;
+		}
+		return dentry;
+	} else
 	if (dentry && dentry->d_op && dentry->d_op->d_revalidate) {
 		if (!dentry->d_op->d_revalidate(dentry, flags) && !d_invalidate(dentry)) {
 			dput(dentry);
@@ -281,11 +297,14 @@
  * make sure that nobody added the entry to the dcache in the meantime..
  * SMP-safe
  */
-static struct dentry * real_lookup(struct dentry * parent, struct qstr * name, int flags)
+static struct dentry *real_lookup(struct dentry *parent, struct qstr *name,
+				  int flags, struct lookup_intent *it)
 {
 	struct dentry * result;
 	struct inode *dir = parent->d_inode;
 
+again:
+
 	down(&dir->i_sem);
 	/*
 	 * First re-do the cached lookup just in case it was created
@@ -300,6 +319,9 @@
 		result = ERR_PTR(-ENOMEM);
 		if (dentry) {
 			lock_kernel();
+			if (dir->i_op->lookup_it)
+				result = dir->i_op->lookup_it(dir, dentry, it, flags);
+			else
 			result = dir->i_op->lookup(dir, dentry);
 			unlock_kernel();
 			if (result)
@@ -321,6 +343,12 @@
 			dput(result);
 			result = ERR_PTR(-ENOENT);
 		}
+	} else if (result->d_op && result->d_op->d_revalidate_it) {
+		if (!result->d_op->d_revalidate_it(result, flags, it) &&
+		    !d_invalidate(result)) {
+			dput(result);
+			goto again;
+		}
 	}
 	return result;
 }
@@ -334,7 +362,8 @@
  * Without that kind of total limit, nasty chains of consecutive
  * symlinks can cause almost arbitrarily long lookups. 
  */
-static inline int do_follow_link(struct dentry *dentry, struct nameidata *nd)
+static inline int do_follow_link(struct dentry *dentry, struct nameidata *nd,
+				 struct lookup_intent *it)
 {
 	int err;
 	if (current->link_count >= max_recursive_link)
@@ -348,10 +377,18 @@
 	current->link_count++;
 	current->total_link_count++;
 	UPDATE_ATIME(dentry->d_inode);
+	nd->intent = it;
 	err = dentry->d_inode->i_op->follow_link(dentry, nd);
+	if (!err && it != NULL && !(it->d.lustre.it_int_flags & IT_FL_FOLLOWED)) {
+		/* vfs_follow_link was never called */
+		intent_release(it);
+		path_release(nd);
+		err = -ENOLINK;
+	}
 	current->link_count--;
 	return err;
 loop:
+	intent_release(it);
 	path_release(nd);
 	return -ELOOP;
 }
@@ -381,15 +418,26 @@
 	return __follow_up(mnt, dentry);
 }
 
-static inline int __follow_down(struct vfsmount **mnt, struct dentry **dentry)
+static inline int __follow_down(struct vfsmount **mnt, struct dentry **dentry,
+				struct lookup_intent *it)
 {
 	struct vfsmount *mounted;
 
 	spin_lock(&dcache_lock);
 	mounted = lookup_mnt(*mnt, *dentry);
 	if (mounted) {
+		int opc = 0, mode = 0;
 		*mnt = mntget(mounted);
 		spin_unlock(&dcache_lock);
+		if (it) {
+			opc = it->it_op;
+			mode = it->it_create_mode;
+		}
+		intent_release(it);
+		if (it) {
+			it->it_op = opc;
+			it->it_create_mode = mode;
+		}
 		dput(*dentry);
 		mntput(mounted->mnt_parent);
 		*dentry = dget(mounted->mnt_root);
@@ -401,7 +449,7 @@
 
 int follow_down(struct vfsmount **mnt, struct dentry **dentry)
 {
-	return __follow_down(mnt,dentry);
+	return __follow_down(mnt,dentry,NULL);
 }
  
 static inline void follow_dotdot(struct nameidata *nd)
@@ -437,7 +485,7 @@
 		mntput(nd->mnt);
 		nd->mnt = parent;
 	}
-	while (d_mountpoint(nd->dentry) && __follow_down(&nd->mnt, &nd->dentry))
+	while (d_mountpoint(nd->dentry) && __follow_down(&nd->mnt, &nd->dentry, NULL))
 		;
 }
 
@@ -449,7 +497,8 @@
  *
  * We expect 'base' to be positive and a directory.
  */
-int link_path_walk(const char * name, struct nameidata *nd)
+int link_path_walk_it(const char *name, struct nameidata *nd,
+		      struct lookup_intent *it)
 {
 	struct dentry *dentry;
 	struct inode *inode;
@@ -526,19 +575,18 @@
 				break;
 		}
 		/* This does the actual lookups.. */
-		dentry = cached_lookup(nd->dentry, &this, LOOKUP_CONTINUE);
+		dentry = cached_lookup(nd->dentry, &this, LOOKUP_CONTINUE, NULL);
 		if (!dentry) {
 			err = -EWOULDBLOCKIO;
 			if (atomic)
 				break;
-			dentry = real_lookup(nd->dentry, &this, LOOKUP_CONTINUE);
+			dentry = real_lookup(nd->dentry, &this, LOOKUP_CONTINUE, NULL);
 			err = PTR_ERR(dentry);
 			if (IS_ERR(dentry))
 				break;
 		}
 		/* Check mountpoints.. */
-		while (d_mountpoint(dentry) && __follow_down(&nd->mnt, &dentry))
-			;
+		while (d_mountpoint(dentry) && __follow_down(&nd->mnt, &dentry, NULL));
 
 		err = -ENOENT;
 		inode = dentry->d_inode;
@@ -549,7 +597,7 @@
 			goto out_dput;
 
 		if (inode->i_op->follow_link) {
-			err = do_follow_link(dentry, nd);
+			err = do_follow_link(dentry, nd, NULL);
 			dput(dentry);
 			if (err)
 				goto return_err;
@@ -565,7 +613,7 @@
 			nd->dentry = dentry;
 		}
 		err = -ENOTDIR; 
-		if (!inode->i_op->lookup)
+		if (!inode->i_op->lookup && !inode->i_op->lookup_it)
 			break;
 		continue;
 		/* here ends the main loop */
@@ -592,22 +640,22 @@
 			if (err < 0)
 				break;
 		}
-		dentry = cached_lookup(nd->dentry, &this, 0);
+		dentry = cached_lookup(nd->dentry, &this, 0, it);
 		if (!dentry) {
 			err = -EWOULDBLOCKIO;
 			if (atomic)
 				break;
-			dentry = real_lookup(nd->dentry, &this, 0);
+			dentry = real_lookup(nd->dentry, &this, 0, it);
 			err = PTR_ERR(dentry);
 			if (IS_ERR(dentry))
 				break;
 		}
-		while (d_mountpoint(dentry) && __follow_down(&nd->mnt, &dentry))
+		while (d_mountpoint(dentry) && __follow_down(&nd->mnt, &dentry, it))
 			;
 		inode = dentry->d_inode;
 		if ((lookup_flags & LOOKUP_FOLLOW)
 		    && inode && inode->i_op && inode->i_op->follow_link) {
-			err = do_follow_link(dentry, nd);
+			err = do_follow_link(dentry, nd, it);
 			dput(dentry);
 			if (err)
 				goto return_err;
@@ -621,7 +669,8 @@
 			goto no_inode;
 		if (lookup_flags & LOOKUP_DIRECTORY) {
 			err = -ENOTDIR; 
-			if (!inode->i_op || !inode->i_op->lookup)
+			if (!inode->i_op ||
+			    (!inode->i_op->lookup && !inode->i_op->lookup_it))
 				break;
 		}
 		goto return_base;
@@ -645,6 +694,23 @@
 		 * Check the cached dentry for staleness.
 		 */
 		dentry = nd->dentry;
+	revalidate_again:
+		if (dentry && dentry->d_op && dentry->d_op->d_revalidate_it) {
+			err = -ESTALE;
+			if (!dentry->d_op->d_revalidate_it(dentry, 0, it)) {
+				struct dentry *new;
+				err = permission(dentry->d_parent->d_inode,
+						 MAY_EXEC);
+				if (err)
+					break;
+				new = real_lookup(dentry->d_parent,
+						  &dentry->d_name, 0, NULL);
+				d_invalidate(dentry);
+				dput(dentry);
+				dentry = new;
+				goto revalidate_again;
+			}
+		} else
 		if (dentry && dentry->d_op && dentry->d_op->d_revalidate) {
 			err = -ESTALE;
 			if (!dentry->d_op->d_revalidate(dentry, 0)) {
@@ -658,15 +724,28 @@
 		dput(dentry);
 		break;
 	}
+	if (err)
+		intent_release(it);
 	path_release(nd);
 return_err:
 	return err;
 }
 
+int link_path_walk(const char * name, struct nameidata *nd)
+{
+	return link_path_walk_it(name, nd, NULL);
+}
+
+int path_walk_it(const char * name, struct nameidata *nd, struct lookup_intent *it)
+{
+	current->total_link_count = 0;
+	return link_path_walk_it(name, nd, it);
+}
+
 int path_walk(const char * name, struct nameidata *nd)
 {
 	current->total_link_count = 0;
-	return link_path_walk(name, nd);
+	return link_path_walk_it(name, nd, NULL);
 }
 
 /* SMP-safe */
@@ -751,6 +830,17 @@
 }
 
 /* SMP-safe */
+int path_lookup_it(const char *path, unsigned flags, struct nameidata *nd,
+		   struct lookup_intent *it)
+{
+	int error = 0;
+	if (path_init(path, flags, nd))
+		error = path_walk_it(path, nd, it);
+	return error;
+}
+
+
+/* SMP-safe */
 int path_lookup(const char *path, unsigned flags, struct nameidata *nd)
 {
 	int error = 0;
@@ -765,6 +855,7 @@
 {
 	nd->last_type = LAST_ROOT; /* if there are only slashes... */
 	nd->flags = flags;
+	nd->intent = NULL;
 	if (*name=='/')
 		return walk_init_root(name,nd);
 	read_lock(&current->fs->lock);
@@ -779,7 +870,8 @@
  * needs parent already locked. Doesn't follow mounts.
  * SMP-safe.
  */
-struct dentry * lookup_hash(struct qstr *name, struct dentry * base)
+struct dentry * lookup_hash_it(struct qstr *name, struct dentry * base,
+			       struct lookup_intent *it)
 {
 	struct dentry * dentry;
 	struct inode *inode;
@@ -802,13 +894,16 @@
 			goto out;
 	}
 
-	dentry = cached_lookup(base, name, 0);
+	dentry = cached_lookup(base, name, 0, it);
 	if (!dentry) {
 		struct dentry *new = d_alloc(base, name);
 		dentry = ERR_PTR(-ENOMEM);
 		if (!new)
 			goto out;
 		lock_kernel();
+		if (inode->i_op->lookup_it)
+			dentry = inode->i_op->lookup_it(inode, new, it, 0);
+		else
 		dentry = inode->i_op->lookup(inode, new);
 		unlock_kernel();
 		if (!dentry)
@@ -820,6 +915,12 @@
 	return dentry;
 }
 
+struct dentry * lookup_hash(struct qstr *name, struct dentry * base)
+{
+	return lookup_hash_it(name, base, NULL);
+}
+
+
 /* SMP-safe */
 struct dentry * lookup_one_len(const char * name, struct dentry * base, int len)
 {
@@ -841,7 +942,7 @@
 	}
 	this.hash = end_name_hash(hash);
 
-	return lookup_hash(&this, base);
+	return lookup_hash_it(&this, base, NULL);
 access:
 	return ERR_PTR(-EACCES);
 }
@@ -872,6 +973,23 @@
 	return err;
 }
 
+int __user_walk_it(const char *name, unsigned flags, struct nameidata *nd,
+		   struct lookup_intent *it)
+{
+	char *tmp;
+	int err;
+
+	tmp = getname(name);
+	err = PTR_ERR(tmp);
+	if (!IS_ERR(tmp)) {
+		err = 0;
+		if (path_init(tmp, flags, nd))
+			err = path_walk_it(tmp, nd, it);
+		putname(tmp);
+	}
+	return err;
+}
+
 /*
  * It's inline, so penalty for filesystems that don't use sticky bit is
  * minimal.
@@ -969,7 +1087,8 @@
 	return retval;
 }
 
-int vfs_create(struct inode *dir, struct dentry *dentry, int mode)
+static int vfs_create_it(struct inode *dir, struct dentry *dentry, int mode,
+			 struct lookup_intent *it)
 {
 	int error;
 
@@ -982,12 +1101,15 @@
 		goto exit_lock;
 
 	error = -EACCES;	/* shouldn't it be ENOSYS? */
-	if (!dir->i_op || !dir->i_op->create)
+	if (!dir->i_op || (!dir->i_op->create && !dir->i_op->create_it))
 		goto exit_lock;
 
 	DQUOT_INIT(dir);
 	lock_kernel();
-	error = dir->i_op->create(dir, dentry, mode);
+	if (dir->i_op->create_it)
+		error = dir->i_op->create_it(dir, dentry, mode, it);
+	else
+		error = dir->i_op->create(dir, dentry, mode);
 	unlock_kernel();
 exit_lock:
 	up(&dir->i_zombie);
@@ -996,6 +1118,11 @@
 	return error;
 }
 
+int vfs_create(struct inode *dir, struct dentry *dentry, int mode)
+{
+	return vfs_create_it(dir, dentry, mode, NULL);
+}
+
 /*
  *	open_namei()
  *
@@ -1010,7 +1137,8 @@
  * for symlinks (where the permissions are checked later).
  * SMP-safe
  */
-int open_namei(const char * pathname, int flag, int mode, struct nameidata *nd)
+int open_namei_it(const char *pathname, int flag, int mode,
+		  struct nameidata *nd, struct lookup_intent *it)
 {
 	int acc_mode, error = 0;
 	struct inode *inode;
@@ -1024,7 +1152,7 @@
 	 * The simplest case - just a plain lookup.
 	 */
 	if (!(flag & O_CREAT)) {
-		error = path_lookup(pathname, lookup_flags(flag), nd);
+		error = path_lookup_it(pathname, lookup_flags(flag), nd, it);
 		if (error)
 			return error;
 		dentry = nd->dentry;
@@ -1034,6 +1162,10 @@
 	/*
 	 * Create - we need to know the parent.
 	 */
+ 	if (it) {
+ 		it->it_create_mode = mode;
+ 		it->it_op |= IT_CREAT;
+ 	}
 	error = path_lookup(pathname, LOOKUP_PARENT, nd);
 	if (error)
 		return error;
@@ -1049,7 +1181,7 @@
 
 	dir = nd->dentry;
 	down(&dir->d_inode->i_sem);
-	dentry = lookup_hash(&nd->last, nd->dentry);
+	dentry = lookup_hash_it(&nd->last, nd->dentry, it);
 
 do_last:
 	error = PTR_ERR(dentry);
@@ -1058,10 +1190,11 @@
 		goto exit;
 	}
 
+	it->it_create_mode = mode;
 	/* Negative dentry, just create the file */
 	if (!dentry->d_inode) {
-		error = vfs_create(dir->d_inode, dentry,
-				   mode & ~current->fs->umask);
+		error = vfs_create_it(dir->d_inode, dentry,
+				   mode & ~current->fs->umask, it);
 		up(&dir->d_inode->i_sem);
 		dput(nd->dentry);
 		nd->dentry = dentry;
@@ -1086,7 +1219,7 @@
 		error = -ELOOP;
 		if (flag & O_NOFOLLOW)
 			goto exit_dput;
-		while (__follow_down(&nd->mnt,&dentry) && d_mountpoint(dentry));
+		while (__follow_down(&nd->mnt,&dentry,it) && d_mountpoint(dentry));
 	}
 	error = -ENOENT;
 	if (!dentry->d_inode)
@@ -1165,7 +1298,7 @@
 		if (!error) {
 			DQUOT_INIT(inode);
 			
-			error = do_truncate(dentry, 0);
+			error = do_truncate(dentry, 0, 1);
 		}
 		put_write_access(inode);
 		if (error)
@@ -1177,8 +1310,10 @@
 	return 0;
 
 exit_dput:
+	intent_release(it);
 	dput(dentry);
 exit:
+	intent_release(it);
 	path_release(nd);
 	return error;
 
@@ -1197,7 +1332,16 @@
 	 * are done. Procfs-like symlinks just set LAST_BIND.
 	 */
 	UPDATE_ATIME(dentry->d_inode);
+	nd->intent = it;
 	error = dentry->d_inode->i_op->follow_link(dentry, nd);
+	if (error) {
+		intent_release(it);
+	} else if (it != NULL && !(it->d.lustre.it_int_flags & IT_FL_FOLLOWED)) {
+		/* vfs_follow_link was never called */
+		intent_release(it);
+		path_release(nd);
+		error = -ENOLINK;
+	}
 	dput(dentry);
 	if (error)
 		return error;
@@ -1219,13 +1363,20 @@
 	}
 	dir = nd->dentry;
 	down(&dir->d_inode->i_sem);
-	dentry = lookup_hash(&nd->last, nd->dentry);
+	dentry = lookup_hash_it(&nd->last, nd->dentry, it);
 	putname(nd->last.name);
 	goto do_last;
 }
 
+int open_namei(const char *pathname, int flag, int mode, struct nameidata *nd)
+{
+	return open_namei_it(pathname, flag, mode, nd, NULL);
+}
+
+
 /* SMP-safe */
-static struct dentry *lookup_create(struct nameidata *nd, int is_dir)
+static struct dentry *lookup_create(struct nameidata *nd, int is_dir,
+				    struct lookup_intent *it)
 {
 	struct dentry *dentry;
 
@@ -1233,7 +1384,7 @@
 	dentry = ERR_PTR(-EEXIST);
 	if (nd->last_type != LAST_NORM)
 		goto fail;
-	dentry = lookup_hash(&nd->last, nd->dentry);
+	dentry = lookup_hash_it(&nd->last, nd->dentry, it);
 	if (IS_ERR(dentry))
 		goto fail;
 	if (!is_dir && nd->last.name[nd->last.len] && !dentry->d_inode)
@@ -1289,7 +1440,16 @@
 	error = path_lookup(tmp, LOOKUP_PARENT, &nd);
 	if (error)
 		goto out;
-	dentry = lookup_create(&nd, 0);
+
+	if (nd.dentry->d_inode->i_op->mknod_raw) {
+		struct inode_operations *op = nd.dentry->d_inode->i_op;
+		error = op->mknod_raw(&nd, mode, dev);
+		/* the file system wants to use normal vfs path now */
+		if (error != -EOPNOTSUPP)
+			goto out2;
+	}
+
+	dentry = lookup_create(&nd, 0, NULL);
 	error = PTR_ERR(dentry);
 
 	mode &= ~current->fs->umask;
@@ -1310,6 +1470,7 @@
 		dput(dentry);
 	}
 	up(&nd.dentry->d_inode->i_sem);
+out2:
 	path_release(&nd);
 out:
 	putname(tmp);
@@ -1357,7 +1518,14 @@
 		error = path_lookup(tmp, LOOKUP_PARENT, &nd);
 		if (error)
 			goto out;
-		dentry = lookup_create(&nd, 1);
+ 		if (nd.dentry->d_inode->i_op->mkdir_raw) {
+ 			struct inode_operations *op = nd.dentry->d_inode->i_op;
+ 			error = op->mkdir_raw(&nd, mode);
+ 			/* the file system wants to use normal vfs path now */
+ 			if (error != -EOPNOTSUPP)
+ 				goto out2;
+ 		}
+		dentry = lookup_create(&nd, 1, NULL);
 		error = PTR_ERR(dentry);
 		if (!IS_ERR(dentry)) {
 			error = vfs_mkdir(nd.dentry->d_inode, dentry,
@@ -1365,6 +1533,7 @@
 			dput(dentry);
 		}
 		up(&nd.dentry->d_inode->i_sem);
+out2:
 		path_release(&nd);
 out:
 		putname(tmp);
@@ -1465,8 +1634,16 @@
 			error = -EBUSY;
 			goto exit1;
 	}
+ 	if (nd.dentry->d_inode->i_op->rmdir_raw) {
+ 		struct inode_operations *op = nd.dentry->d_inode->i_op;
+
+ 		error = op->rmdir_raw(&nd);
+ 		/* the file system wants to use normal vfs path now */
+ 		if (error != -EOPNOTSUPP)
+ 			goto exit1;
+ 	}
 	down(&nd.dentry->d_inode->i_sem);
-	dentry = lookup_hash(&nd.last, nd.dentry);
+	dentry = lookup_hash_it(&nd.last, nd.dentry, NULL);
 	error = PTR_ERR(dentry);
 	if (!IS_ERR(dentry)) {
 		error = vfs_rmdir(nd.dentry->d_inode, dentry);
@@ -1524,8 +1701,15 @@
 	error = -EISDIR;
 	if (nd.last_type != LAST_NORM)
 		goto exit1;
+ 	if (nd.dentry->d_inode->i_op->unlink_raw) {
+ 		struct inode_operations *op = nd.dentry->d_inode->i_op;
+ 		error = op->unlink_raw(&nd);
+ 		/* the file system wants to use normal vfs path now */
+ 		if (error != -EOPNOTSUPP)
+ 			goto exit1;
+ 	}
 	down(&nd.dentry->d_inode->i_sem);
-	dentry = lookup_hash(&nd.last, nd.dentry);
+	dentry = lookup_hash_it(&nd.last, nd.dentry, NULL);
 	error = PTR_ERR(dentry);
 	if (!IS_ERR(dentry)) {
 		/* Why not before? Because we want correct error value */
@@ -1592,15 +1776,23 @@
 		error = path_lookup(to, LOOKUP_PARENT, &nd);
 		if (error)
 			goto out;
-		dentry = lookup_create(&nd, 0);
+		if (nd.dentry->d_inode->i_op->symlink_raw) {
+			struct inode_operations *op = nd.dentry->d_inode->i_op;
+			error = op->symlink_raw(&nd, from);
+			/* the file system wants to use normal vfs path now */
+			if (error != -EOPNOTSUPP)
+				goto out2;
+		}
+		dentry = lookup_create(&nd, 0, NULL);
 		error = PTR_ERR(dentry);
 		if (!IS_ERR(dentry)) {
 			error = vfs_symlink(nd.dentry->d_inode, dentry, from);
 			dput(dentry);
 		}
 		up(&nd.dentry->d_inode->i_sem);
+	out2:
 		path_release(&nd);
-out:
+	out:
 		putname(to);
 	}
 	putname(from);
@@ -1676,7 +1868,14 @@
 		error = -EXDEV;
 		if (old_nd.mnt != nd.mnt)
 			goto out_release;
-		new_dentry = lookup_create(&nd, 0);
+		if (nd.dentry->d_inode->i_op->link_raw) {
+			struct inode_operations *op = nd.dentry->d_inode->i_op;
+			error = op->link_raw(&old_nd, &nd);
+			/* the file system wants to use normal vfs path now */
+			if (error != -EOPNOTSUPP)
+				goto out_release;
+		}
+		new_dentry = lookup_create(&nd, 0, NULL);
 		error = PTR_ERR(new_dentry);
 		if (!IS_ERR(new_dentry)) {
 			error = vfs_link(old_nd.dentry, nd.dentry->d_inode, new_dentry);
@@ -1720,7 +1919,7 @@
  *	   locking].
  */
 int vfs_rename_dir(struct inode *old_dir, struct dentry *old_dentry,
-	       struct inode *new_dir, struct dentry *new_dentry)
+		   struct inode *new_dir, struct dentry *new_dentry)
 {
 	int error;
 	struct inode *target;
@@ -1799,7 +1998,7 @@
 }
 
 int vfs_rename_other(struct inode *old_dir, struct dentry *old_dentry,
-	       struct inode *new_dir, struct dentry *new_dentry)
+		     struct inode *new_dir, struct dentry *new_dentry)
 {
 	int error;
 
@@ -1887,9 +2086,18 @@
 	if (newnd.last_type != LAST_NORM)
 		goto exit2;
 
+ 	if (old_dir->d_inode->i_op->rename_raw) {
+		lock_kernel();
+ 		error = old_dir->d_inode->i_op->rename_raw(&oldnd, &newnd);
+		unlock_kernel();
+ 		/* the file system wants to use normal vfs path now */
+ 		if (error != -EOPNOTSUPP)
+ 			goto exit2;
+ 	}
+
 	double_lock(new_dir, old_dir);
 
-	old_dentry = lookup_hash(&oldnd.last, old_dir);
+	old_dentry = lookup_hash_it(&oldnd.last, old_dir, NULL);
 	error = PTR_ERR(old_dentry);
 	if (IS_ERR(old_dentry))
 		goto exit3;
@@ -1905,16 +2113,16 @@
 		if (newnd.last.name[newnd.last.len])
 			goto exit4;
 	}
-	new_dentry = lookup_hash(&newnd.last, new_dir);
+	new_dentry = lookup_hash_it(&newnd.last, new_dir, NULL);
 	error = PTR_ERR(new_dentry);
 	if (IS_ERR(new_dentry))
 		goto exit4;
 
+
 	lock_kernel();
 	error = vfs_rename(old_dir->d_inode, old_dentry,
 				   new_dir->d_inode, new_dentry);
 	unlock_kernel();
-
 	dput(new_dentry);
 exit4:
 	dput(old_dentry);
@@ -1965,20 +2173,28 @@
 }
 
 static inline int
-__vfs_follow_link(struct nameidata *nd, const char *link)
+__vfs_follow_link(struct nameidata *nd, const char *link,
+		  struct lookup_intent *it)
 {
 	int res = 0;
 	char *name;
 	if (IS_ERR(link))
 		goto fail;
 
+	if (it == NULL)
+		it = nd->intent;
+	else if (it != nd->intent)
+		printk("it != nd->intent: tell phil@clusterfs.com\n");
+	if (it != NULL)
+		it->d.lustre.it_int_flags |= IT_FL_FOLLOWED;
+
 	if (*link == '/') {
 		path_release(nd);
 		if (!walk_init_root(link, nd))
 			/* weird __emul_prefix() stuff did it */
 			goto out;
 	}
-	res = link_path_walk(link, nd);
+	res = link_path_walk_it(link, nd, it);
 out:
 	if (current->link_count || res || nd->last_type!=LAST_NORM)
 		return res;
@@ -2002,7 +2218,13 @@
 
 int vfs_follow_link(struct nameidata *nd, const char *link)
 {
-	return __vfs_follow_link(nd, link);
+	return __vfs_follow_link(nd, link, NULL);
+}
+
+int vfs_follow_link_it(struct nameidata *nd, const char *link,
+		       struct lookup_intent *it)
+{
+	return __vfs_follow_link(nd, link, it);
 }
 
 /* get the link contents into pagecache */
@@ -2044,7 +2266,7 @@
 {
 	struct page *page = NULL;
 	char *s = page_getlink(dentry, &page);
-	int res = __vfs_follow_link(nd, s);
+	int res = __vfs_follow_link(nd, s, NULL);
 	if (page) {
 		kunmap(page);
 		page_cache_release(page);
Index: linux-2.4.20-rh/fs/open.c
===================================================================
--- linux-2.4.20-rh.orig/fs/open.c	2003-07-29 11:36:22.000000000 +0800
+++ linux-2.4.20-rh/fs/open.c	2003-07-30 17:56:16.000000000 +0800
@@ -19,6 +19,8 @@
 #include <asm/uaccess.h>
 
 #define special_file(m) (S_ISCHR(m)||S_ISBLK(m)||S_ISFIFO(m)||S_ISSOCK(m))
+extern int path_walk_it(const char *name, struct nameidata *nd,
+			struct lookup_intent *it);
 
 int vfs_statfs(struct super_block *sb, struct statfs *buf)
 {
@@ -95,9 +97,10 @@
 	write_unlock(&files->file_lock);
 }
 
-int do_truncate(struct dentry *dentry, loff_t length)
+int do_truncate(struct dentry *dentry, loff_t length, int called_from_open)
 {
 	struct inode *inode = dentry->d_inode;
+	struct inode_operations *op = dentry->d_inode->i_op;
 	int error;
 	struct iattr newattrs;
 
@@ -108,7 +111,13 @@
 	down(&inode->i_sem);
 	newattrs.ia_size = length;
 	newattrs.ia_valid = ATTR_SIZE | ATTR_CTIME;
-	error = notify_change(dentry, &newattrs);
+	if (called_from_open)
+		newattrs.ia_valid |= ATTR_FROM_OPEN;
+	if (op->setattr_raw) {
+		newattrs.ia_valid |= ATTR_RAW;
+		error = op->setattr_raw(inode, &newattrs);
+	} else
+		error = notify_change(dentry, &newattrs);
 	up(&inode->i_sem);
 	return error;
 }
@@ -118,12 +127,13 @@
 	struct nameidata nd;
 	struct inode * inode;
 	int error;
+	struct lookup_intent it = { .it_op = IT_GETATTR };
 
 	error = -EINVAL;
 	if (length < 0)	/* sorry, but loff_t says... */
 		goto out;
 
-	error = user_path_walk(path, &nd);
+	error = user_path_walk_it(path, &nd, &it);
 	if (error)
 		goto out;
 	inode = nd.dentry->d_inode;
@@ -163,11 +173,13 @@
 	error = locks_verify_truncate(inode, NULL, length);
 	if (!error) {
 		DQUOT_INIT(inode);
-		error = do_truncate(nd.dentry, length);
+		intent_release(&it);
+		error = do_truncate(nd.dentry, length, 0);
 	}
 	put_write_access(inode);
 
 dput_and_out:
+	intent_release(&it);
 	path_release(&nd);
 out:
 	return error;
@@ -215,7 +227,7 @@
 
 	error = locks_verify_truncate(inode, file, length);
 	if (!error)
-		error = do_truncate(dentry, length);
+		error = do_truncate(dentry, length, 0);
 out_putf:
 	fput(file);
 out:
@@ -260,11 +272,13 @@
 	struct inode * inode;
 	struct iattr newattrs;
 
-	error = user_path_walk(filename, &nd);
+	error = user_path_walk_it(filename, &nd, NULL);
 	if (error)
 		goto out;
 	inode = nd.dentry->d_inode;
 
+	/* this is safe without a Lustre lock because it only depends
+	   on the super block */
 	error = -EROFS;
 	if (IS_RDONLY(inode))
 		goto dput_and_out;
@@ -279,11 +293,25 @@
 			goto dput_and_out;
 
 		newattrs.ia_valid |= ATTR_ATIME_SET | ATTR_MTIME_SET;
-	} else {
+	}
+
+	if (inode->i_op->setattr_raw) {
+		struct inode_operations *op = nd.dentry->d_inode->i_op;
+
+		newattrs.ia_valid |= ATTR_RAW;
+		error = op->setattr_raw(inode, &newattrs);
+		/* the file system wants to use normal vfs path now */
+		if (error != -EOPNOTSUPP)
+			goto dput_and_out;
+	}
+
+	error = -EPERM;
+	if (!times) {
 		if (current->fsuid != inode->i_uid &&
 		    (error = permission(inode,MAY_WRITE)) != 0)
 			goto dput_and_out;
 	}
+
 	error = notify_change(nd.dentry, &newattrs);
 dput_and_out:
 	path_release(&nd);
@@ -304,12 +332,14 @@
 	struct inode * inode;
 	struct iattr newattrs;
 
-	error = user_path_walk(filename, &nd);
+	error = user_path_walk_it(filename, &nd, NULL);
 
 	if (error)
 		goto out;
 	inode = nd.dentry->d_inode;
 
+	/* this is safe without a Lustre lock because it only depends
+	   on the super block */
 	error = -EROFS;
 	if (IS_RDONLY(inode))
 		goto dput_and_out;
@@ -324,7 +354,20 @@
 		newattrs.ia_atime = times[0].tv_sec;
 		newattrs.ia_mtime = times[1].tv_sec;
 		newattrs.ia_valid |= ATTR_ATIME_SET | ATTR_MTIME_SET;
-	} else {
+	}
+
+	if (inode->i_op->setattr_raw) {
+		struct inode_operations *op = nd.dentry->d_inode->i_op;
+
+		newattrs.ia_valid |= ATTR_RAW;
+		error = op->setattr_raw(inode, &newattrs);
+		/* the file system wants to use normal vfs path now */
+		if (error != -EOPNOTSUPP)
+			goto dput_and_out;
+	}
+
+	error = -EPERM;
+	if (!utimes) {
 		if (current->fsuid != inode->i_uid &&
 		    (error = permission(inode,MAY_WRITE)) != 0)
 			goto dput_and_out;
@@ -347,6 +390,7 @@
 	int old_fsuid, old_fsgid;
 	kernel_cap_t old_cap;
 	int res;
+	struct lookup_intent it = { .it_op = IT_GETATTR };
 
 	if (mode & ~S_IRWXO)	/* where's F_OK, X_OK, W_OK, R_OK? */
 		return -EINVAL;
@@ -364,13 +408,14 @@
 	else
 		current->cap_effective = current->cap_permitted;
 
-	res = user_path_walk(filename, &nd);
+	res = user_path_walk_it(filename, &nd, &it);
 	if (!res) {
 		res = permission(nd.dentry->d_inode, mode);
 		/* SuS v2 requires we report a read only fs too */
 		if(!res && (mode & S_IWOTH) && IS_RDONLY(nd.dentry->d_inode)
 		   && !special_file(nd.dentry->d_inode->i_mode))
 			res = -EROFS;
+		intent_release(&it);
 		path_release(&nd);
 	}
 
@@ -385,8 +430,9 @@
 {
 	int error;
 	struct nameidata nd;
+ 	struct lookup_intent it = { .it_op = IT_GETATTR };
 
-	error = __user_walk(filename,LOOKUP_POSITIVE|LOOKUP_FOLLOW|LOOKUP_DIRECTORY,&nd);
+	error = __user_walk_it(filename,LOOKUP_POSITIVE|LOOKUP_FOLLOW|LOOKUP_DIRECTORY,&nd, &it);
 	if (error)
 		goto out;
 
@@ -397,6 +443,7 @@
 	set_fs_pwd(current->fs, nd.mnt, nd.dentry);
 
 dput_and_out:
+	intent_release(&it);
 	path_release(&nd);
 out:
 	return error;
@@ -436,9 +483,10 @@
 {
 	int error;
 	struct nameidata nd;
+ 	struct lookup_intent it = { .it_op = IT_GETATTR };
 
-	error = __user_walk(filename, LOOKUP_POSITIVE | LOOKUP_FOLLOW |
-		      LOOKUP_DIRECTORY | LOOKUP_NOALT, &nd);
+	error = __user_walk_it(filename, LOOKUP_POSITIVE | LOOKUP_FOLLOW |
+		      LOOKUP_DIRECTORY | LOOKUP_NOALT, &nd, &it);
 	if (error)
 		goto out;
 
@@ -454,6 +502,7 @@
 	set_fs_altroot();
 	error = 0;
 dput_and_out:
+	intent_release(&it);
 	path_release(&nd);
 out:
 	return error;
@@ -508,6 +557,18 @@
 	if (IS_RDONLY(inode))
 		goto dput_and_out;
 
+	if (inode->i_op->setattr_raw) {
+		struct inode_operations *op = nd.dentry->d_inode->i_op;
+
+		newattrs.ia_mode = mode;
+		newattrs.ia_valid = ATTR_MODE | ATTR_CTIME;
+		newattrs.ia_valid |= ATTR_RAW;
+		error = op->setattr_raw(inode, &newattrs);
+		/* the file system wants to use normal vfs path now */
+		if (error != -EOPNOTSUPP)
+			goto dput_and_out;
+	}
+
 	error = -EPERM;
 	if (IS_IMMUTABLE(inode) || IS_APPEND(inode))
 		goto dput_and_out;
@@ -538,6 +599,20 @@
 	error = -EROFS;
 	if (IS_RDONLY(inode))
 		goto out;
+
+	if (inode->i_op->setattr_raw) {
+		struct inode_operations *op = dentry->d_inode->i_op;
+
+		newattrs.ia_uid = user;
+		newattrs.ia_gid = group;
+		newattrs.ia_valid = ATTR_UID | ATTR_GID | ATTR_CTIME;
+		newattrs.ia_valid |= ATTR_RAW;
+		error = op->setattr_raw(inode, &newattrs);
+		/* the file system wants to use normal vfs path now */
+		if (error != -EOPNOTSUPP)
+			return error;
+	}
+
 	error = -EPERM;
 	if (IS_IMMUTABLE(inode) || IS_APPEND(inode))
 		goto out;
@@ -642,8 +717,9 @@
 {
 	int namei_flags, error;
 	struct nameidata nd;
-	
-	flags &= ~O_DIRECT;
+	struct lookup_intent it = { .it_op = IT_OPEN, .it_flags = flags };
+
+	//flags &= ~O_DIRECT;
 
 	namei_flags = flags;
 	if ((namei_flags+1) & O_ACCMODE)
@@ -651,14 +727,15 @@
 	if (namei_flags & O_TRUNC)
 		namei_flags |= 2;
 
-	error = open_namei(filename, namei_flags, mode, &nd);
-	if (!error)
-		return dentry_open(nd.dentry, nd.mnt, flags);
+	error = open_namei_it(filename, namei_flags, mode, &nd, &it);
+	if (error)
+		return ERR_PTR(error);
 
-	return ERR_PTR(error);
+	return dentry_open_it(nd.dentry, nd.mnt, flags, &it);
 }
 
-struct file *dentry_open(struct dentry *dentry, struct vfsmount *mnt, int flags)
+struct file *dentry_open_it(struct dentry *dentry, struct vfsmount *mnt,
+			    int flags, struct lookup_intent *it)
 {
 	struct file * f;
 	struct inode *inode;
@@ -695,12 +772,15 @@
 	}
 
 	if (f->f_op && f->f_op->open) {
+		f->f_it = it;
 		error = f->f_op->open(inode,f);
+		f->f_it = NULL;
 		if (error)
 			goto cleanup_all;
 	}
 	f->f_flags &= ~(O_CREAT | O_EXCL | O_NOCTTY | O_TRUNC);
 
+	intent_release(it);
 	return f;
 
 cleanup_all:
@@ -715,11 +795,17 @@
 cleanup_file:
 	put_filp(f);
 cleanup_dentry:
+	intent_release(it);
 	dput(dentry);
 	mntput(mnt);
 	return ERR_PTR(error);
 }
 
+struct file *dentry_open(struct dentry *dentry, struct vfsmount *mnt, int flags)
+{
+	return dentry_open_it(dentry, mnt, flags, NULL);
+}
+
 /*
  * Find an empty file descriptor entry, and mark it busy.
  */
Index: linux-2.4.20-rh/fs/stat.c
===================================================================
--- linux-2.4.20-rh.orig/fs/stat.c	2003-07-29 11:36:40.000000000 +0800
+++ linux-2.4.20-rh/fs/stat.c	2003-07-30 17:56:16.000000000 +0800
@@ -17,10 +17,12 @@
  * Revalidate the inode. This is required for proper NFS attribute caching.
  */
 static __inline__ int
-do_revalidate(struct dentry *dentry)
+do_revalidate(struct dentry *dentry, struct lookup_intent *it)
 {
 	struct inode * inode = dentry->d_inode;
-	if (inode->i_op && inode->i_op->revalidate)
+	if (inode->i_op && inode->i_op->revalidate_it)
+		return inode->i_op->revalidate_it(dentry, it);
+	else if (inode->i_op && inode->i_op->revalidate)
 		return inode->i_op->revalidate(dentry);
 	return 0;
 }
@@ -32,13 +34,13 @@
 	return inode->i_nlink;
 }
 
-static int do_getattr(struct vfsmount *mnt, struct dentry *dentry, struct kstat *stat)
+static int do_getattr(struct vfsmount *mnt, struct dentry *dentry, struct kstat *stat, struct lookup_intent *it)
 {
 	int res = 0;
 	unsigned int blocks, indirect;
 	struct inode *inode = dentry->d_inode;
 
-	res = do_revalidate(dentry);
+	res = do_revalidate(dentry, it);
 	if (res)
 		return res;
 
@@ -111,10 +113,12 @@
 {
 	struct nameidata nd;
 	int error;
+ 	struct lookup_intent it = { .it_op = IT_GETATTR };
 
-	error = user_path_walk(name, &nd);
+	error = user_path_walk_it(name, &nd, &it);
 	if (!error) {
-		error = do_getattr(nd.mnt, nd.dentry, stat);
+		error = do_getattr(nd.mnt, nd.dentry, stat, &it);
+ 		intent_release(&it);
 		path_release(&nd);
 	}
 	return error;
@@ -124,10 +128,12 @@
 {
 	struct nameidata nd;
 	int error;
+ 	struct lookup_intent it = { .it_op = IT_GETATTR };
 
-	error = user_path_walk_link(name, &nd);
+	error = user_path_walk_link_it(name, &nd, &it);
 	if (!error) {
-		error = do_getattr(nd.mnt, nd.dentry, stat);
+		error = do_getattr(nd.mnt, nd.dentry, stat, &it);
+ 		intent_release(&it);
 		path_release(&nd);
 	}
 	return error;
@@ -139,7 +145,7 @@
 	int error = -EBADF;
 
 	if (f) {
-		error = do_getattr(f->f_vfsmnt, f->f_dentry, stat);
+		error = do_getattr(f->f_vfsmnt, f->f_dentry, stat, NULL);
 		fput(f);
 	}
 	return error;
@@ -286,7 +292,7 @@
 
 		error = -EINVAL;
 		if (inode->i_op && inode->i_op->readlink &&
-		    !(error = do_revalidate(nd.dentry))) {
+		    !(error = do_revalidate(nd.dentry, NULL))) {
 			UPDATE_ATIME(inode);
 			error = inode->i_op->readlink(nd.dentry, buf, bufsiz);
 		}
Index: linux-2.4.20-rh/include/linux/dcache.h
===================================================================
--- linux-2.4.20-rh.orig/include/linux/dcache.h	2003-07-29 11:36:22.000000000 +0800
+++ linux-2.4.20-rh/include/linux/dcache.h	2003-07-30 17:58:24.000000000 +0800
@@ -6,6 +6,52 @@
 #include <asm/atomic.h>
 #include <linux/mount.h>
 #include <linux/kernel.h>
+#include <linux/string.h>
+
+#define IT_OPEN     0x0001
+#define IT_CREAT    0x0002
+#define IT_READDIR  0x0004
+#define IT_GETATTR  0x0008
+#define IT_LOOKUP   0x0010
+#define IT_UNLINK   0x0020
+#define IT_GETXATTR 0x0040
+#define IT_EXEC     0x0080
+#define IT_PIN      0x0100
+
+#define IT_FL_LOCKED   0x0001
+#define IT_FL_FOLLOWED 0x0002 /* set by vfs_follow_link */
+
+#define INTENT_MAGIC 0x19620323
+
+
+struct lustre_intent_data {
+        int       it_disposition;
+        int       it_status;
+        __u64     it_lock_handle;
+        void     *it_data;
+        int       it_lock_mode;
+	int it_int_flags;
+};
+struct lookup_intent {
+        int     it_magic;
+        void    (*it_op_release)(struct lookup_intent *);
+        int     it_op;
+	int     it_flags;
+	int     it_create_mode;
+        union {
+                struct lustre_intent_data lustre;
+        } d;
+};
+
+
+static inline void intent_init(struct lookup_intent *it, int op, int flags)
+{
+	memset(it, 0, sizeof(*it));
+	it->it_magic = INTENT_MAGIC;
+	it->it_op = op;
+	it->it_flags = flags;
+}
+
 
 /*
  * linux/include/linux/dcache.h
@@ -96,8 +142,22 @@
 	int (*d_delete)(struct dentry *);
 	void (*d_release)(struct dentry *);
 	void (*d_iput)(struct dentry *, struct inode *);
+	int (*d_revalidate_it)(struct dentry *, int, struct lookup_intent *);
+	void (*d_pin)(struct dentry *, struct vfsmount * , int);
+	void (*d_unpin)(struct dentry *, struct vfsmount *, int);
 };
 
+#define PIN(de,mnt,flag)  if (de->d_op && de->d_op->d_pin) \
+				de->d_op->d_pin(de, mnt, flag);
+#define UNPIN(de,mnt,flag)  if (de->d_op && de->d_op->d_unpin) \
+				de->d_op->d_unpin(de, mnt, flag);
+
+
+/* defined in fs/namei.c */
+extern void intent_release(struct lookup_intent *it);
+/* defined in fs/dcache.c */
+extern void __d_rehash(struct dentry * entry, int lock);
+
 /* the dentry parameter passed to d_hash and d_compare is the parent
  * directory of the entries to be compared. It is used in case these
  * functions need any directory specific information for determining
@@ -129,6 +189,7 @@
 					 * s_nfsd_free_path semaphore will be down
 					 */
 #define DCACHE_REFERENCED	0x0008  /* Recently used, don't discard. */
+#define DCACHE_LUSTRE_INVALID	0x0010  /* Lustre invalidated */
 
 extern spinlock_t dcache_lock;
 
Index: linux-2.4.20-rh/include/linux/fs.h
===================================================================
--- linux-2.4.20-rh.orig/include/linux/fs.h	2003-07-30 17:56:12.000000000 +0800
+++ linux-2.4.20-rh/include/linux/fs.h	2003-07-30 17:57:05.000000000 +0800
@@ -338,6 +338,9 @@
 #define ATTR_MTIME_SET	256
 #define ATTR_FORCE	512	/* Not a change, but a change it */
 #define ATTR_ATTR_FLAG	1024
+#define ATTR_RAW	0x0800	/* file system, not vfs will massage attrs */
+#define ATTR_FROM_OPEN	0x1000	/* called from open path, ie O_TRUNC */
+#define ATTR_CTIME_SET 0x2000
 
 /*
  * This is the Inode Attributes structure, used for notify_change().  It
@@ -575,6 +578,7 @@
 
 	/* needed for tty driver, and maybe others */
 	void			*private_data;
+	struct lookup_intent    *f_it;
 
 	/* preallocated helper kiobuf to speedup O_DIRECT */
 	struct kiobuf		*f_iobuf;
@@ -702,6 +706,7 @@
 	struct qstr last;
 	unsigned int flags;
 	int last_type;
+	struct lookup_intent *intent;
 };
 
 /*
@@ -822,7 +827,8 @@
 extern int vfs_link(struct dentry *, struct inode *, struct dentry *);
 extern int vfs_rmdir(struct inode *, struct dentry *);
 extern int vfs_unlink(struct inode *, struct dentry *);
-extern int vfs_rename(struct inode *, struct dentry *, struct inode *, struct dentry *);
+int vfs_rename(struct inode *old_dir, struct dentry *old_dentry,
+	       struct inode *new_dir, struct dentry *new_dentry);
 
 /*
  * File types
@@ -882,21 +888,32 @@
 
 struct inode_operations {
 	int (*create) (struct inode *,struct dentry *,int);
+	int (*create_it) (struct inode *,struct dentry *,int, struct lookup_intent *);
 	struct dentry * (*lookup) (struct inode *,struct dentry *);
+	struct dentry * (*lookup_it) (struct inode *,struct dentry *, struct lookup_intent *, int flags);
 	int (*link) (struct dentry *,struct inode *,struct dentry *);
+	int (*link_raw) (struct nameidata *,struct nameidata *);
 	int (*unlink) (struct inode *,struct dentry *);
+	int (*unlink_raw) (struct nameidata *);
 	int (*symlink) (struct inode *,struct dentry *,const char *);
+	int (*symlink_raw) (struct nameidata *,const char *);
 	int (*mkdir) (struct inode *,struct dentry *,int);
+	int (*mkdir_raw) (struct nameidata *,int);
 	int (*rmdir) (struct inode *,struct dentry *);
+	int (*rmdir_raw) (struct nameidata *);
 	int (*mknod) (struct inode *,struct dentry *,int,int);
+	int (*mknod_raw) (struct nameidata *,int,dev_t);
 	int (*rename) (struct inode *, struct dentry *,
 			struct inode *, struct dentry *);
+	int (*rename_raw) (struct nameidata *, struct nameidata *);
 	int (*readlink) (struct dentry *, char *,int);
 	int (*follow_link) (struct dentry *, struct nameidata *);
 	void (*truncate) (struct inode *);
 	int (*permission) (struct inode *, int);
 	int (*revalidate) (struct dentry *);
+	int (*revalidate_it) (struct dentry *, struct lookup_intent *);
 	int (*setattr) (struct dentry *, struct iattr *);
+ 	int (*setattr_raw) (struct inode *, struct iattr *);
 	int (*getattr) (struct dentry *, struct iattr *);
 	int (*setxattr) (struct dentry *, const char *, void *, size_t, int);
 	ssize_t (*getxattr) (struct dentry *, const char *, void *, size_t);
@@ -1092,10 +1109,14 @@
 
 asmlinkage long sys_open(const char *, int, int);
 asmlinkage long sys_close(unsigned int);	/* yes, it's really unsigned */
-extern int do_truncate(struct dentry *, loff_t start);
+extern int do_truncate(struct dentry *, loff_t start, int called_from_open);
 
 extern struct file *filp_open(const char *, int, int);
 extern struct file * dentry_open(struct dentry *, struct vfsmount *, int);
+extern int open_namei_it(const char *filename, int namei_flags, int mode,
+			 struct nameidata *nd, struct lookup_intent *it);
+extern struct file *dentry_open_it(struct dentry *dentry, struct vfsmount *mnt,
+			    int flags, struct lookup_intent *it);
 extern int filp_close(struct file *, fl_owner_t id);
 extern char * getname(const char *);
 
@@ -1386,6 +1407,7 @@
 extern loff_t default_llseek(struct file *file, loff_t offset, int origin);
 
 extern int FASTCALL(__user_walk(const char *, unsigned, struct nameidata *));
+extern int FASTCALL(__user_walk_it(const char *, unsigned, struct nameidata *, struct lookup_intent *it));
 extern int FASTCALL(path_init(const char *, unsigned, struct nameidata *));
 extern int FASTCALL(path_walk(const char *, struct nameidata *));
 extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));
@@ -1397,6 +1419,8 @@
 extern struct dentry * lookup_hash(struct qstr *, struct dentry *);
 #define user_path_walk(name,nd)	 __user_walk(name, LOOKUP_FOLLOW|LOOKUP_POSITIVE, nd)
 #define user_path_walk_link(name,nd) __user_walk(name, LOOKUP_POSITIVE, nd)
+#define user_path_walk_it(name,nd,it)  __user_walk_it(name, LOOKUP_FOLLOW|LOOKUP_POSITIVE, nd, it)
+#define user_path_walk_link_it(name,nd,it) __user_walk_it(name, LOOKUP_POSITIVE, nd, it)
 
 extern void inode_init_once(struct inode *);
 extern void iput(struct inode *);
@@ -1504,6 +1528,8 @@
 
 extern int vfs_readlink(struct dentry *, char *, int, const char *);
 extern int vfs_follow_link(struct nameidata *, const char *);
+extern int vfs_follow_link_it(struct nameidata *, const char *,
+			      struct lookup_intent *it);
 extern int page_readlink(struct dentry *, char *, int);
 extern int page_follow_link(struct dentry *, struct nameidata *);
 extern struct inode_operations page_symlink_inode_operations;
Index: linux-2.4.20-rh/kernel/ksyms.c
===================================================================
--- linux-2.4.20-rh.orig/kernel/ksyms.c	2003-07-30 17:56:14.000000000 +0800
+++ linux-2.4.20-rh/kernel/ksyms.c	2003-07-30 17:56:17.000000000 +0800
@@ -298,6 +298,7 @@
 EXPORT_SYMBOL(set_page_dirty);
 EXPORT_SYMBOL(vfs_readlink);
 EXPORT_SYMBOL(vfs_follow_link);
+EXPORT_SYMBOL(vfs_follow_link_it);
 EXPORT_SYMBOL(page_readlink);
 EXPORT_SYMBOL(page_follow_link);
 EXPORT_SYMBOL(page_symlink_inode_operations);
Index: linux-2.4.20-rh/fs/exec.c
===================================================================
--- linux-2.4.20-rh.orig/fs/exec.c	2003-07-29 11:36:40.000000000 +0800
+++ linux-2.4.20-rh/fs/exec.c	2003-07-30 17:56:17.000000000 +0800
@@ -114,8 +114,9 @@
 	struct file * file;
 	struct nameidata nd;
 	int error;
+	struct lookup_intent it = { .it_op = IT_OPEN, .it_flags = O_RDONLY };
 
-	error = user_path_walk(library, &nd);
+	error = user_path_walk_it(library, &nd, &it);
 	if (error)
 		goto out;
 
@@ -127,7 +128,8 @@
 	if (error)
 		goto exit;
 
-	file = dentry_open(nd.dentry, nd.mnt, O_RDONLY);
+	file = dentry_open_it(nd.dentry, nd.mnt, O_RDONLY, &it);
+	intent_release(&it);
 	error = PTR_ERR(file);
 	if (IS_ERR(file))
 		goto out;
@@ -382,8 +384,9 @@
 	struct inode *inode;
 	struct file *file;
 	int err = 0;
+	struct lookup_intent it = { .it_op = IT_OPEN, .it_flags = O_RDONLY };
 
-	err = path_lookup(name, LOOKUP_FOLLOW|LOOKUP_POSITIVE, &nd);
+	err = path_lookup_it(name, LOOKUP_FOLLOW|LOOKUP_POSITIVE, &nd, &it);
 	file = ERR_PTR(err);
 	if (!err) {
 		inode = nd.dentry->d_inode;
@@ -395,7 +398,8 @@
 				err = -EACCES;
 			file = ERR_PTR(err);
 			if (!err) {
-				file = dentry_open(nd.dentry, nd.mnt, O_RDONLY);
+				file = dentry_open_it(nd.dentry, nd.mnt, O_RDONLY, &it);
+				intent_release(&it);
 				if (!IS_ERR(file)) {
 					err = deny_write_access(file);
 					if (err) {
@@ -407,6 +411,7 @@
 				return file;
 			}
 		}
+		intent_release(&it);
 		path_release(&nd);
 	}
 	goto out;
@@ -1296,7 +1301,7 @@
 		goto close_fail;
 	if (!file->f_op->write)
 		goto close_fail;
-	if (do_truncate(file->f_dentry, 0) != 0)
+	if (do_truncate(file->f_dentry, 0, 0) != 0)
 		goto close_fail;
 
 	retval = binfmt->core_dump(signr, regs, file);
Index: linux-2.4.20-rh/fs/proc/base.c
===================================================================
--- linux-2.4.20-rh.orig/fs/proc/base.c	2003-07-29 11:36:40.000000000 +0800
+++ linux-2.4.20-rh/fs/proc/base.c	2003-07-30 17:56:17.000000000 +0800
@@ -494,6 +494,9 @@
 
 	error = inode->u.proc_i.op.proc_get_link(inode, &nd->dentry, &nd->mnt);
 	nd->last_type = LAST_BIND;
+
+	if (nd->intent != NULL)
+		nd->intent->d.lustre.it_int_flags |= IT_FL_FOLLOWED;
 out:
 	return error;
 }
