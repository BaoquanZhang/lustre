%patch
Index: linux-2.4.24/mm/slab.c
===================================================================
--- linux-2.4.24.orig/mm/slab.c	2004-07-16 09:33:00.000000000 -0400
+++ linux-2.4.24/mm/slab.c	2004-07-17 08:02:02.000000000 -0400
@@ -97,6 +97,8 @@
 #define	FORCED_DEBUG	0
 #endif
 
+#include	<linux/vmalloc.h>
+
 /*
  * Parameters for kmem_cache_reap
  */
@@ -825,6 +827,12 @@
 	return cachep;
 }
 
+#ifdef CONFIG_DEBUG_UAF
+void * uaf_alloc(kmem_cache_t *, int gfp_mask);
+int uaf_cache_free(kmem_cache_t *, void *addr);
+int uaf_free(void *addr);
+struct page *uaf_vaddr_to_page(void *obj);
+#endif
 
 #if DEBUG
 /*
@@ -1340,6 +1348,20 @@
 	unsigned long save_flags;
 	void* objp;
 
+#ifdef CONFIG_DEBUG_UAF
+	/* try to use uaf-allocator first */
+	objp = uaf_alloc(cachep, flags);
+	if (objp) {
+		if (cachep->ctor) {
+			unsigned long ctor_flags;
+			ctor_flags = SLAB_CTOR_CONSTRUCTOR;
+			if (!(flags & __GFP_WAIT))
+				ctor_flags |= SLAB_CTOR_ATOMIC;
+			cachep->ctor(objp, cachep, ctor_flags);
+		}
+		return objp;
+	}
+#endif
 	kmem_cache_alloc_head(cachep, flags);
 try_again:
 	local_irq_save(save_flags);
@@ -1434,13 +1456,17 @@
 
 	if (cachep->flags & SLAB_RED_ZONE) {
 		objp -= BYTES_PER_WORD;
-		if (xchg((unsigned long *)objp, RED_MAGIC1) != RED_MAGIC2)
+		if (xchg((unsigned long *)objp, RED_MAGIC1) != RED_MAGIC2) {
 			/* Either write before start, or a double free. */
+			printk("inconsistency in %s\n", cachep->name);
 			BUG();
+		}
 		if (xchg((unsigned long *)(objp+cachep->objsize -
-				BYTES_PER_WORD), RED_MAGIC1) != RED_MAGIC2)
+				BYTES_PER_WORD), RED_MAGIC1) != RED_MAGIC2) {
 			/* Either write past end, or a double free. */
+			printk("inconsistency in %s\n", cachep->name);
 			BUG();
+		}
 	}
 	if (cachep->flags & SLAB_POISON)
 		kmem_poison_obj(cachep, objp);
@@ -1576,6 +1602,10 @@
 void kmem_cache_free (kmem_cache_t *cachep, void *objp)
 {
 	unsigned long flags;
+#ifdef CONFIG_DEBUG_UAF
+	if (uaf_cache_free(cachep, objp))
+		return;
+#endif
 #if DEBUG
 	CHECK_PAGE(virt_to_page(objp));
 	if (cachep != GET_PAGE_CACHE(virt_to_page(objp)))
@@ -1601,6 +1631,10 @@
 
 	if (!objp)
 		return;
+#ifdef CONFIG_DEBUG_UAF
+	if (uaf_free((void *) objp))
+		return;
+#endif
 	local_irq_save(flags);
 	CHECK_PAGE(virt_to_page(objp));
 	c = GET_PAGE_CACHE(virt_to_page(objp));
@@ -2076,3 +2110,478 @@
 #endif
 }
 #endif
+
+
+
+#ifdef CONFIG_DEBUG_UAF
+
+#define MAX_UAF_OBJ_SIZE	8	/* in pages */
+#define UAF_ASSERT(xxx)		if (!(xxx)) BUG();
+#define UAF_DEBUG__
+#ifdef UAF_DEBUG
+#define uaf_printk(fmt,a...)	printk(fmt, ##a)
+#else
+#define uaf_printk(a,...)	
+#endif
+
+struct uaf_stats {
+	atomic_t uaf_allocated;
+	atomic_t uaf_allocations;
+	atomic_t uaf_failed;
+};
+
+static int uaf_max = 8192;
+static void *uaf_bitmap = NULL;
+static spinlock_t uaf_lock;
+static int uaf_last_found = 0;
+static int uaf_used = 0;
+static struct vm_struct *uaf_area = NULL;
+static struct uaf_stats uaf_stats[MAX_UAF_OBJ_SIZE + 1];
+
+static int __init uaf_setup(char *str)
+{
+        uaf_max = simple_strtoul(str, NULL, 0);
+        return 1;
+}
+
+__setup("uaf=", uaf_setup);
+
+
+void uaf_init(void)
+{
+	int size;
+
+	printk("UAF: total vmalloc-space - %lu\n",
+			VMALLOC_END - VMALLOC_START);
+
+	uaf_area = get_vm_area(PAGE_SIZE * uaf_max, VM_ALLOC);
+	if (!uaf_area) {
+		printk(KERN_ALERT "UAF: can't reserve %lu bytes in KVA\n",
+				PAGE_SIZE * uaf_max);
+		return;
+	}
+	
+	printk("UAF: reserved %lu bytes in KVA at 0x%p\n",
+			PAGE_SIZE * uaf_max, uaf_area->addr);
+
+	/* how many bytes we need to track space usage? */
+	size = uaf_max / 8 + 8;
+
+	uaf_bitmap = vmalloc(size);
+	if (!uaf_bitmap) {
+		printk(KERN_ALERT
+			"UAF: can't allocate %d bytes for bitmap\n", size);
+		return;
+	}
+	memset(uaf_bitmap, 0, size);
+	spin_lock_init(&uaf_lock);
+	memset(uaf_stats, 0, sizeof(uaf_stats));
+
+	printk("UAF: allocated %d for bitmap\n", size);
+}
+
+static int uaf_find(int len)
+{
+	int new_last_found = -1;
+	int loop = 0;
+	int i, j;
+
+	j = uaf_last_found;
+
+	do {
+		i = find_next_zero_bit(uaf_bitmap, uaf_max, j);
+		if (i >= uaf_max) {
+			/* repeat from 0 */
+			if (++loop > 1) {
+				/* this is 2nd loop and it's useless */
+				return -1;
+			}
+
+			i = find_next_zero_bit(uaf_bitmap, uaf_max, 0);
+			if (i >= uaf_max)
+				return -1;
+
+			/* save found num for subsequent searches */
+			if (new_last_found == -1)
+				new_last_found = uaf_last_found = i;
+			UAF_ASSERT(new_last_found < uaf_max);
+		}
+
+		/*
+		 * OK. found first zero bit.
+		 * now, try to find requested cont. zero-space
+		 */
+
+		/* FIXME: implmement multipage allocation! */
+		break;
+
+		/*
+		j = find_next_bit(uaf_bitmap, uaf_max, i);
+		if (++loop2 > 10000) {
+			printk("ALERT: loop2=%d\n", loop2);
+			return -1;
+		}
+		*/
+	} while (j - i < len);
+
+	/* found! */
+	if (new_last_found == -1)
+		uaf_last_found = i + 1;
+	if (uaf_last_found >= uaf_max)
+		uaf_last_found = 0;
+	return i;
+}
+
+extern int __vmalloc_area_pages (unsigned long address, unsigned long size,
+					int gfp_mask, pgprot_t prot,
+					struct page ***pages);
+void * uaf_alloc(kmem_cache_t *cachep, int gfp_mask)
+{
+	struct page *ptrs[MAX_UAF_OBJ_SIZE];
+	int size = cachep->objsize;
+	struct page **pages;
+	unsigned long flags;
+	unsigned long addr;
+	int i, j, err = -2000;
+
+	if (uaf_bitmap == NULL)
+		return NULL;
+
+	if (!(cachep->flags & SLAB_USE_UAF))
+		return NULL;
+
+	pages = (struct page **) ptrs;
+	size = (size + (PAGE_SIZE - 1)) / PAGE_SIZE;
+	/* FIXME: implement multipage allocation! */
+	if (size > 1)
+		return NULL;
+	if (size > MAX_UAF_OBJ_SIZE) {
+		printk(KERN_ALERT "size is too big: %d\n", size);
+		return NULL;
+	}
+
+	if (uaf_used == uaf_max) {
+		uaf_printk("UAF: space exhausted!\n");
+		atomic_inc(&uaf_stats[size].uaf_failed);
+		return NULL;
+	}
+
+
+	spin_lock_irqsave(&uaf_lock, flags);
+	i = uaf_find(size);
+	if (i < 0) {
+		spin_unlock_irqrestore(&uaf_lock, flags);
+		atomic_inc(&uaf_stats[size].uaf_failed);
+		return NULL;
+	}
+	for (j = 0; j < size; j++) {
+		UAF_ASSERT(!test_bit(i + j, uaf_bitmap));
+		set_bit(i + j, uaf_bitmap);
+		uaf_used++;
+	}
+	spin_unlock_irqrestore(&uaf_lock, flags);
+
+	addr = ((unsigned long) uaf_area->addr) + (PAGE_SIZE * i);
+	uaf_printk("UAF: found %d/%d, base 0x%p, map at 0x%lx: ", i,
+			size, uaf_area->addr, addr);
+
+	/* OK. we've found free space, let's allocate pages */
+	memset(pages, 0, sizeof(struct page *) * MAX_UAF_OBJ_SIZE);
+	for (j = 0; j < size; j++) {
+		pages[j] = alloc_page(gfp_mask);
+		if (pages[j] == NULL)
+			goto nomem;
+		uaf_printk("0x%p ", pages[j]);
+	}
+
+	/* time to map just allocated pages */
+	err = __vmalloc_area_pages(addr, PAGE_SIZE * size, gfp_mask,
+					PAGE_KERNEL, &pages);
+	pages = (struct page **) ptrs;
+	if (err == 0) {
+		/* put slab cache pointer in first page */
+		ptrs[0]->list.next = (void *) cachep;
+		uaf_printk(" -> 0x%lx\n", addr);
+		atomic_inc(&uaf_stats[size].uaf_allocated);
+		atomic_inc(&uaf_stats[size].uaf_allocations);
+		if (!in_interrupt() && !in_softirq())
+			flush_tlb_all();
+		else
+			local_flush_tlb();
+		size = cachep->objsize;
+		if (size < PAGE_SIZE)
+			memset((char *) addr + size, 0xa7, PAGE_SIZE - size);
+		return (void *) addr;
+	}
+
+nomem:
+	printk(KERN_ALERT "can't map pages: %d\n", err);
+	for (j = 0; j < size; j++)
+		if (pages[j])
+			__free_page(pages[j]);
+
+	/* can't find free pages */
+	spin_lock_irqsave(&uaf_lock, flags);
+	for (j = 0; j < size; j++) {
+		clear_bit(i + j, uaf_bitmap);
+		uaf_used--;
+	}
+	spin_unlock_irqrestore(&uaf_lock, flags);
+	atomic_inc(&uaf_stats[size].uaf_failed);
+
+	return NULL;
+}
+
+extern void free_area_pmd(pgd_t *dir, unsigned long address,
+				  unsigned long size);
+static void uaf_unmap(unsigned long address, unsigned long size)
+{
+	unsigned long end = (address + size);
+	pgd_t *dir;
+
+	dir = pgd_offset_k(address);
+	flush_cache_all();
+	do {
+		free_area_pmd(dir, address, end - address);
+		address = (address + PGDIR_SIZE) & PGDIR_MASK;
+		dir++;
+	} while (address && (address < end));
+
+	/*
+	 * we must not call smp_call_function() with interrtups disabled
+	 * otherwise we can get into deadlock
+	 */
+	if (!in_interrupt() && !in_softirq())
+		flush_tlb_all();
+	else
+		local_flush_tlb();
+}
+
+/*
+ * returns 1 if free was successfull
+ */
+int uaf_cache_free(kmem_cache_t *cachep, void *addr)
+{
+	struct page *pages[MAX_UAF_OBJ_SIZE];
+	int size = cachep->objsize;
+	unsigned long flags;
+	int i, j;
+
+	if (cachep->flags & SLAB_USE_UAF)
+		uaf_printk("UAF: to free 0x%p/%d\n", addr, size);
+
+	size = (size + (PAGE_SIZE - 1)) / PAGE_SIZE;
+	if (size > MAX_UAF_OBJ_SIZE)
+		return 0;
+
+	if (uaf_bitmap == NULL)
+		return 0;
+
+	/* first, check is address is in UAF space */
+	if ((unsigned) addr < (unsigned) uaf_area->addr ||
+		(unsigned) addr >= (unsigned) uaf_area->addr + uaf_area->size)
+		return 0;
+
+	uaf_printk("UAF: to free 0x%p/%d\n", addr, size);
+
+	/* calculate placement in bitmap */
+	i = (unsigned) addr - (unsigned) uaf_area->addr;
+	UAF_ASSERT(i >= 0);
+	i = i / PAGE_SIZE;
+
+	/* check against double-free */
+	spin_lock_irqsave(&uaf_lock, flags);
+	for (j = 0; j < size; j++) {
+		/* now check is correspondend bit set */
+		unsigned long address;
+		UAF_ASSERT(i+j >= 0 && i+j < uaf_max);
+		BUG_ON(!test_bit(i+j, uaf_bitmap));
+
+		address = ((unsigned long) addr) + (PAGE_SIZE * j);
+		pages[j] = vmalloc_to_page((void *) address);
+		BUG_ON(pages[j] == NULL);
+
+		/* now free space in UAF */
+		clear_bit(i+j, uaf_bitmap);
+		uaf_used--;
+	}
+	spin_unlock_irqrestore(&uaf_lock, flags);
+
+	/* check poison bytes */
+	if (cachep->objsize < PAGE_SIZE) {
+		unsigned char *a = (void *) addr;
+		for (i = 0; i < PAGE_SIZE - cachep->objsize; i++)
+			if (a[cachep->objsize + i] != 0xa7) {
+				printk("corruption(0x%x) at %u in %s/0x%p\n",
+					(unsigned) a[cachep->objsize + i],
+					cachep->objsize + i, cachep->name, addr);
+				BUG();
+			}
+	}
+	UAF_ASSERT(((unsigned long) addr & ~PAGE_MASK) == 0UL);
+	
+	/* calculate placement in bitmap */
+	i = (unsigned) addr - (unsigned) uaf_area->addr;
+	UAF_ASSERT(i >= 0);
+	i = i / PAGE_SIZE;
+
+	uaf_unmap((unsigned long) addr, PAGE_SIZE * size);
+	/* free all the pages */
+	for (j = 0; j < size; j++)
+		__free_page(pages[j]);
+
+	atomic_dec(&uaf_stats[size].uaf_allocated);
+	
+	uaf_printk("UAF: freed %d/%d at 0x%p\n", i, size, addr);
+	//printk("UAF: freed %d/%d at 0x%p\n", i, size, addr);
+
+	return 1;
+}
+
+struct page *uaf_vaddr_to_page(void *obj)
+{
+	if (uaf_bitmap == NULL)
+		return NULL;
+
+	/* first, check is address is in UAF space */
+	if ((unsigned) obj < (unsigned) uaf_area->addr ||
+		(unsigned) obj >= (unsigned) uaf_area->addr + uaf_area->size)
+		return NULL;
+	
+	return vmalloc_to_page(obj);
+}
+
+int uaf_free(void *obj)
+{
+	struct page *page = uaf_vaddr_to_page((void *) obj);
+	kmem_cache_t *c;
+
+	if (!page)
+		return 0;
+
+	c = GET_PAGE_CACHE(page);
+	return uaf_cache_free(c, (void *) obj);
+}
+
+int uaf_is_allocated(void *obj)
+{
+	unsigned long addr = (unsigned long) obj;
+	int i;
+
+	if (uaf_bitmap == NULL)
+		return 0;
+
+	addr &= PAGE_MASK;
+	/* first, check is address is in UAF space */
+	if (addr < (unsigned long) uaf_area->addr ||
+			addr >= (unsigned long) uaf_area->addr + uaf_area->size)
+		return 0;
+
+	/* calculate placement in bitmap */
+	i = (unsigned) addr - (unsigned) uaf_area->addr;
+	i = i / PAGE_SIZE;
+	return test_bit(i, uaf_bitmap);
+}
+
+static void *uaf_s_start(struct seq_file *m, loff_t *pos)
+{
+	loff_t n = *pos;
+
+	if (!n)
+		seq_printf(m, "size(pgs) allocated failed allocations. "
+				"%d reserved, %d in use, %d last\n"
+				"start 0x%p, size %lu, bitmap 0x%p\n"
+				"VMALLOC_START 0x%x, VMALLOC_END 0x%x\n",
+				uaf_max, uaf_used, uaf_last_found,
+				uaf_area->addr, uaf_area->size,
+				uaf_bitmap, VMALLOC_START, VMALLOC_END);
+	else if (n > MAX_UAF_OBJ_SIZE)
+		return NULL;
+
+	*pos = 1;
+	return (void *) 1;
+}
+
+static void *uaf_s_next(struct seq_file *m, void *p, loff_t *pos)
+{
+	unsigned long n = *pos;
+	++*pos;
+	if (n + 1 > MAX_UAF_OBJ_SIZE)
+		return NULL;
+	return (void *) (n + 1);
+}
+
+static void uaf_s_stop(struct seq_file *m, void *p)
+{
+}
+
+static int uaf_s_show(struct seq_file *m, void *p)
+{
+	int n = (int) p;
+
+	if (n > MAX_UAF_OBJ_SIZE)
+		return 0;
+	seq_printf(m, "%d  %d  %d %d\n", n, 
+			atomic_read(&uaf_stats[n].uaf_allocated),
+			atomic_read(&uaf_stats[n].uaf_failed),
+			atomic_read(&uaf_stats[n].uaf_allocations));
+	return 0;
+}
+
+struct seq_operations uafinfo_op = {
+	.start	= uaf_s_start,
+	.next	= uaf_s_next,
+	.stop	= uaf_s_stop,
+	.show	= uaf_s_show,
+};
+
+ssize_t uafinfo_write(struct file *file, const char *buffer,
+				size_t count, loff_t *ppos)
+{
+	char kbuf[MAX_SLABINFO_WRITE+1], *tmp;
+	char *key, *name;
+	int res;
+	struct list_head *p;
+	
+	if (count > MAX_SLABINFO_WRITE)
+		return -EINVAL;
+	if (copy_from_user(&kbuf, buffer, count))
+		return -EFAULT;
+	kbuf[MAX_SLABINFO_WRITE] = '\0'; 
+
+	tmp = kbuf;
+	key = strsep(&tmp, " \t\n");
+	if (!key)
+		return -EINVAL;
+	if (!strcmp(key, "on"))
+		res = 1;
+	else if (!strcmp(key, "off"))
+		res = 0;
+	else
+		return -EINVAL;
+
+	name = strsep(&tmp, " \t\n");
+	if (!name)
+		return -EINVAL;
+
+	/* Find the cache in the chain of caches. */
+	down(&cache_chain_sem);
+	list_for_each(p,&cache_chain) {
+		kmem_cache_t *cachep = list_entry(p, kmem_cache_t, next);
+
+		if (!strcmp(cachep->name, name)) {
+			if (res) {
+				printk("UAF: use on %s\n", cachep->name);
+				cachep->flags |= SLAB_USE_UAF;
+			} else {
+				printk("UAF: dont use on %s\n", cachep->name);
+				cachep->flags &= ~SLAB_USE_UAF;
+			}
+			break;
+		}
+	}
+	up(&cache_chain_sem);
+	return count;
+}
+#endif
+
Index: linux-2.4.24/mm/vmalloc.c
===================================================================
--- linux-2.4.24.orig/mm/vmalloc.c	2004-07-16 09:24:01.000000000 -0400
+++ linux-2.4.24/mm/vmalloc.c	2004-07-16 13:55:05.000000000 -0400
@@ -53,7 +53,7 @@
 	} while (address < end);
 }
 
-static inline void free_area_pmd(pgd_t * dir, unsigned long address, unsigned long size)
+void free_area_pmd(pgd_t * dir, unsigned long address, unsigned long size)
 {
 	pmd_t * pmd;
 	unsigned long end;
@@ -152,7 +152,7 @@
 	return 0;
 }
 
-static inline int __vmalloc_area_pages (unsigned long address,
+int __vmalloc_area_pages (unsigned long address,
 					unsigned long size,
 					int gfp_mask,
 					pgprot_t prot,
Index: linux-2.4.24/mm/page_alloc.c
===================================================================
--- linux-2.4.24.orig/mm/page_alloc.c	2004-07-16 09:33:00.000000000 -0400
+++ linux-2.4.24/mm/page_alloc.c	2004-07-16 13:55:05.000000000 -0400
@@ -91,6 +91,12 @@
 	zone_t *zone;
 
 	arch_free_page(page, order);
+
+	for (index = 0; index < (1 << order); index++) {
+		BUG_ON(atomic_read(&page[index].count) > 0);
+		BUG_ON(PageSlab(page + index));
+	}
+
 	/*
 	 * Yes, think what happens when other parts of the kernel take 
 	 * a reference to a page in order to pin it for io. -ben
Index: linux-2.4.24/init/main.c
===================================================================
--- linux-2.4.24.orig/init/main.c	2004-07-16 09:24:01.000000000 -0400
+++ linux-2.4.24/init/main.c	2004-07-16 13:55:05.000000000 -0400
@@ -437,6 +437,9 @@
 #if defined(CONFIG_SYSVIPC)
 	ipc_init();
 #endif
+#ifdef CONFIG_DEBUG_UAF
+	uaf_init();
+#endif
 	rest_init();
 }
 
Index: linux-2.4.24/fs/proc/proc_misc.c
===================================================================
--- linux-2.4.24.orig/fs/proc/proc_misc.c	2004-07-16 09:23:51.000000000 -0400
+++ linux-2.4.24/fs/proc/proc_misc.c	2004-07-16 13:55:05.000000000 -0400
@@ -303,6 +303,22 @@
 	release:	seq_release,
 };
 
+#ifdef CONFIG_DEBUG_UAF
+extern struct seq_operations uafinfo_op;
+extern ssize_t uafinfo_write(struct file *, const char *, size_t, loff_t *);
+static int uafinfo_open(struct inode *inode, struct file *file)
+{
+	return seq_open(file, &uafinfo_op);
+}
+static struct file_operations proc_uafinfo_operations = {
+	.open		= uafinfo_open,
+	.read		= seq_read,
+	.write		= uafinfo_write,
+	.llseek		= seq_lseek,
+	.release	= seq_release,
+};
+#endif
+
 static int kstat_read_proc(char *page, char **start, off_t off,
 				 int count, int *eof, void *data)
 {
@@ -640,6 +656,9 @@
 	create_seq_entry("iomem", 0, &proc_iomem_operations);
 	create_seq_entry("partitions", 0, &proc_partitions_operations);
 	create_seq_entry("slabinfo",S_IWUSR|S_IRUGO,&proc_slabinfo_operations);
+#ifdef CONFIG_DEBUG_UAF
+	create_seq_entry("uafinfo",S_IWUSR|S_IRUGO,&proc_uafinfo_operations);
+#endif
 #ifdef CONFIG_MODULES
 	create_seq_entry("ksyms", 0, &proc_ksyms_operations);
 #endif
Index: linux-2.4.24/include/linux/slab.h
===================================================================
--- linux-2.4.24.orig/include/linux/slab.h	2004-07-16 09:33:00.000000000 -0400
+++ linux-2.4.24/include/linux/slab.h	2004-07-17 05:26:51.000000000 -0400
@@ -40,6 +40,7 @@
 #define	SLAB_HWCACHE_ALIGN	0x00002000UL	/* align objs on a h/w cache lines */
 #define SLAB_CACHE_DMA		0x00004000UL	/* use GFP_DMA memory */
 #define SLAB_MUST_HWCACHE_ALIGN	0x00008000UL	/* force alignment */
+#define SLAB_USE_UAF		0x00040000UL	/* use UAF allocator */
 
 /* flags passed to a constructor func */
 #define	SLAB_CTOR_CONSTRUCTOR	0x001UL		/* if not set, then deconstructor */
Index: linux-2.4.24/include/asm-i386/io.h
===================================================================
--- linux-2.4.24.orig/include/asm-i386/io.h	2004-07-16 09:23:54.000000000 -0400
+++ linux-2.4.24/include/asm-i386/io.h	2004-07-17 05:27:02.000000000 -0400
@@ -75,6 +75,16 @@
  
 static inline unsigned long virt_to_phys(volatile void * address)
 {
+#ifdef CONFIG_DEBUG_UAF
+	unsigned long addr = (unsigned long) address;
+	if (vmlist && addr >= VMALLOC_START && addr < VMALLOC_END) {
+		struct page *page = vmalloc_to_page((void *) address);
+		if (page) {
+			unsigned long offset = addr & ~PAGE_MASK;
+			address = page_address(page) + offset;
+		}
+	}
+#endif
 	return __pa(address);
 }
 
Index: linux-2.4.24/include/asm-i386/page.h
===================================================================
--- linux-2.4.24.orig/include/asm-i386/page.h	2004-07-16 09:33:00.000000000 -0400
+++ linux-2.4.24/include/asm-i386/page.h	2004-07-17 05:26:19.000000000 -0400
@@ -131,9 +131,60 @@
 #define VMALLOC_RESERVE		((unsigned long)__VMALLOC_RESERVE)
 #define __MAXMEM		(-__PAGE_OFFSET-__VMALLOC_RESERVE)
 #define MAXMEM			((unsigned long)(-PAGE_OFFSET-VMALLOC_RESERVE))
+
+#ifndef CONFIG_DEBUG_UAF
 #define __pa(x)			((unsigned long)(x)-PAGE_OFFSET)
 #define __va(x)			((void *)((unsigned long)(x)+PAGE_OFFSET))
 #define virt_to_page(kaddr)	(mem_map + (__pa(kaddr) >> PAGE_SHIFT))
+#else
+#define __pa(x)		({							\
+				unsigned long __pn, __fr;			\
+				__pn = (unsigned long)(x)-PAGE_OFFSET;		\
+				__fr = __pn >> PAGE_SHIFT;			\
+				if (jiffies > HZ*3 && __fr >= max_mapnr) {	\
+					printk("invalid arg __pa(0x%x)"		\
+						" at %s:%d\n", (unsigned) (x),	\
+						__FILE__, __LINE__);		\
+					dump_stack();				\
+				}						\
+				__pn;						\
+			})
+
+#define __va(x)		({							\
+				unsigned long __pn;				\
+				__pn = (unsigned long) (x) >> PAGE_SHIFT;	\
+				if (jiffies > HZ*3 && __pn >= max_mapnr) {	\
+					printk("invalid arg __va(0x%x)"		\
+						" at %s:%d\n", (unsigned) (x),	\
+						__FILE__, __LINE__);		\
+					dump_stack();				\
+				}						\
+				((void *)((unsigned long)(x) + PAGE_OFFSET));	\
+			})
+#ifndef PKMAP_BASE
+#define PKMAP_BASE (0xfe000000UL)
+#endif
+#define virt_to_page(ka) ({							\
+				struct page *_p;				\
+				if ((unsigned)(ka) >= VMALLOC_START &&		\
+						(unsigned)(ka) < VMALLOC_END) {	\
+					_p = vmalloc_to_page((void *)(ka));	\
+					if (!_p) {				\
+						printk(KERN_ALERT		\
+							"wrong address 0x%x, "	\
+							"VMALLOC_START 0x%x\n",	\
+							(unsigned) (ka),	\
+						(unsigned)VMALLOC_START);	\
+					_p = mem_map+(__pa(ka) >> PAGE_SHIFT);	\
+						dump_stack();			\
+					}					\
+				} else 						\
+					_p = mem_map+(__pa(ka) >> PAGE_SHIFT);	\
+				(_p);						\
+			})
+#endif
+
+
 #define VALID_PAGE(page)	((page - mem_map) < max_mapnr)
 
 #define VM_DATA_DEFAULT_FLAGS	(VM_READ | VM_WRITE | VM_EXEC | \
Index: linux-2.4.24/arch/i386/config.in
===================================================================
--- linux-2.4.24.orig/arch/i386/config.in	2004-07-16 09:33:02.000000000 -0400
+++ linux-2.4.24/arch/i386/config.in	2004-07-16 13:55:05.000000000 -0400
@@ -509,6 +509,9 @@
    bool '  Check for stack overflows' CONFIG_DEBUG_STACKOVERFLOW
    bool '  Debug high memory support' CONFIG_DEBUG_HIGHMEM
    bool '  Debug memory allocations' CONFIG_DEBUG_SLAB
+   if [ "$CONFIG_DEBUG_SLAB" != "n" ]; then
+      bool '  Debug memory allocations (use-after-free via vmalloced space)' CONFIG_DEBUG_UAF
+   fi
    bool '  Memory mapped I/O debugging' CONFIG_DEBUG_IOVIRT
    bool '  Magic SysRq key' CONFIG_MAGIC_SYSRQ
    bool '  Spinlock debugging' CONFIG_DEBUG_SPINLOCK
Index: linux-2.4.24/kernel/ksyms.c
===================================================================
--- linux-2.4.24.orig/kernel/ksyms.c	2004-07-16 09:36:49.000000000 -0400
+++ linux-2.4.24/kernel/ksyms.c	2004-07-16 13:55:05.000000000 -0400
@@ -123,6 +123,8 @@
 EXPORT_SYMBOL(kfree);
 EXPORT_SYMBOL(vfree);
 EXPORT_SYMBOL(__vmalloc);
+extern struct vm_struct * vmlist;
+EXPORT_SYMBOL(vmlist);
 EXPORT_SYMBOL(vmap);
 EXPORT_SYMBOL(vmalloc_to_page);
 EXPORT_SYMBOL(mem_map);

%diffstat
 arch/i386/config.in     |    3 
 fs/proc/proc_misc.c     |   19 +
 include/asm-i386/io.h   |   10 
 include/asm-i386/page.h |   51 ++++
 include/linux/slab.h    |    1 
 init/main.c             |    3 
 kernel/ksyms.c          |    2 
 mm/page_alloc.c         |    6 
 mm/slab.c               |  513 +++++++++++++++++++++++++++++++++++++++++++++++-
 mm/vmalloc.c            |    4 
 10 files changed, 608 insertions(+), 4 deletions(-)

