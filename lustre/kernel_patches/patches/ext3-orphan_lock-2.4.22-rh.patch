 fs/ext3/namei.c                 |   15 +++++++--------
 fs/ext3/namei.c.orig            |   21 +++++++++++++++------
 fs/ext3/super.c                 |    1 +
 include/linux/ext3_fs_sb.h      |    1 +
 include/linux/ext3_fs_sb.h.orig |    2 ++
 5 files changed, 26 insertions(+), 14 deletions(-)

--- linux-2.4.22-ac1/fs/ext3/namei.c~ext3-orphan_lock-2.4.22-rh	2003-09-26 00:24:09.000000000 +0400
+++ linux-2.4.22-ac1-alexey/fs/ext3/namei.c	2003-09-26 00:26:36.000000000 +0400
@@ -1748,8 +1748,8 @@ int ext3_orphan_add(handle_t *handle, st
 	struct super_block *sb = inode->i_sb;
 	struct ext3_iloc iloc;
 	int err = 0, rc;
-	
-	lock_super(sb);
+
+	down(&EXT3_SB(sb)->s_orphan_lock);
 	if (!list_empty(&EXT3_I(inode)->i_orphan))
 		goto out_unlock;
 
@@ -1797,7 +1797,7 @@ int ext3_orphan_add(handle_t *handle, st
 	jbd_debug(4, "orphan inode %ld will point to %d\n",
 			inode->i_ino, NEXT_ORPHAN(inode));
 out_unlock:
-	unlock_super(sb);
+	up(&EXT3_SB(sb)->s_orphan_lock);
 	ext3_std_error(inode->i_sb, err);
 	return err;
 }
@@ -1810,20 +1810,19 @@ int ext3_orphan_del(handle_t *handle, st
 {
 	struct list_head *prev;
  	struct ext3_inode_info *ei = EXT3_I(inode);
-	struct ext3_sb_info *sbi;
+	struct ext3_sb_info *sbi = EXT3_SB(inode->i_sb);
 	unsigned long ino_next;
 	struct ext3_iloc iloc;
 	int err = 0;
 
-	lock_super(inode->i_sb);
+	down(&sbi->s_orphan_lock);
  	if (list_empty(&ei->i_orphan)) {
-		unlock_super(inode->i_sb);
+		up(&sbi->s_orphan_lock);
 		return 0;
 	}
 
 	ino_next = NEXT_ORPHAN(inode);
  	prev = ei->i_orphan.prev;
-	sbi = EXT3_SB(inode->i_sb);
 
 	jbd_debug(4, "remove inode %lu from orphan list\n", inode->i_ino);
 
@@ -1872,7 +1871,7 @@ int ext3_orphan_del(handle_t *handle, st
 out_err:
 	ext3_std_error(inode->i_sb, err);
 out:
-	unlock_super(inode->i_sb);
+	up(&sbi->s_orphan_lock);
 	return err;
 
 out_brelse:
--- linux-2.4.22-ac1/fs/ext3/namei.c.orig~ext3-orphan_lock-2.4.22-rh	2003-09-25 14:58:37.000000000 +0400
+++ linux-2.4.22-ac1-alexey/fs/ext3/namei.c.orig	2003-09-26 00:24:09.000000000 +0400
@@ -29,6 +29,7 @@
 #include <linux/sched.h>
 #include <linux/ext3_fs.h>
 #include <linux/ext3_jbd.h>
+#include <linux/ext3_xattr.h>
 #include <linux/fcntl.h>
 #include <linux/stat.h>
 #include <linux/string.h>
@@ -1614,7 +1615,7 @@ static int ext3_mkdir(struct inode * dir
 	if (IS_SYNC(dir))
 		handle->h_sync = 1;
 
-	inode = ext3_new_inode (handle, dir, S_IFDIR);
+	inode = ext3_new_inode (handle, dir, S_IFDIR | mode);
 	err = PTR_ERR(inode);
 	if (IS_ERR(inode))
 		goto out_stop;
@@ -1622,7 +1623,6 @@ static int ext3_mkdir(struct inode * dir
 	inode->i_op = &ext3_dir_inode_operations;
 	inode->i_fop = &ext3_dir_operations;
 	inode->i_size = EXT3_I(inode)->i_disksize = inode->i_sb->s_blocksize;
-	inode->i_blocks = 0;	
 	dir_block = ext3_bread (handle, inode, 0, 1, &err);
 	if (!dir_block) {
 		inode->i_nlink--; /* is this nlink == 0? */
@@ -1649,9 +1649,6 @@ static int ext3_mkdir(struct inode * dir
 	BUFFER_TRACE(dir_block, "call ext3_journal_dirty_metadata");
 	ext3_journal_dirty_metadata(handle, dir_block);
 	brelse (dir_block);
-	inode->i_mode = S_IFDIR | mode;
-	if (dir->i_mode & S_ISGID)
-		inode->i_mode |= S_ISGID;
 	ext3_mark_inode_dirty(handle, inode);
 	err = ext3_add_entry (handle, dentry, inode);
 	if (err) {
@@ -2020,7 +2017,7 @@ static int ext3_symlink (struct inode * 
 		goto out_stop;
 
 	if (l > sizeof (EXT3_I(inode)->i_data)) {
-		inode->i_op = &page_symlink_inode_operations;
+		inode->i_op = &ext3_symlink_inode_operations;
 		inode->i_mapping->a_ops = &ext3_aops;
 		/*
 		 * block_symlink() calls back into ext3_prepare/commit_write.
@@ -2245,4 +2242,16 @@ struct inode_operations ext3_dir_inode_o
 	rmdir:		ext3_rmdir,		/* BKL held */
 	mknod:		ext3_mknod,		/* BKL held */
 	rename:		ext3_rename,		/* BKL held */
+	setxattr:	ext3_setxattr,		/* BKL held */
+	getxattr:	ext3_getxattr,		/* BKL held */
+	listxattr:	ext3_listxattr,		/* BKL held */
+	removexattr:	ext3_removexattr,	/* BKL held */
 };
+
+struct inode_operations ext3_special_inode_operations = {
+	setxattr:	ext3_setxattr,		/* BKL held */
+	getxattr:	ext3_getxattr,		/* BKL held */
+	listxattr:	ext3_listxattr,		/* BKL held */
+	removexattr:	ext3_removexattr,	/* BKL held */
+};
+
--- linux-2.4.22-ac1/fs/ext3/super.c~ext3-orphan_lock-2.4.22-rh	2003-09-26 00:24:09.000000000 +0400
+++ linux-2.4.22-ac1-alexey/fs/ext3/super.c	2003-09-26 00:25:22.000000000 +0400
@@ -1164,6 +1164,7 @@ struct super_block * ext3_read_super (st
 	sb->s_op = &ext3_sops;
 	sb->dq_op = &ext3_qops;
 	INIT_LIST_HEAD(&sbi->s_orphan); /* unlinked but open files */
+	sema_init(&sbi->s_orphan_lock, 1);
 
 	sb->s_root = 0;
 
--- linux-2.4.22-ac1/include/linux/ext3_fs_sb.h~ext3-orphan_lock-2.4.22-rh	2003-09-26 00:24:08.000000000 +0400
+++ linux-2.4.22-ac1-alexey/include/linux/ext3_fs_sb.h	2003-09-26 00:25:22.000000000 +0400
@@ -72,6 +72,7 @@ struct ext3_sb_info {
 	struct inode * s_journal_inode;
 	struct journal_s * s_journal;
 	struct list_head s_orphan;
+	struct semaphore s_orphan_lock;
 	unsigned long s_commit_interval;
 	struct block_device *journal_bdev;
 #ifdef CONFIG_JBD_DEBUG
--- linux-2.4.22-ac1/include/linux/ext3_fs_sb.h.orig~ext3-orphan_lock-2.4.22-rh	2003-09-25 14:16:34.000000000 +0400
+++ linux-2.4.22-ac1-alexey/include/linux/ext3_fs_sb.h.orig	2003-09-26 00:24:08.000000000 +0400
@@ -62,6 +62,8 @@ struct ext3_sb_info {
 	int s_inode_size;
 	int s_first_ino;
 	u32 s_next_generation;
+	u32 s_hash_seed[4];
+	int s_def_hash_version;
 
 	unsigned long s_dir_count;
 	u8 *s_debts;

_
