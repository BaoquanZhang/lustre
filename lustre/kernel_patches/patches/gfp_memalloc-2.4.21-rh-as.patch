Index: linux-2.4.21-4.EL/include/linux/mm.h
===================================================================
--- linux-2.4.21-4.EL.orig/include/linux/mm.h	2004-06-24 02:40:51.000000000 +0800
+++ linux-2.4.21-4.EL/include/linux/mm.h	2004-06-24 02:58:42.000000000 +0800
@@ -830,6 +830,7 @@
 #define __GFP_IO	0x40	/* Can start low memory physical IO? */
 #define __GFP_HIGHIO	0x80	/* Can start high mem physical IO? */
 #define __GFP_FS	0x100	/* Can call down to low-level FS? */
+#define __GFP_MEMALLOC  0x200   /* like PF_MEMALLOC: see __alloc_pages */
 
 #define GFP_NOHIGHIO	(__GFP_HIGH | __GFP_WAIT | __GFP_IO)
 #define GFP_NOIO	(__GFP_HIGH | __GFP_WAIT)
@@ -840,6 +841,7 @@
 #define GFP_KERNEL	(__GFP_HIGH | __GFP_WAIT | __GFP_IO | __GFP_HIGHIO | __GFP_FS)
 #define GFP_NFS		(__GFP_HIGH | __GFP_WAIT | __GFP_IO | __GFP_HIGHIO | __GFP_FS)
 #define GFP_KSWAPD	(             __GFP_WAIT | __GFP_IO | __GFP_HIGHIO | __GFP_FS)
+#define GFP_MEMALLOC	__GFP_MEMALLOC
 
 /* Flag - indicates that the buffer will be suitable for DMA.  Ignored on some
    platforms, used as appropriate on others */
Index: linux-2.4.21-4.EL/include/linux/slab.h
===================================================================
--- linux-2.4.21-4.EL.orig/include/linux/slab.h	2003-10-04 05:29:48.000000000 +0800
+++ linux-2.4.21-4.EL/include/linux/slab.h	2004-06-24 02:55:59.000000000 +0800
@@ -23,6 +23,7 @@
 #define	SLAB_KERNEL		GFP_KERNEL
 #define	SLAB_NFS		GFP_NFS
 #define	SLAB_DMA		GFP_DMA
+#define	SLAB_MEMALLOC		GFP_MEMALLOC
 
 #define SLAB_LEVEL_MASK		(__GFP_WAIT|__GFP_HIGH|__GFP_IO|__GFP_HIGHIO|__GFP_FS)
 #define	SLAB_NO_GROW		0x00001000UL	/* don't grow a cache */
Index: linux-2.4.21-4.EL/mm/page_alloc.c
===================================================================
--- linux-2.4.21-4.EL.orig/mm/page_alloc.c	2004-06-24 02:40:38.000000000 +0800
+++ linux-2.4.21-4.EL/mm/page_alloc.c	2004-06-24 02:55:59.000000000 +0800
@@ -563,7 +563,8 @@
 	/*
 	 * Oh well, we didn't succeed.
 	 */
-	if (!(current->flags & (PF_MEMALLOC|PF_MEMDIE))) {
+	if (!(current->flags & (PF_MEMALLOC|PF_MEMDIE)) &&
+		!(gfp_mask & __GFP_MEMALLOC)) {
 		/*
 		 * Are we dealing with a higher order allocation?
 		 *
@@ -636,7 +637,9 @@
 
 		/* XXX: is pages_min/4 a good amount to reserve for this? */
 		min += z->pages_min / 4;
-		if (z->free_pages > min || ((current->flags & PF_MEMALLOC) && !in_interrupt())) {
+		if (z->free_pages > min ||
+		    (((current->flags & PF_MEMALLOC) || (gfp_mask & __GFP_MEMALLOC))
+		     && !in_interrupt())) {
 			page = rmqueue(z, order);
 			if (page)
 				return page;
Index: linux-2.4.21-4.EL/mm/slab.c
===================================================================
--- linux-2.4.21-4.EL.orig/mm/slab.c	2003-10-04 05:28:49.000000000 +0800
+++ linux-2.4.21-4.EL/mm/slab.c	2004-06-24 02:55:59.000000000 +0800
@@ -1118,7 +1118,7 @@
 	/* Be lazy and only check for valid flags here,
  	 * keeping it out of the critical path in kmem_cache_alloc().
 	 */
-	if (flags & ~(SLAB_DMA|SLAB_LEVEL_MASK|SLAB_NO_GROW))
+	if (flags & ~(SLAB_DMA|SLAB_LEVEL_MASK|SLAB_NO_GROW|SLAB_MEMALLOC))
 		BUG();
 	if (flags & SLAB_NO_GROW)
 		return 0;
