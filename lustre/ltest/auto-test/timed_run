#!/usr/bin/env python

# Usage: timed_run timeout command
#
# This script runs "command", and if the command completes in less than
# "timeout" seconds, it returns the return code of "command".  If the timeout
# is reached before the command completes, the command will be sent SIGKILL
# and this script will return 1 (failure).

import os, signal, sys

pid = None

def alarm_handler(signum, frame):
    global pid
    try:
        print 'timed_run:', sys.argv[1], 'second timeout exceeded; killing process.'
        os.kill(pid, signal.SIGKILL)
    except:
        pass
    sys.exit(1)

def forkexec(command, args):
    try:
        pid = os.fork()
        if pid == 0:  # Child
            os.execvp(command, args)
        else:  # Parent
            return pid
    except OSError, e:
        print "Fork failed: %d (%s)" % (e.errno, e.strerror)
        sys.exit(1)

signal.signal(signal.SIGALRM, alarm_handler)
signal.alarm(int(sys.argv[1]))
pid = forkexec(sys.argv[2], sys.argv[2:])
status = os.waitpid(pid, 0)[1]
signal.alarm(0) # Cancel the alarm
if os.WIFEXITED(status):
    rc = os.WEXITSTATUS(status)
else:
    rc = 1
#print 'rc =', rc
sys.exit(rc)
